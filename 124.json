{"response_code":"00","response_msg":"Berhasil mendapatkan materi kelas","materi_kelas":{"id":25,"uuid":"aa7e07b6-7472-4c3b-94d5-2197201ee283","kategori_kelas_id":7,"versi":"3.0.0","created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":null},"section":[{"id":210,"uuid":"46d9c06f-b9b7-4071-b2cc-f472b89809a0","materi_id":25,"nama":"Pendahuluan","permalink":"pendahuluan","urutan":1,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":null,"posting":[{"id":755,"uuid":"03910537-0169-4033-b1a4-e41697592fe7","author_user_id":4336,"materi_section_id":210,"judul":"Persiapan Perangkat","permalink":"persiapan-perangkat","konten":"<div class=\"entry-content\">\r\n<p>Selamat datang peserta Bootcamp Sanbercode kelas ReactJS &ndash; Web Frontend Development. Sebelum membahas proses membuat aplikasi menggunakan framework ReactJS, terlebih dahulu kita akan membahas berbagai perangkat yang perlu dipersiapkan.<\/p>\r\n<h2 id=\"perangkat-yang-diperlukan\"><strong>Perangkat yang Diperlukan<\/strong><\/h2>\r\n<p>Untuk mengikuti bootcamp ReactJS ini, diperlukan perangkat utama yaitu&nbsp;<strong>PC\/Laptop<\/strong>&nbsp;yang terhubung dengan&nbsp;<strong>internet<\/strong>. Spesifikasi PC\/Laptop minimal memiliki&nbsp;<strong>RAM 2GB<\/strong>.<\/p>\r\n<h2 id=\"perangkat-lunak-dan-teknologi-yang-digunakan\"><strong>Perangkat Lunak dan Teknologi yang Digunakan<\/strong><\/h2>\r\n<h3 id=\"1-terminal-atau-console\">1. Terminal atau Console<\/h3>\r\n<p>Pada Bootcamp kali ini, diperlukan sebuah terminal untuk mengeksekusi berbagai perintah dasar yang berkaitan dengan Git, Node. Kita bisa menggunakan terminal bawaan dari Sistem Operasi yang digunakan seperti Command Prompt\/Windows PowerShell pada OS Windows dan Terminal pada OS Linux maupun OSX. Dan ketika melakukan proses instalasi Git juga terdapat Git Bash yang memiliki fungsi yang serupa. Selain itu, peserta juga bisa menggunakan&nbsp;<a href=\"https:\/\/cmder.net\/\">cmder<\/a>&nbsp;(terutama yang menggunakan OS Windows) karena cmder memiliki banyak fitur yang tidak dimiliki command prompt atau terminal bawaan. Proses instalasi bisa dilakukan menggunakan konfigurasi default\/recommended<\/p>\r\n<h3 id=\"2-git\">2. Git<\/h3>\r\n<p><a href=\"https:\/\/git-scm.com\/\">Git&nbsp;<\/a>merupakan version control yang banyak digunakan oleh para programmer atau software developer. Untuk dapat menggunakannya, download dan install&nbsp;<a href=\"https:\/\/git-scm.com\/\">Git&nbsp;<\/a>sesuai dengan platform OS yang bersangkutan. Dan jalankan perintah instalasi dengan konfigurasi default\/recommended.<\/p>\r\n<h3 id=\"3-visual-studio-code\">3. Visual Studio Code<\/h3>\r\n<p><a href=\"https:\/\/code.visualstudio.com\/\">Visual Studio Code<\/a>&nbsp;adalah salah satu IDE (Integrated Development Environment) yang direkomendasikan untuk digunakan selama bootcamp ini. Salah satu kelebihannya adalah kemudahan pengoperasian dan user inteface yang lebih mudah dipahami oleh orang yang awam dalam pemrograman. Selain itu juga terdapat banyak extension atau plugin yang sangat membantu dalam menuliskan kode selama membangun suatu program\/aplikasi.<\/p>\r\n<p>IDE lainnya yang juga dapat digunakan adalah&nbsp;<a href=\"https:\/\/www.sublimetext.com\/\">Sublime Text<\/a>&nbsp;atau&nbsp;<a href=\"https:\/\/atom.io\/\">Atom<\/a>. Untuk kemudahan proses pembelajaran kami tidak merekomendasikan Notepad atau Notepad++<\/p>\r\n<h3 id=\"4-node-js\">4. Node js<\/h3>\r\n<p>Node js (<a href=\"https:\/\/nodejs.org\/en\/download\/\">https:\/\/nodejs.org\/en\/download\/<\/a>) adalah JavaScript run-time, yang menjadikan program JavaScript bisa berjalan, baik di web browser, node maupun di environment yang kompatibel lainnya. Selain menjadi eksekutor, pada pengembangan aplikasi menggunakan ReactJS ini, juga terdapat npm (node package manager) yang akan banyak digunakan dalam mengelola dependencies atau fitur-fitur tambahan yang ingin ditambahkan pada aplikasi ReactJS, seperti misalnya React Router, dan berbagai macam package\/library lainnya.<\/p>\r\n<p>Silahkan download dan install&nbsp;<a href=\"https:\/\/nodejs.org\/en\/download\/\">node js<\/a>&nbsp;di local\/komputer Anda sesuai dengan OS ter-install. Disarankan untuk mendownload node js versi LTS.<\/p>\r\n<\/div>\r\n<p>berikut ini video tutorial installasi nodejs: https:\/\/youtu.be\/B2S5WL5bKNo<\/p>\r\n<p><\/p>","waktu_publish":"2021-04-25 16:30:00","status_publish":"publish","urutan":1,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-25 15:22:51","waktu_publish_formatted":" Minggu, 25 April 2021. 16:30:00 WIB."},{"id":756,"uuid":"d1b57877-459b-4e22-8c05-72011a8d626b","author_user_id":4336,"materi_section_id":210,"judul":"Teknis Pengumpulan Tugas","permalink":"teknis-pengumpulan-tugas","konten":"<p>setiap harinya Anda diminta untuk menyelesaikan tugas dan\/atau quiz yang diberikan. Disarankan Anda untuk membuat satu folder khusus dalam local PC\/Laptop untuk menyimpan file-file tugas yang terhubung dengan repository project pada tugas Git. Berikut tahapan atau tata cara mengumpulkan tugas<\/p>\r\n<p>Dalam hal ini tahapan yang bisa digunakan adalah sebagai berikut:<\/p>\r\n<ul>\r\n<li>Buat folder tugas (misal &ldquo;tugas-5&rdquo;)<\/li>\r\n<li>Setelah masuk ke dalam folder, buat file tugas (misal &ldquo;tugas5.js&rdquo;)<\/li>\r\n<li>Jika di dalam tugas terdapat beberapa soal, Anda bisa gunakan fitur toggle comment pada visual studio code untuk pemisah antar soal (dengan menekan shortcut Ctrl + \/ pada Windows atau \u2318\/ pada Mac). contoh:\r\n<pre class=\"wp-block-preformatted\">\/\/ Soal 1 <br \/>{ jawaban soal 1 } <br \/>\/\/ Soal 2 <br \/>{ jawaban soal 2 } <br \/>\/\/ dst.<\/pre>\r\n<\/li>\r\n<li>Jika tugas adalah satu folder project maka masukan seluruh isi di dalam folder project kecuali folder node-modules jika tidak di gitignore (defaultnya di gitignore)<\/li>\r\n<li>Jika tugas telah selesai, upload file tugas ke Gitlab (Anda bisa menggunakan command di bawah ini).\r\n<pre class=\"wp-block-preformatted\">$ git add .   <br \/>$ git commit -m \"update tugas 5\"    <br \/>$ git push <\/pre>\r\n<\/li>\r\n<li>Jika proses git push telah berhasil, periksa halaman Gitlab Anda dan masuk ke menu &ldquo;<strong>Repository<\/strong>&rdquo; =&gt; &ldquo;<strong>Commits<\/strong>&rdquo; (yang terdapat di sidebar) kemudian copy link commit tugas Anda.<\/li>\r\n<\/ul>\r\n<figure class=\"wp-block-image size-large\" style=\"text-align: center;\"><img class=\"wp-image-6128\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-24-1024x367.png\" sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-24-1024x367.png 1024w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-24-300x107.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-24-768x275.png 768w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-24.png 1346w\" alt=\"\" width=\"1024\" height=\"367\" \/>\r\n<figcaption>Contoh Copy Link Commit<\/figcaption>\r\n<\/figure>\r\n<p>Setelah itu,&nbsp;<em>login&nbsp;<\/em>ke sanbercode.com kemudian akses kelas yang diikuti, pilih tab &lsquo;Kelola Tugas&rsquo;.<\/p>\r\n<figure class=\"wp-block-image\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/1-1024x232.png\" alt=\"Gambar ini memiliki atribut alt yang kosong; nama filenya adalah 1-1024x232.png\" \/><\/figure>\r\n<p>Setelah memilih tugas yang akan di input pada menu&nbsp;<em>drop-down<\/em>, klik tombol &lsquo;Input Tugas&rsquo;. Kemudian masukkan link commit tadi.<\/p>\r\n<figure class=\"wp-block-image\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/Screen-Shot-2020-06-14-at-16.05.59-1024x325.png\" alt=\"\" \/><\/figure>\r\n<p>Tunggu hingga upload berhasil dan muncul&nbsp;<em>pop up <\/em>pemberitahuan bahwa tugas berhasil diinput.<\/p>\r\n<figure class=\"wp-block-image\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/Screenshot-from-2020-06-14-20-52-10.png\" alt=\"Gambar ini memiliki atribut alt yang kosong; nama filenya adalah Screenshot-from-2020-06-14-20-52-10.png\" \/><\/figure>\r\n<h3 id=\"tambahan\"><strong>Tambahan<\/strong><\/h3>\r\n<p>Tugas bisa di kumpulkan menggunakan gitlab ataupun github<\/p>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-04-25 16:30:00","status_publish":"publish","urutan":2,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-25 15:23:07","waktu_publish_formatted":" Minggu, 25 April 2021. 16:30:00 WIB."}]},{"id":211,"uuid":"5ce1bef9-dcc2-494c-a9ab-2bb1209c3228","materi_id":25,"nama":"Pekan 1 \u2013 Materi","permalink":"pekan-1-materi","urutan":2,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":null,"posting":[{"id":757,"uuid":"33f5d40e-0d6f-4a41-8bd9-26da40654a7e","author_user_id":4336,"materi_section_id":211,"judul":"Hari Ke-1 \u2013 Command Line Interface","permalink":"hari-ke-1-command-line-interface","konten":"<h2 id=\"apa-itu-command-line-interface\"><strong>Apa itu&nbsp;<em>command line Interface<\/em>?&nbsp;<\/strong><\/h2>\r\n<p><em>Command line<\/em>&nbsp;<em>Interface<\/em>&nbsp;(CLI) atau yang biasa kita kenal cmd atau&nbsp;<em>command prompt<\/em>&nbsp;atau&nbsp;<em>terminal&nbsp;<\/em>adalah&nbsp;<em>software&nbsp;<\/em>atau antar muka untuk memberikan perintah-perintah dasar pada komputer kita. Biasanya kita mengoperasikan komputer seperti&nbsp;<em>browsing media<\/em>, mencari&nbsp;<em>file<\/em>, membuat&nbsp;<em>file&nbsp;<\/em>atau&nbsp;<em>folder<\/em>, dan lain-lain dengan GUI (<em>Graphical User Interface<\/em>) yang sudah disediakan pengembang Sistem Operasi seperti&nbsp;<em>Windows<\/em>,&nbsp;<em>Linux<\/em>, atau OSX. Namun pada dasarnya kita juga bisa melakukan operasi-operasi tersebut dalam suatu perintah yang kita kirimkan melalui cmd\/<em>terminal<\/em>. Berikut ini beberapa contohnya:<\/p>\r\n<h4><strong>Menuju&nbsp;<em>folder<\/em>\/direktori tertentu<\/strong><\/h4>\r\n<p>Untuk menuju posisi&nbsp;<em>folder&nbsp;<\/em>atau direktori tertentu bisa gunakan perintah&nbsp;<code>cd<\/code>&nbsp;atau kepanjangan dari&nbsp;<em>change directory<\/em><\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ Menuju Desktop\r\n$ cd Desktop\r\n\/\/ Menuju ke direktori <em>parent <\/em>(sebelumnya)\r\n$ cd ..<\/pre>\r\n<h4><strong>Mengetahui alamat dari direktori yang sedang dibuka<\/strong><\/h4>\r\n<p>Terkadang kita butuh tahu sedang dimana posisi terminal kita berjalan. Perintah untuk fungsi ini yaitu&nbsp;<code>pwd<\/code>&nbsp;atau kependekan dari path of working directory<\/p>\r\n<pre class=\"wp-block-preformatted\">$ pwd\r\n\/home\/users\r\n\/\/ sedang berada di folder home\/users<\/pre>\r\n<h4><strong>Mengetahui daftar isi dari sebuah direktori\/<em>folder<\/em><\/strong><\/h4>\r\n<p>Kamu bisa gunakan perintah&nbsp;<code>ls<\/code>&nbsp;atau&nbsp;<code>dir<\/code>&nbsp;. contohnya sebagai berikut<\/p>\r\n<pre class=\"wp-block-preformatted\">$ ls \r\nDocument Desktop Image index.html\r\n$ dir\r\nDocument Desktop Image index.html <\/pre>\r\n<h4><strong>Membuat&nbsp;<em>folder<\/em>&nbsp;baru<\/strong><\/h4>\r\n<p>Perintahnya adalah&nbsp;<code>mkdir<\/code>&nbsp;atau singkatan dari&nbsp;<em>make directory<\/em>. contohnya sebagai berikut<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ membuat folder baru bernama new-folder\r\n$ mkdir new-folder\r\n\/\/ mengecek apakah sudah berhasil buat folder baru\r\n$ ls\r\nnew-folder ... ...  <\/pre>\r\n<h4><strong>Membuat&nbsp;<em>file&nbsp;<\/em>baru<\/strong><\/h4>\r\n<p>Gunakan perintah&nbsp;<code>touch<\/code>&nbsp;untuk membuat file baru<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ membuat <em>file <\/em>index.html\r\n$ touch index.html\r\n\/\/ mengecek apakah sudah berhasil buat <em>file <\/em>baru\r\n$ ls \r\nindex.html ... ... <\/pre>\r\n<h2 id=\"software-terminal-command-line-yang-direkomendasikan\"><strong><em>Software terminal&nbsp;<\/em>\/&nbsp;<em>command line<\/em>&nbsp;yang direkomendasikan&nbsp;<\/strong><\/h2>\r\n<p>Untuk OS Windows,&nbsp;<em>terminal&nbsp;<\/em>bawaannya adalah&nbsp;<em>command prompt<\/em>&nbsp;atau cmd yang relatif kurang nyaman untuk dipakai dalam tahap&nbsp;<em>development<\/em>. Oleh karena itu direkomendasikan untuk&nbsp;<em>install terminal<\/em>&nbsp;di bawah ini agar lebih optimal dalam mengerjakan&nbsp;<em>project<\/em>.<\/p>\r\n<ul>\r\n<li>Cmder,&nbsp;<em>link download<\/em>:&nbsp;<a href=\"https:\/\/cmder.net\/\" target=\"_blank\" rel=\"noreferrer noopener\">cmder<\/a><\/li>\r\n<li>Git bash, Git bash biasanya ter-<em>install<\/em>&nbsp;jika kita meng-<em>install<\/em>&nbsp;git di pc\/laptop kita.<\/li>\r\n<\/ul>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-04-26 08:00:00","status_publish":"publish","urutan":1,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:31:40","waktu_publish_formatted":" Senin, 26 April 2021. 08:00:00 WIB."},{"id":758,"uuid":"cee78561-26ef-4fa2-8092-a59ac1256e47","author_user_id":4336,"materi_section_id":211,"judul":"Hari Ke-1 \u2013 Git","permalink":"hari-ke-1-git","konten":"<h2 id=\"apa-itu-git\"><strong>Apa itu Git ?<\/strong><\/h2>\r\n<p>Git adalah sebuah&nbsp;<em>Version Control System<\/em>&nbsp;yaitu sistem yang mengelola perubahan dari sebuah dokumen, program komputer, website dan kumpulan informasi lain.<\/p>\r\n<p>Selain itu, Git memungkinkan para pengembang perangkat lunak dari berbagai belahan dunia mengerjakan banyak projek bersama-sama tanpa mengharuskan bertatap muka.<\/p>\r\n<p>Git sendiri disimpan dalam sebuah folder atau directory project yang biasa di sebut repository<\/p>\r\n<h2 id=\"installasi-git\"><strong>Installasi Git<\/strong><\/h2>\r\n<h3 id=\"installasi-di-windows-dan-mac\"><code>Installasi di Windows dan Mac<\/code><\/h3>\r\n<p>Untuk menginstall git ke dalam windows dan mac, download terlebih dahulu file instalasi nya dari halaman&nbsp;<a href=\"https:\/\/git-scm.com\/download\">download git<\/a>.<\/p>\r\n<figure class=\"wp-block-image size-large\" style=\"text-align: center;\"><img class=\"wp-image-4753\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-36-1024x767.png\" sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-36-1024x767.png 1024w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-36-300x225.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-36-768x575.png 768w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-36.png 1027w\" alt=\"\" width=\"1024\" height=\"767\" \/>\r\n<figcaption>halaman download git dari<a href=\"https:\/\/git-scm.com\/download\">&nbsp;git scm<\/a><\/figcaption>\r\n<\/figure>\r\n<p>jika sudah terdownload, klik file instalasi lalu ikuti instruksi instalasi (klik next saja sampai selesai).<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-4754\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-37.png\" sizes=\"(max-width: 524px) 100vw, 524px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-37.png 524w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-37-300x234.png 300w\" alt=\"\" width=\"524\" height=\"409\" \/>\r\n<figcaption>instalasi git, klik next sampai instalasi selesai<\/figcaption>\r\n<\/figure>\r\n<p>setelah instalasi selesai, kita dapat mengecek apakah Git sudah terinstall dengan cara membuka cmd atau command prompt lalu ketikkan perintah <code>git --version<\/code>.<\/p>\r\n<figure class=\"wp-block-image size-large\" style=\"text-align: center;\"><img class=\"wp-image-6305\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-25.png\" sizes=\"(max-width: 977px) 100vw, 977px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-25.png 977w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-25-300x157.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-25-768x401.png 768w\" alt=\"\" width=\"977\" height=\"510\" \/>\r\n<figcaption>memastikan git sudah terpasang dengan mengecek versi git yang sudah terinstall<\/figcaption>\r\n<\/figure>\r\n<h3 id=\"installasi-di-ubuntu\"><code>Installasi di Ubuntu<\/code><\/h3>\r\n<p>Untuk menginstall git ke dalam ubuntu dalam hal ini ubuntu versi 18.04 cukup masuk terminal lalu jalankan perintah<\/p>\r\n<pre class=\"wp-block-code\"><code>$ sudo apt update<\/code><\/pre>\r\n<p>lalu jalankan perintah<\/p>\r\n<pre class=\"wp-block-code\"><code>$ sudo apt install git<\/code><\/pre>\r\n<p>lalu anda bisa mengecek git sudah terinstall dengan mengetikkan perintah&nbsp;<code>git --version<\/code>&nbsp;di terminal<\/p>\r\n<figure class=\"wp-block-image size-large\" style=\"text-align: center;\"><img class=\"wp-image-6635\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-34.png\" sizes=\"(max-width: 951px) 100vw, 951px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-34.png 951w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-34-300x73.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-34-768x186.png 768w\" alt=\"\" width=\"951\" height=\"230\" \/>\r\n<figcaption>memastikan git sudah terpasang dengan mengecek versi git yang sudah terinstall<\/figcaption>\r\n<\/figure>\r\n<h2 id=\"setup-git\"><strong>Setup Git<\/strong><\/h2>\r\n<p>setelah menginstall git, hal yang di lakukan selanjutnya adalah setup git config email dan username seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>git config --global user.name \"username anda\"\r\ngit config --global user.email \"email anda\"<\/code><\/pre>\r\n<p>anda dapat melihat hasil config ini dengan perintah<\/p>\r\n<pre class=\"wp-block-code\"><code>git config -l<\/code><\/pre>\r\n<h2 id=\"perintah-dasar-git\"><strong>Perintah Dasar Git<\/strong><\/h2>\r\n<h3 id=\"git-init\"><code>git init<\/code><\/h3>\r\n<p><code>git init<\/code>&nbsp;adalah perintah untuk inisialisasi atau memasangkan git pada sebuah repository yang sedang terbuka di command prompt atau terminal.<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-6306\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-26.png\" sizes=\"(max-width: 662px) 100vw, 662px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-26.png 662w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-26-300x53.png 300w\" alt=\"\" width=\"662\" height=\"116\" \/><\/figure>\r\n<p>pada contoh di atas, setelah memberikan perintah git init akan muncul keterangan &ldquo;Initialized empty Git repository in . . . &rdquo; yang berarti folder git-demo yang sedang dibuka di cmd sudah dapat menggunakan Git di dalamnya.<\/p>\r\n<h3 id=\"git-add\"><code>git add&nbsp;<\/code><\/h3>\r\n<p><code>git add<\/code>&nbsp;yaitu perintah git untuk menambahkan perubahan-perubahan pada direktori project sebelum menyimpan perubahan tersebut. Misalkan di repository project kita terdapat file index.html yang ingin kita simpan perubahannya.<\/p>\r\n<pre class=\"wp-block-code\"><code>$ git add index.html<\/code><\/pre>\r\n<h3 id=\"git-commit\"><code>git commit<\/code>&nbsp;<\/h3>\r\n<p><code>git commit<\/code>yaitu perintah dari git untuk menyimpan perubahan yang ada di repository dan perintah ini biasanya disertakan dengan&nbsp;<code>-m \"[keterangan_perubahan_yang_dilakukan]\"&nbsp;<\/code>untuk menuliskan perubahan yang di lakukan<\/p>\r\n<pre class=\"wp-block-code\"><code>git commit -m \"menambahkan index.html\"<\/code><\/pre>\r\n<p>&nbsp;<\/p>\r\n<h3 id=\"git-status\"><code>git status<\/code><\/h3>\r\n<p>git status adalah perintah dalam git untuk memeriksa status repository, apakah ada file baru, perubahan pada file atau file sudah di add, atau apakah perubahan sudah di commit atau belum.<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-6612\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-29.png\" sizes=\"(max-width: 760px) 100vw, 760px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-29.png 760w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-29-300x102.png 300w\" alt=\"\" width=\"760\" height=\"259\" \/>\r\n<figcaption>contoh tampilan ketika menggunakan git status<\/figcaption>\r\n<\/figure>\r\n<h3 id=\"git-push\"><code>git push<\/code><\/h3>\r\n<p>git push adalah perintah dalam git untuk mengirimkan perubahan perubahan file pada repository<\/p>\r\n<h3 id=\"git-pull\"><code>git pull<\/code><\/h3>\r\n<p>git pull adalah perintah dalam git untuk mengabil perubahan terakhir dari repository di git<\/p>\r\n<h2 id=\"tutorial-video\"><strong>Tutorial Video&nbsp;<\/strong><\/h2>\r\n<p>Untuk selanjutnya materi dapat dicoba melalui video kelas di link berikut:&nbsp;<a href=\"https:\/\/www.youtube.com\/watch?v=lTMZxWMjXQU&amp;list=PLFIM0718LjIVknj6sgsSceMqlq242-jNf\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"link video (opens in a new tab)\">link video<\/a>&nbsp;(Web Programming UNPAS &ndash; GIT &amp; GITHUB )<\/p>\r\n<p>&nbsp;<\/p>\r\n<p><strong>referensi:&nbsp;<\/strong><\/p>\r\n<ul>\r\n<li><a href=\"https:\/\/training.github.com\/downloads\/id\/github-git-cheat-sheet\/\">https:\/\/training.github.com\/downloads\/id\/github-git-cheat-sheet\/<\/a><\/li>\r\n<\/ul>\r\n<p>&nbsp;<\/p>\r\n<p><\/p>","waktu_publish":"2021-04-26 08:00:00","status_publish":"publish","urutan":2,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:31:24","waktu_publish_formatted":" Senin, 26 April 2021. 08:00:00 WIB."},{"id":759,"uuid":"8004859f-156f-4390-9f8d-4e93448302d5","author_user_id":4336,"materi_section_id":211,"judul":"Hari Ke-2 \u2013 HTML","permalink":"hari-ke-2-html","konten":"<h3 id=\"apa-itu-html\"><strong>Apa itu HTML ?<\/strong><\/h3>\r\n<p>HTML merupakan singkatan dari Hyper Text Markup Language. HTML adalah sebuah bahasa standar untuk pembuatan halaman web. Dengan adanya HTML, kita dapat membedakan struktur yang tersusun dari sebuah halaman melalui tag atau elemen-elemen penyusunnya.<\/p>\r\n<p>Elemen atau tag pada HTML dikenali oleh browser seperti google chrome, firefox atau Ms Edge, dll. Browser tersebut mengidentifikasi setiap elemen penyusun HTML dan ditampilkan sesuai karakteristik elemen tersebut. Contohnya sebuah elemen paragraph akan ditampilkan sebagai tulisan panjang, atau sebuah elemen pranala\/link akan dicetak dengan warna biru dan ketika mouse mendekat kursornya berubah menjadi telunjuk, dsb.<\/p>\r\n<p>Contoh sebuah halaman HTML sederhana:<\/p>\r\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n&lt;title&gt;Page Title&lt;\/title&gt;\r\n&lt;\/head&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;My First Heading&lt;\/h1&gt;\r\n&lt;p&gt;My first paragraph.&lt;\/p&gt;\r\n\r\n&lt;\/body&gt;\r\n&lt;\/html&gt;<\/code><\/pre>\r\n<p>Dari contoh di atas kita dapat mengidentifikasi elemen-elemen nya seperti berikut<\/p>\r\n<ul>\r\n<li>element&nbsp;<code>&lt;!DOCTYPE html<\/code>&gt; mengartikan bahwa dokumen ditulis dengan versi HTML5<\/li>\r\n<li>elemen&nbsp;<code>&lt;html&gt;<\/code>&nbsp;adalah elemen induk atau elemen utama yang sering disebut juga root element dari sebuah halaman HTML.<\/li>\r\n<li>elemen&nbsp;<code>&lt;head&gt;<\/code>&nbsp;berisi informasi tentang halaman HTML yang sedang dibuat<\/li>\r\n<li>elemen&nbsp;<code>&lt;title<\/code>&gt; adalah judul dari halaman HTML yang akan tampil di tab browser.<\/li>\r\n<\/ul>\r\n<h3 id=\"elemen-pada-html\"><strong>Elemen pada HTML<\/strong>&nbsp;<\/h3>\r\n<p>Elemen atau sering disebut dengan tag pada HTML adalah penyusun dari sebuah halaman web yang dapat dikenali oleh browser dan ditampilkan oleh browser sesuai karakteristik masing-masing.<\/p>\r\n<p>Sebuah elemen HTML terdiri dari tag pembuka(start\/open tag), atribut (attribute), isi (content), dan tag penutup(close tag).<\/p>\r\n<figure class=\"wp-block-image size-large\"><img src=\"data:image\/png;base64,iVBORw0KGgoAAAANSUhEUgAAAa4AAAB1CAMAAAAhpfXwAAABTVBMVEX\/\/\/8AAAD5+fnY2NhbW1upqan8\/Pzq6upRUVGZmZmysrI7OzvrAIf1dMDyUq\/29vbe3t7w8PDp6enP797KysrsAItqamrrAILj4+O4uLj\/+fz8z+qTk5PrAIahoaEApUxmZmZ5eXnExMSGhoYqKirzfrbR0NAeHh5YWFj94PL+7fg\/Pz9+fn7+9frc8ub1\/Pn3nM41NTXtAJNmyJNKsm\/0arwAoT\/14d4UFBTtJpG\/59IjIyMtLS382u3o9+\/57uzxWan6weJevYL0fsDwRaiV1a8ArVrszsq35s33stLhs63EWkrvHp+VzqbxZ631j8bVkol\/x5fLcmT6st71ocgtsWe1JQC6Rzmo1ra8QSzuEJ3vR57mv7qE0qfQgnf1nMTbn5bGZ1rycrL0jL63Mhs4unX2iMlFsWtRxYnPe27WjYGO2bHxPKx20KCvCQC9eFS9AAAW\/UlEQVR4nO1d\/VvaSNeeBBICKkkgxAQiJMFGvkGsKFhQEClVKrVItbX2tbZYt1uf\/\/\/H90wCCtZWu4VVu7mvS5zMx5nJ3HPOnJkJASEbNmzYuBk0y2Mgkr\/vlti4A1xRVdREEemp+26JjTuAY5xhiqJQOPnTbLTD1r6HAI5xm\/\/DDHDCswjxJOmCTwgh0kVCCLHAFMt47redNkxwjKYbgoTp4qmUwiEqHNZkOQohV1hz+1DYo0QFFF4QdVu\/7h9cLAlzl4zpopyelMKKU2GRSFGLUdotymIYORkqtojcC6ps03X\/AO0SDANrFx9LKs4kJ0aRTriQqklTMTfjdKkKkgnELlL33VIbyJy7aPwf6HJGdd2gxTAtEIhUNW5KwdfOMIJr3qbrQYBjUobD4QC6aAV8eY4U3X26eNAzUkJ9uubDiLzvttoAuoi1+flV5F5EnDg1leKdikmXU0UCMzUVZcFz1MEYOgnRcd9ttQHOuwvgM7113ufjsQtP+iDMQ9LgGnv2Pt7WLhs2bPzHIHP33QIbd4eLIOj7boONO4LkFhiG4f5swsg\/AYhmfVyYSEpScoHifCxL33eLxoHrA08yBJn6EyBTikgQKoe3EolVUQl77rtF44BHEAzfJVk+j7hK\/DlgFHMr16cw992SMWJN9LAWWwKMx6RTdP4BiDk1N2UMhqEBqha77yaNATExpU4RRFQy2UoSUVlwcI4\/Ady1MxLpvhs0FnA+TpBThAp88VNJ+9juMcClLzhplFqU7rshNu4GbiGKPPY29aOB4bHPgB4TbLJs2LDxXwEpapp49UikYjuCDxosYQj61fHPqnCPbbFxK9h5RNOI5H0+ErE+ft6m60GDJTyUhxOSyXmKdCfFBZuuBw2WoMIUJ6gOSjTW2IkaQ58hcPbS4PfAPsOfgubwaPoUjSaoXZwYS6q28v4eWEL2UIIsOjyixFAyMbn+VFVBpwQk6exwrEt39UOUvZV8O2g3QHboLodO6lGK8t1e5B+CCOPqkC5iWnwDbozYYIAQ+CSKvKzfJu9WsLdn+edQpxRQLI6ZVw0+LKpuWOS5o1FxIeYxmYkSTgUJouiWEKdoUSU6ybbYuBU+jZjXfKzCeFw+2dBXHYhYUBzUotvyPwwibCCHLjs9SNGEKe2hHgUIYcXzn9B8ntMXokhXsb2TBEJGCyKJBObSGOIAqTtTpOZBzoeqXMozUVyU769+Wvr3Hmml3TEkA12GyKSArjUFP1yg9xOBLtbNiEmNV6Y04oEql0IIPO+6NmmE3aPXbHhyXxajZQ\/4ZwLWbwMJE5y9UmDzkiKSnRxSGJ+02qdrSu+f0xA6khZ1KabxqWj4gW5dckl3f+Vo9pjE09g\/EkX4YA1oM8fSAo1IcXK2QV5dVTiNYRysU13TJtdNvkVigVjkkLBARD2LxBrhQQTQ5UgSmuUNrhLzPvwwmchG4ZOZqNvzT+EhrA6iPcTqmo6U5AJBIBWaS0kx+EBacpV4hpwEsTope0lS2MFGUYHSUHKiRtmlC\/iBU5ev\/54EC\/zAdSfB\/tHYMAvQDMeqNsmm\/FMM6OLWDETFJOUZ7wKjDtpFKikkqJK2iCRCoCeoXSTlRpI2TwhGMkxMrJZfAeeMeqip8H034yYI1hY47VZh6mAERXUh0CNRRZKTWFiY4jRwngiBVSf3ihySUllPVFIFWdSMh2GBuKjqvEfn62cQGYlGLC8zPJKThuJ0IcKky6eZ7oamspguZwpN7BsTBqMYmipyMqMyzKQq+VNgMIzHocg8kxK0KKvETLpSSYdDiFEGxVt0kVrMmLi7rSic69+3hqZD9YjARUWwQsihiYqEPG4e4QtR02lZFBWeCpNI5HDExPeyeSWl\/esvlwAXS31cfP2XQXuSqioaf\/ZX4yYAXnbdnmnc8MnKM1Uykoz7UT+H\/+9vwNAUEf2xVyjJ4XDYPWaEFUVcIGBdThtOYlFTFGXcNbjD4X9jGPCMcXumsYKlkmoy+oNb48POZ8Ta2L+RN4+3LmRzjSxRi+OW3sfU5dfUJgZenWf+Vf0iZW1Nk8Jravgm79OIEcQCo8aYMcOpuR1Sf9IiOSGsJsddQ0xlVolJ7qthyE5Cmkp6Jv4MCudR3GCBlGhKfUZEXYj1rBKMGI3iuDB1OfsbkGj4XBMAPzLuWX78lfAun+4kmCGrQY8TLCe4nWuEgbjFVaeiO\/ixih8hy9CS88Q8WLhnYDKS5uMTNKf1Tcjq2tpUf1uBXVh83E8vscKiat6AriWTyakxIpl8Bh3IYHPug55bezZe8QyTFPvrKpJaw6wwcAOgUJenJqzkVpNT+K5wqop9RXHtYexL\/Qa4ebhrNjaRuTGpW2OZFMYu33QWknh64qPEmttHk9+r3aUq8p4ksQBWxP1Ajwl\/BboHOeDWVUX2jBejU73kocYpXNYpbRUfypBhQrmDzsir8xPqv38dBjH\/QLeMb4GRJCiOuNtek29hgocY5RBC1cRERCeqaRQKDUXwxOPdulbnPe7bc5kQJvjLBvV3KDSbm4jos7kyyreGIijmEe9yiQ\/h5yXixTN0FpiMdu22gomRkcA\/5i0u9P1imFxZ\/02ZwXi5XE7fPX8nH0ffNn6z0mEkyvE++YmjHMqNjIRspo9KJVO5UrRK5SfyMtkxNu7ugKb+rFUWnu+8\/3mG9dvoTGzW6\/VfsG2by0E0Xb17\/lvRqXv71VfrceT1QoBc71OTqZ33zs97T5e2LnrHl71RuTj+cc\/4zw\/H2Li7o9k737o5ZX1wN2j95K+V4RR6fdRxJN9\/eH5LNekX\/7c\/vXznVgW9VVTN3zn7HRD6lJ+xQu2ZNMpjT2P967Z1W\/7I3mGvcbjXOC497WUGJSoXF5mbJJkoPW2Os3V3hv9lYenGhJVXJwOVeb6zPZK0fnKyMpJz59Xgmg5+Jyge7xvBYr+\/EgOzBCYyEUz049LD5ikxk0C5thlMW6XT8fhwulU6Hry6TgzSrQLx+JU8MyLY2rSSNqso7TVvY3vnr\/d4GZtp+NHSU5Q5b6KX3Qw90KlLY5gFA3Td9l0aw0rmelrmJkOZteKyleEhYMbRmcqlLFPccIFh22flKlwMZA1hffvj6\/f9zmBPPvbZCFr6tv7+4+tt8irnx\/eY2OevXm2ffPiwPWoXq082Nk4tr9miK7F\/urHbNvs292Rj90kuiIf+7sbpbhkF2zmM9osEEBFPdJ58yrVPT1+kLTFPwDjG258+VTufTs+CKHS6sbFp2kso\/iS3u9uB\/P\/XyZ2eVoPp3MbGbi6O4rlP7dyT0ydQXbrlzZ3ugg8PU2i6bDaIfP7BHGjZUhbTlfVX0MvG3l7tGLoju7f3csvsusrWUq22N2L7tiDR0q7mHqTtDRvN7MtabWlrmJQmSIISzWw\/O5Ss7O3tlUp7S1CTH0eVcD7\/y9oe1NVs7u1tNaGAH2W3arUayKps7WEJxyCVLpxvQf4RV5aG+7hSoJWdkwEZXy01o1deHXy10lf+OjhZMQuvfHjz+eDV688nI2wVW+2ZwJP0FV3lVvFsM78BYz+XX25vBjagU3frm+36bAdGvYWcpRnVeiBf36znXwTRxmw7561XUXymHii2vK25NPLObrY3IAqVN1pn9UC9NVP1momBzXRoutXezG8mEu1i4N3yTMCbALry9bON+vB6yxqV2+aoBLowXkYaS0sRmB6yS+fdrtmLYCO39kZNUPP8PLKHA6Xe+fFWo+AfSvMXelsXjeMhBSj1Co3zi14XaKoVjrew2MpFL\/Kle94rVNB54fi4h2vK1HrHvch59+9mrxvpds8jW9lSpLt13NjLVra6uF2Np1mgq9E7fvp0uMb1k52\/nl9ataCpXM9ff\/68c7IzIAMU7OMJZukyBuzgwcF6cP3VzvA81qqX04nqiHa9CKXLM3kY316YQdK5dhBVW5sJVF6GXAkLAxey\/G4jni7v1sso1AnGO\/ldFEwDh7l4HIrjqFwLRkIuX00nAvUEGNYXsxuhBJjNdK6MqptFMHufAp1EojMNhvDdUSj9onXdfXm+82ZlmK5CM5tt9BA2hYcWXXg6y16MTPB0xd8w6dpqHGZRqTaiXYcZ1FzqDvVnNlOoVbL+2tMMKpWylWZjCSt0L3IIjiiNSk3Mxkssq5TNNM4rlWzmuFDzV7AFxrIuoBnZl1BRpQnjiC58yWSbjaGZk95+M+xarB9gQujnOzsrwfXXB4OUlY9vnpu3e7A90MyDDzj+zdBEF5\/GE1Cf+f7cFZo5KhZhpYrKgeLRDFak9Gb+aGOmA4GNZRO5gc8N8w1C+0Br\/GzjqBjYwMXrG9YsFZzBUbtx1AanH+W\/mbID+1bJzjJUUuxYhaHqFmgXVF\/Nv7jG1scDy6wP6GqAwel2zXDJouuw0X26dHhtuqhYdFVq3S9Lx\/6RpGbtS7fRHfZEsjDfYDl+VPm71u1GsKb6ezXLYGaPIX\/EpAsiGuc4CkZBX9YSlgUXh6YL1O0BXUu4ZcPi11+9\/XDJF32yY85GKzt\/Qbe\/H5AB2ma5Iusnbz729engK75+c3IlqTw95LxbdIXyreXcZsCcPXLeb4FT3PnltjcfAGNosbXc6atXonWGuz4fSm8EvLlOfgOXr29aZH4LeNu5b0BXte49W7bWvaG+9uSK7zY7ufwlXfUBXaPatf7182Bg\/pguVDlc6lq27wp9uiDT8Xmjn8\/CVqN7DNo1StcxMumq1BrnW6Z2AV19RnoQZWpXs3v+d62ARWW3+hK3Go2L5kXjkq4vjZvowqr0dqAz629fmf+BLvZSd9ZPPn9cGSjVys4bi7mDz\/Cx\/XZojRacNXvY0haTrnS7GMIMmMYQp73LAQO4E73D+0IWEu92cd+\/K3eAS9AgU1j9zCSzOguKG6\/vJlCnFZgNWMMiVLTsrvcdvjDpCoTwHsk30zMcpYt+\/\/bt+8FN3EiXqTa1i6vwJSoDY4jtoKkSA\/QaJjWjdNVM0f5mBNNg0pXp01UqgJmt9ICuw26kUDBt7iVdNSzLtHyHuGSmcWF6hpd0XS4MQWd2rHH3vm\/+Vj5+BKvx9bNlAd9sDx9Kblsk7rx5vbL9v7+GffncXL2Ta4EKhDrVordaBV0ILFc79blcFdXnvKHOZqsD6tHKhTqWORtBogWZZwLtdPyoFaouzx2F4qF2caNTxYRNf+tUZ6aPOun9AQfxTjvfrpah\/pm5s2oun98so\/25Vq7TmgY38503lGi\/O7t0\/tHK26+XXmzzvFuCuSJTa2xl\/Y0GzBbN0hbM+tAfTwt\/+5u9L8O+XqZ52KiV\/Fm0FemVSluR46G0pcLfJdCK46H82QJWEqAi86VbKp0Xzv0Z\/1YXXENsYSPdZmkpUitlDwdKWmkuNcyaEZQpHYKGZdBhodtsdgswbUFpMJbHMOtBVY3LOlY+mkaQfPt1cP2\/r89P\/vcamYp24y7Gwc7B58+vR5POioEAuGOho0AAQoFllNiEf+DCtYLebxCTBx2penFS6\/sdwkSrBSnY+HXgf9FbzNdbWMwsNqCdvBkVeFEtTk9Pz70LpWemIXF6Fyd6QWC9DuF9nB\/U7GyuGKjPwIX3cv1GXy32S4VGI\/I3WKhII3LRhbC\/VIhAuADjt9aNRCKj1gdiIA+M+q0eThxWLpQ9h8TzbqR2xVe20IXc2N0HDYqAz9e9AE8vEingLM2GGdVolrCoQsOfXcI1R3D2bK0vqwITKIjwowtIeroFH0sVrNu9oYpN\/dl+uzKg6+AtkGHe5w+O+2Huer5yPTIYwsMdxUMmEmYQXDf4AxfQikgn0uVQ6DtxmK42ClndG8cZ4uWEKceUCFFgUROh+K63Ggp1ludgUGBY814IygXhD+auuBmFiyXKVoXfww+AsV6BfyiDP2i\/vx9nRox6GhUzDVbD2QoEr+99+GH9hvxD3iK4Gtl+LshurqMzfQFmVAZH+WvnJb+\/uRTJZE3plb4sSIS\/wx5oJBaFi9GZfrIfXcdAuUClPqyvfEfGCA6+\/jT512G5GrfAmvlQeu7GLUnL1bhfWK7GLSj1TFtYKdy4u3XY+\/GG2DBeXTnuf\/38VGh95e3r56N6F\/x+S+pnuJ49Xs3vlm89REk\/qe+HymBQyzeklZ\/k9ydzDHN3ZEqF2u0b+JW9XtPvL\/W+3LCvnM3sdQ9v34kfwvr7g48\/38d9v7Oz83Z04irv\/0oVaD8+ep3L14sbtytH\/NPRt1b+tHNT0nKxnu\/82qAZO2CK6S7d3tn+42631619b+CA8KVut3F96fdTmGT89BG19eeAUQWMB37lDORF\/hpdiWq1GrpDXwdD1RfVGw\/T0iEQcd\/aVSmVSjeRcB1Zf9NyFr9PyYCIX9Ou78m4A2ClGr89lwnw4dq\/Kt7GeBHczO\/uV289Rk7HQ\/u70+1fOG22MREk9t8F6hunTyy0n7Srl8at2n4ywOnuUSC\/\/x1b5Zumo99tUOe+beODRjC0mZ+dnZ6bxcjPBo5OremsunkUmL3EXH7zBpei3Bo7X8Gc9wYH0sYVYGW7n+uj7c3P1nOgRvvF2dbyZrsfvR+K32QIg+18brxeXaJ9737iI0BwgHQ6gc+r0vuBeiiRTl\/G\/6BcYjmwMUbjlWjXx83\/n4\/0\/jtvK3c3EhJnc4Fise79Ia7OxgDls+Wf5KwXi9M2W\/8Audm7O4Gh+hxg+mbMBfJz04EZi7ByHbL9KOf09Le5ucDyXVcVNoaQ+KWVayJ3NvNjeFuBOXNb8GxuuvjN++OMZ2cde6HwAJDIHQFf7bm6Tcd4cO2bmei772r+JhK7+ba9JTIusNaL766uBU4a73ssE8vTNlvjgsMp4h+OdiFkvbGN9Tj01NULxsfxMqvQ5hiE2DAhiykZ8ari8817eNaQJJ7UNd0gkQPREkuJEskLxqP+PvqfBJciUwrriImC\/izKSVNunTJ0VRE9iEF81KEwMke5o8Ij\/kbcHwWH06PEHLQW5tkpneaShhTVdc0hM4hAvNMha6zOpJypR\/8GgT8DpEf1UDEZgUFESQfiRFApXY\/yjiTQxcY4IYp0jdLtt6o9DPg0mWXdKT6VotCiInAqcgFdTkqLIkJwT3FCTBaiYVm3J68HAV4GM8fJvBCVkSfq4GVw5CX8jjYfCiuyzLvCHpdEuW3tehgwH0qED5onEcnT+OlF84VJLH7PEwkkmSHWZsuGDRs2bDw8kCRL4lkKpjEI0iSLv1Rg+4MPFWIsmWT5pFPzyUxsXlPnOZRajP0Bb2z7MyEq6JmBJC7l0UWfW6WjKWNVVpQ7lmavvYOV9yHfbarJPuqXB90zRBklDUmJMpSssG6NDUflRUXRby9owvMM+KJ5y+\/H1xpSrzTTd+M6QHioP6H3GKDKaErwqLpIyVFWEVl3yuV0GHc1hqoKfc9TCBnWz1FwAhp6gbSGORzVJRa\/r3XowsavweNAYcmnuMMG\/k1fmRRkJLvdd9QuzmmsItrjNBxK1PAZsu7SEaipzEocMnhpEYTLbut97YaEHA7eQwlIT7EG79N51yDJxq\/i+nMAdyymhNGijsJJ3UiJghHTZGERJZWwKnjcSBMci2GH7IyKXD+rKPOUzPB6iksZOuNwa9HYmG\/Dxs9AO6NUUkSSihBFIYkxkJEEY0i6w3IYpQSUZBGToqKmnRRSguriZU\/SIaSkqCE4dadCOe\/5Bv5b0DVdEBZYk64w4lTJpEsno9QlXVrKx5neI5kSFVoJ61NAFxd16DHDSXET\/\/0lG0PQPPCRpPhYCrpf0TFdi2hRFTVJZpQpARwR2SemFMv3oNYMFGVSi4au8SlRS3K6Fn0Ib0D970DCrp3koyWOZzmJl0jEcojjHD7EcxzHIp\/DhSQHZzmAPEci3gHRLKzNOIkjachzv+23YcOGDRsPB\/8Pvi+3ovNbCc8AAAAASUVORK5CYII=\" alt=\"\" \/><\/figure>\r\n<p>pada ilustrasi di atas merupakan sebuah elemen paragraph dibuka dengan tag pembuka&nbsp;<code>&lt;p&gt;<\/code>&nbsp;. Di dalam tag pembuka tersebut terdapat atribut&nbsp;<code>class<\/code>&nbsp;yang disematkan ke dalam tag. Isi atau content dari sebuah tag&nbsp;<em>paragraph&nbsp;<code>&lt;p&gt;<\/code>&nbsp;<\/em>akan ditampilkan sebagai paragraf. lalu terakhir sebuah tag ditutup dengan sebuah tag penutup.<\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>catatan<\/p>\r\n<p><cite>Tidak semua elemen HTML memiliki tag penutup seperti&nbsp;<code>&lt;input&gt; &lt;img&gt; &lt;meta&gt;<\/code>&nbsp;.<br \/><\/cite><\/p>\r\n<\/blockquote>\r\n<h4><strong>Elemen di dalam elemen (nested element)<\/strong><\/h4>\r\n<p>sebuah elemen HTML dapat terisi dengan elemen-elemen lain di dalamnya. Semua dokumen HTML yang kita lihat di halaman web terdiri dari kumpulan elemen bersarang atau elemen yang mengandung elemen lain di dalamnya.<\/p>\r\n<p>Contohnya halaman berikut:<\/p>\r\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;body&gt;\r\n\r\n&lt;h1&gt;My First Heading&lt;\/h1&gt;\r\n&lt;p&gt;My first paragraph.&lt;\/p&gt;\r\n\r\n&lt;\/body&gt;\r\n&lt;\/html&gt;<\/code><\/pre>\r\n<p>Pada contoh di atas elemen&nbsp;<code>&lt;html&gt;<\/code>&nbsp;adalah root element dan merupakan elemen utama di dokument HTML. elemen tersebut dibuka dengan tag pembuka&nbsp;<code>&lt;html&gt;&nbsp;<\/code>dan ditutup dengan&nbsp;<code>&lt;\/html&gt;<\/code>. Lalu di dalam elemen&nbsp;<code>&lt;html&gt;<\/code>&nbsp;terdapat elemen<code>&nbsp;&lt;body&gt;<\/code>&nbsp;. elemen&nbsp;<code>&lt;body&gt;&nbsp;<\/code>merupakan elemen yang akan ditampilkan ke halaman web yang diawali dengan tag pembuka&nbsp;<code>&lt;body&gt;<\/code>&nbsp;dan ditutup dengan sebuah tag penutup&nbsp;<code>&lt;\/body&gt;<\/code>&nbsp;, dan seterusnya sehingga terciptalah sebuah halaman web yang utuh.<\/p>\r\n<p>Untuk mulai berkenalan dengan elemen-elemen pada HTML terdapat video tutorial yang dapat diikuti seperti berikut:<\/p>\r\n<ul>\r\n<li>Belajar HTML dari Dasar oleh Sekolah Koding:&nbsp;<a href=\"https:\/\/www.youtube.com\/playlist?list=PLCZlgfAG0GXC9ojTmU95BRefbJoi4clY-\">https:\/\/www.youtube.com\/playlist?list=PLCZlgfAG0GXC9ojTmU95BRefbJoi4clY-<\/a><\/li>\r\n<li>Tutorial HTML Arkademy :&nbsp;<a href=\"https:\/\/www.youtube.com\/playlist?list=PLf61QUuMoXcPC1Yc2km8B5qwWJgQ_7NZr\">https:\/\/www.youtube.com\/playlist?list=PLf61QUuMoXcPC1Yc2km8B5qwWJgQ_7NZr<\/a><\/li>\r\n<\/ul>\r\n<blockquote class=\"wp-block-quote\">\r\n<p><strong>sumber<\/strong><\/p>\r\n<p><cite>tulisan ini disarikan dari halaman dokumentasi W3schools :&nbsp;<a href=\"https:\/\/www.w3schools.com\/html\/default.asp\">https:\/\/www.w3schools.com\/html\/default.asp<\/a><\/cite><\/p>\r\n<\/blockquote>\r\n<p>&nbsp;<\/p>\r\n<p><\/p>","waktu_publish":"2021-04-27 08:00:00","status_publish":"publish","urutan":3,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:31:03","waktu_publish_formatted":" Selasa, 27 April 2021. 08:00:00 WIB."},{"id":760,"uuid":"0ce33be4-906c-47a2-a1b1-cc9dcb653190","author_user_id":4336,"materi_section_id":211,"judul":"Hari Ke-2 \u2013 CSS","permalink":"hari-ke-2-css","konten":"<p class=\"has-text-align-left\">Cascading Style Sheet atau dikenal dengan CSS merupakan bahasa style sheet yang berguna untuk membantu menyajikan dokumen yang ditulis dengan HTML. CSS dipakai untuk mendesain halaman depan atau tampilan website (<em>front end<\/em>). Menggunakan CSS kita bisa mengatur warna , ukuran , posisi ,&nbsp;<em>background<\/em>, dan lain lain. Sehingga ada nilai estetika yang ditambahkan dalam tampilan suatu website.<\/p>\r\n<h3 id=\"selektor-properti-dan-value\"><strong>Selektor , Properti dan Value&nbsp;<\/strong><\/h3>\r\n<p>Pada CSS ada beberapa istilah biasa kita temukan diantara : selector , properti, dan value . Kita mempelajari terlabih dahulu pengertian dari ketiga istilah tersebut.<\/p>\r\n<p><strong>Selektor<\/strong>&nbsp;adalah metode pengelompokan syntax didalam CSS. Selector juga dapat diartikan sebagai aturan yang digunakan untuk memisahkan beberapa syntax dengan target yang berbeda.<\/p>\r\n<p><strong>Properti<\/strong>&nbsp;adalah suatu jenis style CSS yang berfungsi memberikan style pada selector yang telah ditentukan. Property pada CSS sangat banyak sekali. Banyak contoh properti css seperti :<code>&nbsp;background-color<\/code>,&nbsp;<code>color<\/code>,&nbsp;<code>font-family<\/code>,&nbsp;<code>font-size<\/code>,<code>&nbsp;margin<\/code>,&nbsp;<code>padding<\/code>&nbsp;dan lain lain.<\/p>\r\n<p><strong>Value<\/strong>&nbsp;adalah nilai dari property . Dan value harus bersesuaian dengan properti, misalnya properti&nbsp;<code>\"font-family\"<\/code>&nbsp;tidak bisa diisi<code>&nbsp;\"red\"<\/code>&nbsp;karena&nbsp;<code>\"red\"<\/code>&nbsp;adalah value untuk property&nbsp;<code>\"color\"<\/code>.<\/p>\r\n<p>Ada bentuk baku penulisan selektor , properti dan value :<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-3832\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-13.png\" sizes=\"(max-width: 483px) 100vw, 483px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-13.png 483w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-13-300x76.png 300w\" alt=\"\" width=\"483\" height=\"122\" \/>\r\n<figcaption>Gambar 1 bentuk baku penulisan selektor , properti , dan value pada css<\/figcaption>\r\n<\/figure>\r\n<pre class=\"wp-block-code\"><code>\/\/contoh css\r\nh2 { \r\n      font-family: sans;\r\n      color: rgb(10, 8, 8);\r\n    }\r\n<\/code><\/pre>\r\n<ul>\r\n<li><em><strong>selektor<\/strong><\/em>&nbsp;pada contoh diatas adalah&nbsp;<code>h2<\/code><\/li>\r\n<li><strong><em>properti<\/em><\/strong>&nbsp;pada contoh diatas adalah&nbsp;<code>font-family<\/code>&nbsp;dan&nbsp;<code>color<\/code><\/li>\r\n<li><strong><em>value<\/em><\/strong>&nbsp;pada contoh diatas adalah&nbsp;<code>sans<\/code>&nbsp;dan<code>&nbsp;rgb(10, 8, 8)<\/code>;<\/li>\r\n<\/ul>\r\n<h3 id=\"membuat-repository-baru\"><strong>Cara Penulisan Kode CSS dalam HTML&nbsp;<\/strong><\/h3>\r\n<p><strong>&zwnj;Internal CSS<\/strong><br \/>Penulisan CSS didalam tag&nbsp;<code>&lt;head&gt;<\/code>&nbsp;atau&nbsp;<code>&lt;body&gt;<\/code>&nbsp;HTML. Penulisannya ditulis dalam tag<code>&nbsp;&lt;style&gt;<\/code>&nbsp;.<\/p>\r\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;   \r\n  &lt;style type=\"text\/css\"&gt;\r\n    p{\r\n      font-family: Helvetica;\r\n      line-height: 2.00 em;\r\n      font-size: 20px;\r\n      color: orange;\r\n     }\r\n    &lt;\/style&gt;\r\n&lt;\/head&gt;\r\n\r\n&lt;body&gt;\r\n  \r\n  &lt;style type=\"text\/css\"&gt;\r\n    h2 { \r\n      font-family: sans;\r\n      color: rgb(10, 8, 8);\r\n    }\r\n  &lt;\/style&gt;\r\n\r\n  &lt;h2&gt;Hello CSS&lt;\/h2&gt;\r\n  &lt;p&gt;Hello aku bisa CSS&lt;\/p&gt;\r\n&lt;\/body&gt;\r\n&lt;\/html&gt;<\/code><\/pre>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-3808\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-8.png\" sizes=\"(max-width: 687px) 100vw, 687px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-8.png 687w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-8-300x167.png 300w\" alt=\"\" width=\"687\" height=\"382\" \/>\r\n<figcaption>Gambar 2 Contoh Internal CSS dalam HTML dan tampilannya<\/figcaption>\r\n<\/figure>\r\n<p><strong>Eksternal CSS<\/strong><br \/>Penulisan CSS terpisah dengan file HTML. File CSS ditulis dan disimpan dengan file berekstensi .css .Untuk memasukkan ekstensi CSS ke HTML menggunakan tag&nbsp;<code>&lt;link href=\"dirfolder\/namefile.css\"&gt;<\/code>.&nbsp;<code>href<\/code>&nbsp;diisi direktori folder dan nama file CSS untuk mengarahkan halaman html menemukan file CSS tersebut.<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-3820\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-10.png\" sizes=\"(max-width: 705px) 100vw, 705px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-10.png 705w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-10-300x117.png 300w\" alt=\"\" width=\"705\" height=\"275\" \/>\r\n<figcaption>Gambar 3 &lt;kiri&gt; file HTML dan &lt;kanan&gt; style.css<\/figcaption>\r\n<\/figure>\r\n<p><strong>Inline CSS<\/strong><br \/>Penulisan CSS langsung di atribut HTML tersebut. Contoh cara pemakaian inline CSS:<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-3831\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-12.png\" sizes=\"(max-width: 332px) 100vw, 332px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-12.png 332w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/06\/image-12-216x300.png 216w\" alt=\"\" width=\"332\" height=\"461\" \/><\/figure>\r\n<p>Untuk lebih mengenal CSS terdapat video tutorial yang dapat diikuti seperti berikut:<\/p>\r\n<ul>\r\n<li>Tutorial CSS dari Sekolah Coding:&nbsp;<a href=\"https:\/\/www.youtube.com\/playlist?list=PLCZlgfAG0GXAvVZ1Wb1D7HVAPNJGk4f-G\">https:\/\/www.youtube.com\/playlist?list=PLCZlgfAG0GXAvVZ1Wb1D7HVAPNJGk4f-G<\/a><\/li>\r\n<li>CSS Dasar dari Web Programming Unpas :<a href=\"https:\/\/www.youtube.com\/playlist?list=PLFIM0718LjIUBrbm6Gdh6k7ZUvPIAZm7p\">https:\/\/www.youtube.com\/playlist?list=PLFIM0718LjIUBrbm6Gdh6k7ZUvPIAZm7p<\/a><\/li>\r\n<\/ul>\r\n<p>Sumber:&nbsp;<a href=\"https:\/\/www.w3schools.com\/cssref\/\">https:\/\/www.w3schools.com\/cssref\/<\/a><\/p>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-04-27 08:00:00","status_publish":"publish","urutan":4,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:30:37","waktu_publish_formatted":" Selasa, 27 April 2021. 08:00:00 WIB."},{"id":761,"uuid":"0456de98-d9e4-4c66-a456-a4c5fda71c8a","author_user_id":4336,"materi_section_id":211,"judul":"Hari Ke-3 \u2013 Javascript \u2013 Intro","permalink":"hari-ke-3-javascript-intro","konten":"<div class=\"entry-content\">\r\n<p>Javascript merupakan salah satu bahasa pemrograman yang terpopuler di dunia. Javascript membuat aplikasi web menjadi interaktif tanpa reload halaman. Hampir semua browser modern yang kita ketahui dapat menjalankan javascript agar website yang ditampilkan lebih menarik.<\/p>\r\n<h2 id=\"menjalankan-javascript\"><strong>Menjalankan Javascript&nbsp;<\/strong><\/h2>\r\n<p>Ada bermacam cara untuk menjalankan kode javascript yang kita buat, di antaranya:<\/p>\r\n<ol>\r\n<li>Menjalankan javascript di console browser<\/li>\r\n<li>Menjalankan javascript di tools online seperti&nbsp;<a href=\"https:\/\/jsbin.com\/?js,console\" target=\"_blank\" rel=\"noreferrer noopener\" data-type=\"URL\" data-id=\"https:\/\/jsbin.com\/?js,console\">jsbin<\/a><a href=\"https:\/\/jsbin.com\/?js,console\" target=\"_blank\" rel=\"noreferrer noopener\">.com<\/a><\/li>\r\n<li>Menjalankan javascript dengan nodejs<\/li>\r\n<\/ol>\r\n<p>Pada materi ini kita akan mencoba untuk menjalankan script dengan nodejs.<\/p>\r\n<p>Nodejs adalah software berbasis pemrograman javascript yang dijalankan di sisi server. Jika biasanya javascript kita kenal erat kaitannya dengan client\/browser tapi dengan nodejs ini kita bisa membangun server menggunakan bahasa javascript.<\/p>\r\n<h2 id=\"install-nodejs\"><strong>Install Nodejs<\/strong><\/h2>\r\n<p>Pertama-tama tentu kita harus menginstall terlebih dahulu nodejs di komputer kita. Berikut ini link untuk download&nbsp;<a href=\"https:\/\/nodejs.org\/en\/download\/\" target=\"_blank\" rel=\"noreferrer noopener\">nodejs<\/a>&nbsp;(disarankan memilih versi LTS). Untuk OS Windows dan macOs tinggal diikuti saja instalasinya sampai selesai, sedangkan untuk Ubuntu 18.04 kamu bisa install mengikuti&nbsp;<a href=\"https:\/\/www.digitalocean.com\/community\/tutorials\/how-to-install-node-js-on-ubuntu-18-04\" target=\"_blank\" rel=\"noreferrer noopener\">tutorial dari digitalocean<\/a>.<\/p>\r\n<p>Untuk mengecek apakah instalasi nodejs sudah berhasil kita bisa jalankan script di terminal kita:<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-7178\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-42.png\" sizes=\"(max-width: 691px) 100vw, 691px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-42.png 691w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-42-300x55.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-42-683x126.png 683w\" alt=\"\" width=\"691\" height=\"126\" \/><\/figure>\r\n<p>dengan perintah tersebut, diketahui saat ini terinstall node dengan versi 12.16.2 dan npm versi 6.14.4 (untuk versi bisa menggunakan yang terbaru ini hanya contoh untuk mengecek version nya)<\/p>\r\n<h2 id=\"hello-world\"><strong>Hello world&nbsp;<\/strong><\/h2>\r\n<p>Untuk menjalankan javascript dengan nodejs mari kita coba dengan menuliskan script di sebuah file index.js .<\/p>\r\n<p>Buatlah file dengan nama index.js kemudian tulis code di dalam file tersebut seperti berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">var sayHello = \"Hello World!\" \r\nconsole.log(sayHello)<\/pre>\r\n<p>kemudian simpan file tersebut (save). Setelah itu kita bisa menjalankan script pada index.js tersebut dengan memberikan perintah seperti berikut pada terminal:<\/p>\r\n<pre class=\"wp-block-preformatted\">$ node index.js<\/pre>\r\n<p>secara otomatis pada terminal kita akan muncul &ldquo;<code>Hello World!<\/code>&rdquo; . (Selamat Anda telah berhasil menjalankan program pertama Anda ^_^)<\/p>\r\n<p>Demikian cara untuk menjalankan Javascript dengan nodejs.<\/p>\r\n<h2 id=\"variable\"><strong>Variable<\/strong><\/h2>\r\n<p>Variable adalah suatu blok data atau wadah untuk menampung sekumpulan data dengan berbagai tipe data apapun. Dengan variable kita bisa menyimpan suatu nilai untuk kemudian kita olah kembali pada program kita. Untuk deklarasi variable dalam javascript kita bisa gunakan sintaks&nbsp;<code>var<\/code>&nbsp;lalu diikuti nama variablenya.<\/p>\r\n<pre class=\"wp-block-preformatted\">var name = \"John\" \/\/ Tipe\r\nvar angka = 12\r\nvar todayIsFriday = false \r\n\r\nconsole.log(name) \/\/ \"John\"\r\nconsole.log(angka) \/\/ 12\r\nconsole.log(todayIsFriday) \/\/ false<\/pre>\r\n<p>Waspadai pendeklarasian variable yang tidak bernilai !<\/p>\r\n<pre class=\"wp-block-preformatted\">var items\r\nconsole.log(items) \/\/ Undefined<\/pre>\r\n<h2 id=\"data-type\"><strong>Data Type&nbsp;<\/strong><\/h2>\r\n<p>Data Type atau dalam bahasa indonesia Tipe Data adalah sekumpulan informasi yang memiliki nilai dan karakteristik tertentu. Beberapa contoh tipe data pada javascript di antaranya:<\/p>\r\n<ol>\r\n<li><strong>Integer<\/strong>: tipe data yang berupa angka<\/li>\r\n<li><strong>String<\/strong>&nbsp;: tipe data berupa text atau kumpulan karakter, biasanya string dibungkus dalam tanda petik ganda (double quote) atau tanda petik tunggal (single quote).<\/li>\r\n<li><strong>Boolean:&nbsp;<\/strong>tipe data dengan nilai&nbsp;<code>true<\/code>&nbsp;atau&nbsp;<code>false<\/code><\/li>\r\n<\/ol>\r\n<h2 id=\"string\"><strong>String<\/strong><\/h2>\r\n<p>String adalah tipe data yang berisi karakter-karakter dibungkus dalam tanda petik (<code>\"\"<\/code>&nbsp;atau&nbsp;<code>''<\/code>&nbsp;). Karakter-karakter pada suatu string dapat diakses dengan menggunakan indeks atau posisi karakter berada. Indeks pada string selalu mulai dari 0.<\/p>\r\n<pre class=\"wp-block-preformatted\">var sentences = \"Javascript\" \r\nconsole.log(sentences[0]) \/\/ \"J\"\r\nconsole.log(sentences[2]) \/\/ \"v\"<\/pre>\r\n<p>String pada javascript juga memiliki property dan methods tertentu. Property dan methods tersebut bisa kita gunakan dalam memanipulasi data agar sesuai dengan program yang kita inginkan.<\/p>\r\n<h3 id=\"string-properties\" class=\"has-vivid-red-color has-text-color\"><strong>String Properties&nbsp;<\/strong><\/h3>\r\n<p><strong>.length<\/strong><br \/>mengembalikan panjang atau jumlah karakter pada suatu string.<\/p>\r\n<pre class=\"wp-block-preformatted\">var word = \"Javascript is awesome\"\r\nconsole.log(word.length) \/\/ 21 <\/pre>\r\n<h3 id=\"string-methods\" class=\"has-vivid-red-color has-text-color\"><strong>String Methods<\/strong><\/h3>\r\n<p><strong>.charAt([indeks])<\/strong><\/p>\r\n<p>Mengembalikan karakter pada indeks yang diinginkan<\/p>\r\n<pre class=\"wp-block-preformatted\">console.log('i am a string'.charAt(3)); \/\/ 'm'<\/pre>\r\n<p><strong>.concat([string])<\/strong><\/p>\r\n<p>Menggabungkan beberapa string dan mengembalikannya menjadi string baru.<\/p>\r\n<pre class=\"wp-block-preformatted\">var string1 = 'good';\r\nvar string2 = 'luck';\r\nconsole.log(string1.concat(string2)); \/\/ goodluck<\/pre>\r\n<p><strong>.indexOf([string\/karakter])<\/strong><\/p>\r\n<p>Mengembalikan indeks dari string\/karakter yang dicari, yang pertama kali ditemukan, atau -1 apabila tidak ditemukan.<\/p>\r\n<pre class=\"wp-block-preformatted\">var text = 'dung dung ces!';\r\nconsole.log(text.indexOf('dung'));  \/\/ 0\r\nconsole.log(text.indexOf('u'));     \/\/ 1\r\nconsole.log(text.indexOf('jreng')); \/\/ -1<\/pre>\r\n<p><strong>.substring([indeks awal], [indeks akhir (optional)])<\/strong><\/p>\r\n<p>Mengembalikan potongan string mulai dari indeks pada parameter pertama (indeks awal) sampai dengan indeks pada parameter kedua (indeks akhir). Bila parameter kedua tidak ditentukan, maka secara otomatis berakhir pada karakter terakhir. Karakter pada indeks yang ditentukan pada parameter kedua tidak diikutkan sebagai output.<\/p>\r\n<pre class=\"wp-block-preformatted\">var car1 = 'Lykan Hypersport';\r\nvar car2 = car1.substr(6);\r\nconsole.log(car2); \/\/ Hypersport<\/pre>\r\n<p><strong>.substr([indeks awal], [jumlah karakter yang diambil (optional)])<\/strong><\/p>\r\n<p>Mendapatkan potongan string mulai dari indeks pada parameter pertama (indeks awal) dengan jumlah indeks pada parameter kedua (jumlah karakter). Bila parameter kedua tidak ditentukan, maka secara otomatis berakhir pada karakter terakhir. Karakter pada indeks yang ditentukan pada parameter kedua tidak diikutkan sebagai output.<\/p>\r\n<pre class=\"wp-block-preformatted\">var motor1 = 'zelda motor';\r\nvar motor2 = motor1.substr(2, 2);\r\nconsole.log(motor2); \/\/ ld<\/pre>\r\n<p><strong>.toUpperCase()<\/strong><\/p>\r\n<p>Mengembalikan string baru dengan semua karakter yang diubah menjadi huruf kapital.<\/p>\r\n<pre class=\"wp-block-preformatted\">var letter = 'This Letter Is For You';\r\nvar upper  = letter.toUpperCase();\r\nconsole.log(upper); \/\/ THIS LETTER IS FOR YOU<\/pre>\r\n<p><strong>.toLowerCase()<\/strong><\/p>\r\n<p>Mengembalikan string baru dengan semua karakter yang diubah menjadi huruf kecil<\/p>\r\n<pre class=\"wp-block-preformatted\">var letter = 'This Letter Is For You';\r\nvar lower  = letter.toLowerCase();\r\nconsole.log(lower); \/\/ this letter is for you<\/pre>\r\n<p><strong>.trim()<\/strong><\/p>\r\n<p>Mengembalikan string baru yang sudah dihapus karakter&nbsp;<em>whitespace<\/em>&nbsp;(&rdquo; &ldquo;) pada awal dan akhir string tersebut.<\/p>\r\n<pre class=\"wp-block-preformatted\">var username    = ' administrator ';\r\nvar newUsername = username.trim(); \r\nconsole.log(newUsername) \/\/ 'administrator'<\/pre>\r\n<h3 id=\"mengubah-tipe-data-dari-dan-ke-string\" class=\"has-vivid-red-color has-text-color\"><strong>Mengubah tipe data dari dan ke String<\/strong><\/h3>\r\n<p>Di Javascript terkadang kita ingin mengubah sebuah data string menjadi tipe data lain atau sebaliknya. Contoh diperoleh data angka tapi dalam tipe data String maka kita dapat mengubah string tersebut menjadi tipe data angka.<\/p>\r\n<p><strong>String([angka\/array])<\/strong><\/p>\r\n<p>Fungsi global&nbsp;<code>String()<\/code>&nbsp;dapat dipanggil kapan saja pada program JavaScript dan akan mengembalikan data dalam tipe data String dari parameter yang diberikan.<\/p>\r\n<pre class=\"wp-block-preformatted\">var int  = 12;\r\nvar real = 3.45;\r\nvar arr  = [6, 7, 8];\r\n\r\nvar strInt  = String(int);\r\nvar strReal = String(real);\r\nvar strArr  = String(arr);\r\n\r\nconsole.log(strInt);  \/\/ '12'\r\nconsole.log(strReal); \/\/ '3.45'\r\nconsole.log(strArr);  \/\/ '6,7,8'<\/pre>\r\n<p><strong>.toString()<\/strong><\/p>\r\n<p>Mengonversi tipe data lain menjadi string. Bila data tersebut adalah array, setiap nilai akan dituliskan dan dipisah dengan karakter koma.<\/p>\r\n<pre class=\"wp-block-preformatted\">var number = 21;\r\nconsole.log(number.toString()); \/\/ '21'\r\nvar array = [1,2];\r\nconsole.log(array.toString());  \/\/ '1,2'<\/pre>\r\n<p><strong>Number([String])<\/strong><\/p>\r\n<p>Fungsi global&nbsp;<code>Number()<\/code>&nbsp;mengonversi tipe data string menjadi angka. Data yang diberikan pada parameter harus berupa karakter angka saja, dengan titik (separator) bila angka adalah bilangan desimal. Bila parameter berisi karakter selain angka dan\/atau titik,&nbsp;<code>Number()<\/code>&nbsp;akan mengembalikan&nbsp;<strong>NaN<\/strong>&nbsp;<strong><em>(Not a Number)<\/em><\/strong>.<\/p>\r\n<pre class=\"wp-block-preformatted\">var number1 = Number(\"90\");   \/\/ number1 = 90\r\nvar number2 = Number(\"1.23\"); \/\/ number2 = 1.23\r\nvar number3 = Number(\"4 5\");  \/\/ number3 = NaN<\/pre>\r\n<p><strong>parseInt([String]) dan parseFloat([String])<\/strong><\/p>\r\n<p>Fungsi global&nbsp;<code>parseInt([String])<\/code>&nbsp;dan&nbsp;<code>parseFloat([String])<\/code>&nbsp;mengembalikan angka dari string. Bila angka adalah bilangan desimal maka gunakan&nbsp;<code>parseFloat()<\/code>, bila tidak bilangan dibelakang koma akan diabaikan.<\/p>\r\n<pre class=\"wp-block-preformatted\">var int  = '89';\r\nvar real = '56.7';\r\nvar strInt_1 = parseInt(int);  \/\/ strInt_1 = 89\r\nvar strInt_2 = parseInt(real); \/\/ strInt_2 = 56\r\nvar strReal_1 = parseFloat(int); \/\/ strReal_1 = 89\r\nvar strReal_2 = parseFloat(real); \/\/ strReal_2 = 56.7<\/pre>\r\n<h1 id=\"operator\"><strong>Operator<\/strong><\/h1>\r\n<p>Operator adalah karakter khusus yang merepresentasikan sebuah tindakan. Operator terbagi ke dalam beberapa jenis:<\/p>\r\n<ol>\r\n<li>Operator Aritmatika Operator yang melibatkan operasi matematika seperti tambah, kurang, kali, bagi.\r\n<ul>\r\n<li>Tambah&nbsp;<strong>(+)<\/strong><\/li>\r\n<li>Kurang (<strong>&ndash;<\/strong>)<\/li>\r\n<li>Kali (<strong>*<\/strong>)<\/li>\r\n<li>Bagi (<strong>\/<\/strong>)<\/li>\r\n<li>Modulus (<strong>%<\/strong>)<br \/>Modulus adalah sisa bagi. Contohnya 5%3 hasilnya adalah 2, 100%5 hasilnya 0.<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Operator Assignment (<code>=<\/code>), Operator untuk mendaftarkan atau meng-assign suatu nilai ke dalam suatu variable\r\n<pre class=\"wp-block-preformatted\"><code>var angka<\/code> <br \/><code>angka = 10 \/\/ Contoh assignment variable angka dengan nilai 10<\/code><\/pre>\r\n<\/li>\r\n<li>Operator Perbandingan, Operator yang membandingkan suatu nilai dengan nilai yang lain. Hasil dari perbandingan ini akan dikembalikan dalam tipe data boolean&nbsp;<code>true<\/code>&nbsp;atau&nbsp;<code>false<\/code>.\r\n<ul>\r\n<li>Equal Operator (<code>==<\/code>)\r\n<pre class=\"wp-block-preformatted\"><code>var angka = 100<\/code><br \/><code>console.log(angka == 100) \/\/ true<\/code><br \/><code>console.log(angka == 20) \/\/ false<\/code><\/pre>\r\n<\/li>\r\n<li>Not Equal (<code>&nbsp;!=<\/code>&nbsp;)\r\n<pre class=\"wp-block-preformatted\"><code>var sifat = \"rajin\"<\/code><br \/><code>console.log(sifat != \"malas\") \/\/ true<\/code><br \/><code>console.log(sifat != \"bandel\") \/\/true <\/code><\/pre>\r\n<\/li>\r\n<li>Strict Equal (&nbsp;<code>===<\/code>&nbsp;) Selain membandingkan dua nilai nya, strict equal juga membandingkan tipe datanya apakah sama atau tidak\r\n<pre class=\"wp-block-preformatted\"><code>var angka = 8<\/code><br \/><code>console.log(angka == \"8\") \/\/ true, padahal \"8\" adalah string.<\/code><br \/><code>console.log(angka === \"8\") \/\/ false, karena tipe data nya berbeda<\/code><br \/><code>console.log(angka === 8) \/\/ true <\/code><\/pre>\r\n<\/li>\r\n<li>Strict not Equal (&nbsp;<code>!==<\/code>&nbsp;) Kebalikan dari strict equal.\r\n<pre class=\"wp-block-preformatted\"><code>var angka = 11<\/code><br \/><code>console.log(angka != \"11\") \/\/ false, padahal \"11\" adalah string<\/code><br \/><code>console.log(angka !== \"11\") \/\/ true, karena tipe datanya berbeda<\/code><br \/><code>console.log(angka !== 11) \/\/ false<\/code><\/pre>\r\n<\/li>\r\n<li>Kurang dari &amp; Lebih Dari (&nbsp;<code>&lt;<\/code>,&nbsp;<code>&gt;<\/code>,&nbsp;<code>&lt;=<\/code>,&nbsp;<code>&gt;=<\/code>)\r\n<pre class=\"wp-block-preformatted\"><code>var number = 17<\/code><br \/><code>console.log( number &lt; 20 ) \/\/ true<\/code><br \/><code>console.log( number &gt; 17 ) \/\/ false<\/code><br \/><code>console.log( number &gt;= 17 ) \/\/ true, karena terdapat sama dengan<\/code><br \/><code>console.log( number &lt;= 20 ) \/\/ true<\/code><\/pre>\r\n<\/li>\r\n<\/ul>\r\n<\/li>\r\n<li>Operator Kondisional, Operator yang mengkombinasikan dua nilai kebenaran . Terdapat operator AND (<code>&amp;&amp;<\/code>) dan OR (<code>||<\/code>)\r\n<ul>\r\n<li>OR (&nbsp;<code>||<\/code>&nbsp;)\r\n<pre class=\"wp-block-preformatted\"><code>console.log(true || true); \/\/ true<\/code><br \/><code>console.log(true || false); \/\/ true<\/code><br \/><code>console.log(true || false || false); \/\/ true<\/code><br \/><code>console.log(false || false); \/\/ false<\/code><\/pre>\r\n<\/li>\r\n<li>AND (&nbsp;<code>&amp;&amp;<\/code>&nbsp;)\r\n<pre class=\"wp-block-preformatted\"><code>console.log(true &amp;&amp; true); \/\/ true<\/code><br \/><code>console.log(true &amp;&amp; false); \/\/ false<\/code><br \/><code>console.log(false &amp;&amp; false); \/\/ false<\/code><br \/><code>console.log(false &amp;&amp; true &amp;&amp; true); \/\/ false<\/code><br \/><code>console.log(true &amp;&amp; true &amp;&amp; true); \/\/ true <\/code><\/pre>\r\n<\/li>\r\n<\/ul>\r\n<\/li>\r\n<\/ol>\r\n<h2 id=\"referensi-tambahan\"><strong>Referensi<\/strong><\/h2>\r\n<ul>\r\n<li><a href=\"https:\/\/www.w3schools.com\/js\/js_variables.asp\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"JavaScript Variables By W3School (opens in a new tab)\">JavaScript Variables By W3School<\/a><\/li>\r\n<li><a href=\"https:\/\/www.w3schools.com\/js\/js_operators.asp\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\">JavaScript Operator By W3School<\/a><\/li>\r\n<li><a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/String\" target=\"_blank\" rel=\"noreferrer noopener\">String by Mozilla Developer Network<\/a><\/li>\r\n<li><a href=\"http:\/\/www.w3schools.com\/jsref\/jsref_obj_string.asp\" target=\"_blank\" rel=\"noreferrer noopener\">JavaScript String Reference by W3School<\/a><\/li>\r\n<li><a href=\"http:\/\/www.w3schools.com\/js\/js_type_conversion.asp\" target=\"_blank\" rel=\"noreferrer noopener\">JavaScript Type Conversion<\/a><\/li>\r\n<li><a href=\"https:\/\/github.com\/hacktiv8\/phase-0-activities\/blob\/master\/modules\/js-string-reference.md#length\" target=\"_blank\" rel=\"noreferrer noopener\">github hacktiv8 phase 0 materials<\/a><\/li>\r\n<\/ul>\r\n<p>&nbsp;<\/p>\r\n<\/div>\r\n<div id=\"gtx-trans\" style=\"position: absolute; left: 207px; top: 3825.31px;\">\r\n<div class=\"gtx-trans-icon\">&nbsp;<\/div>\r\n<\/div>","waktu_publish":"2021-04-28 08:00:00","status_publish":"publish","urutan":5,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:30:19","waktu_publish_formatted":" Rabu, 28 April 2021. 08:00:00 WIB."},{"id":762,"uuid":"e003fba2-1796-4f9e-b2b8-2cdd8371afcf","author_user_id":4336,"materi_section_id":211,"judul":"Hari Ke-3 \u2013 Javascript \u2013 Conditional","permalink":"hari-ke-3-javascript-conditional","konten":"<div class=\"entry-content\">\r\n<p>Conditional merupakan cara yang digunakan dalam program komputer untuk mengambil keputusan dari kemungkinan benar(true) atau salah(false) terhadap beberapa kondisi.<\/p>\r\n<h2 id=\"kondisional-dengan-if-else-if-else\"><strong><code>if \/ else if \/ else<\/code>&nbsp;<\/strong><\/h2>\r\n<ul>\r\n<li>Contoh 1 menjalankan kode jika premis bernilai&nbsp;<code>true<\/code>\r\n<pre class=\"wp-block-preformatted\"><code>if ( true ) {<\/code><br \/><code>    console.log(\"jalankan code\")<\/code><br \/><code>}<\/code><\/pre>\r\n<\/li>\r\n<li>Contoh 2 kode tidak dijalankan jika premis bernilai&nbsp;<code>false<\/code>\r\n<pre class=\"wp-block-preformatted\"><code>if ( false ) {<\/code><br \/><code>    console.log(\"code tidak dijalankan\")<\/code><br \/><code>}<\/code><\/pre>\r\n<\/li>\r\n<li>Contoh 3 Premis dengan perbandingan suatu nilai\r\n<pre class=\"wp-block-preformatted\"><code>var mood = \"happy\"<\/code><br \/><code>if ( mood == \"happy\" ) {<\/code><br \/><code>    console.log(\"hari ini aku bahagia!\")<\/code><br \/><code>}<\/code><\/pre>\r\n<\/li>\r\n<\/ul>\r\n<p>Di dalam conditional dikenal juga dengan istilah branching atau percabangan. Dengan percabangan kita bisa mengecek nilai kebenaran dari berbagai premis yang kita sediakan. cara menambahkan kondisi atau premis lain dari premis pertamanya adalah dengan sintaks&nbsp;<code>else<\/code>&nbsp;. Contohnya ketika kita diminta untuk membeli telur dan buah ke minimarket oleh ibu kita maka akan banyak sekali kondisi atau kemungkinan yang terjadi dalam perjalanan kita membeli barang-barang tersebut di supermarket.<\/p>\r\n<ul>\r\n<li>Contoh 4 Branching sederhana\r\n<pre class=\"wp-block-preformatted\"><code>var minimarketStatus = \"open\"<\/code><br \/><code>if ( minimarketStatus == \"open\" ) {<\/code><br \/><code>    console.log(\"saya akan membeli telur dan buah\")<\/code><br \/><code>} else {<\/code><br \/><code>    console.log(\"minimarketnya tutup\")<br \/>}<\/code><\/pre>\r\n<p>Kondisi else di atas adalah kondisi selain&nbsp;<code>minimarketStatus == \"open\"<\/code>&nbsp;.<\/p>\r\n<\/li>\r\n<li>Contoh 5 Branching dengan kondisi\r\n<pre class=\"wp-block-preformatted\"><code>var minimarketStatus = \"close\"<\/code><br \/><code>var minuteRemainingToOpen = 5<\/code><br \/><code>if ( minimarketStatus == \"open\" ) {<\/code><br \/><code>    console.log(\"saya akan membeli telur dan buah\")<\/code><br \/><code>} else if ( minuteRemainingToOpen &lt;= 5 ) {<\/code><br \/><code>    console.log(\"minimarket buka sebentar lagi, saya tungguin\")<\/code><br \/><code>} else {<\/code><br \/><code>    console.log(\"minimarket tutup, saya pulang lagi\")<br \/>}<\/code><\/pre>\r\n<p>contoh di atas kita memberikan kondisi tambahan yaitu jika minimarket akan buka kurang atau sama dengan 5 menit lagi maka saya akan menunggu.<\/p>\r\n<\/li>\r\n<\/ul>\r\n<p>Selain Branching atau percabangan, conditional juga dapat memiliki sarang atau tumpukan yaitu terdapat conditional di dalam sebuah kondisional.<\/p>\r\n<ul>\r\n<li>Contoh 6 conditional bersarang\r\n<pre class=\"wp-block-preformatted\"><code>var minimarketStatus = \"open\"<\/code><br \/><code>var telur = \"soldout\"<\/code><br \/><code>var buah = \"soldout\" <\/code><br \/><code>if ( minimarketStatus == \"open\" ) {<\/code><br \/><code>    console.log(\"saya akan membeli telur dan buah\")<\/code><br \/><code>    if(telur == \"soldout\" || buah == \"soldout\" ) {<\/code><br \/><code>        console.log(\"belanjaan saya tidak lengkap\")    <\/code><br \/><code>    } else if( telur == \"soldout\") {<\/code><br \/><code>        console.log(\"telur habis\")<\/code><br \/><code>    } else if ( buah == \"soldout\" ) {<\/code><br \/><code>        console.log(\"buah habis\")<\/code><br \/><code>    }<\/code><br \/><code>} else {<\/code><br \/><code>    console.log(\"minimarket tutup, saya pulang lagi\")<\/code><br \/><code>}<\/code><\/pre>\r\n<p>pada kondisi di atas minimarketnya sudah buka lalu cek kondisi selanjutnya cek apakah telur atau buah habis. Karena kondisinya adalah jika telur ATAU buah salah satunya ada yang soldout maka belanjaan saya lengkap. Demikian seterusnya akan mengecek kondisi-kondisi yang disediakan dalam logika program yang dibuat.<\/p>\r\n<\/li>\r\n<\/ul>\r\n<h2 id=\"kondisional-dengan-switch-case\"><strong><code>Switch Case<\/code><\/strong>&nbsp;<\/h2>\r\n<p>Cara lain untuk melakukan pengondisian atau conditional adalah dengan&nbsp;<code>switch case<\/code>. Penggunaan switch case mirip seperti kita menyalakan tombol switch pada remote. Jika kondisi tombol yang dipijit adalah tombol dengan nomer tertentu maka akan menjalankan prorgram tertentu.<\/p>\r\n<ul>\r\n<li>Contoh 7 Kondisional dengan&nbsp;<code>switch case<\/code>\r\n<pre class=\"wp-block-preformatted\"><code>var buttonPushed = 1;<\/code><br \/><code>switch(buttonPushed) {<\/code><br \/><code>  case 1:   { console.log('matikan TV!'); break; }<\/code><br \/><code>  case 2:   { console.log('turunkan volume TV!'); break; }<\/code><br \/><code>  case 3:   { console.log('tingkatkan volume TV!'); break; }<\/code><br \/><code>  case 4:   { console.log('matikan suara TV!'); break; }<\/code><br \/><code>  default:  { console.log('Tidak terjadi apa-apa'); }}<\/code><\/pre>\r\n<p>Pada kode di atas, switch akan mengevaluasi nilai&nbsp;<code>buttonPushed<\/code>&nbsp;jika&nbsp;<code>case<\/code>&nbsp;yang ditemui cocok dengan nilai yang diberikan maka kode pada&nbsp;<code>case<\/code>&nbsp;tersebut akan dijalankan sehingga pada console akan dimunculkan &ldquo;<code>matikan TV!<\/code>&ldquo;. Pada setiap case terdapat&nbsp;<code>break<\/code>&nbsp;yang berfungsi untuk menghentikan proses switch agar tidak menjalankan case yang lain. Juga terdapat&nbsp;<code>default<\/code>&nbsp;yaitu kondisi dimana tidak ditemukan&nbsp;<code>case&nbsp;<\/code>yang sesuai.<\/p>\r\n<\/li>\r\n<\/ul>\r\n<h2 id=\"kondisional-dengan-switch-case\"><strong><code>Ternary Operator<\/code><\/strong>&nbsp;<\/h2>\r\n<p>ternary operator merupakan pengondisian yang bisa di buat dengan satu baris,&nbsp; biasanya di deklarasi kan di variabel, berikut ini contoh dari ternary operator:<br \/><br \/><code>var age= 20<br \/>var bisaVote= age &gt; 20 ? \"bisa vote\" : \"belum bisa vote\" \/\/ hasilnya bisa vote<br \/><br \/>var angka = 9<br \/>var jenisBilangan = angka % 2 === 0 ? \"Bilangan Genap\" : \"Bukan Bilangan Genap\" \/\/hasilnya bukan bilangan genap<\/code><code><\/code><\/p>\r\n<\/div>\r\n<p>&nbsp;<\/p>\r\n<p><\/p>","waktu_publish":"2021-04-28 08:00:00","status_publish":"publish","urutan":6,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:29:55","waktu_publish_formatted":" Rabu, 28 April 2021. 08:00:00 WIB."},{"id":763,"uuid":"9a425b0b-618e-4ce0-9add-436596d10a22","author_user_id":4336,"materi_section_id":211,"judul":"Hari Ke-4 \u2013 Javascript \u2013 Loop","permalink":"hari-ke-4-javascript-loop","konten":"<p>Loop\/Iteration adalah tindakan mengulang \/ merepetisi sebuah proses, dengan tujuan untuk mendapatkan deret hasil, atau dengan tujuan mendapatkan hasil tertentu dengan repetisi. Setiap proses repetisi ini disebut sebagai Iteration atau Looping.<\/p>\r\n<p>Untuk melakukan looping\/iteration, JavaScript menyediakan beberapa jenis iteration, yaitu:<\/p>\r\n<ul>\r\n<li class=\"\">while-loop<\/li>\r\n<li class=\"\">for-loop<\/li>\r\n<\/ul>\r\n<h2 id=\"while-loop\"><strong>While-loop<\/strong><\/h2>\r\n<p>While-loop adalah iterasi yang akan mengulang sebuah proses dengan sebuah kondisi tertentu.<\/p>\r\n<p>Berikut adalah cara atau struktur penulisan while-loop:<\/p>\r\n<pre class=\"wp-block-preformatted\">while([Kondisi]) { \/\/ Kondisi yang menentukan apakah program akan melakukan iterasi. \r\n\/\/ Berupa boolean atau true\/false.\r\n  [Proses] \/\/ Merupakan proses yang akan dijalankan dalam satu iterasi\r\n}<\/pre>\r\n<p>Pada while-loop, statement&nbsp;<code>while<\/code>&nbsp;akan mengambil sebuah nilai&nbsp;<code>true<\/code>&nbsp;atau&nbsp;<code>false<\/code>&nbsp;dari hasil kondisi yang diberikan. Apabila statement&nbsp;<code>while<\/code>&nbsp;mendapatkan nilai&nbsp;<code>true<\/code>, maka proses yang berada didalam curly bracket (<code>{ }<\/code>) akan dijalankan. Looping akan terus dilakukan selama kondisi while-loop masih&nbsp;<code>true<\/code>.<\/p>\r\n<p>Untuk mencegah looping berjalan terus-menerus, dilakukan sebuah proses yang akan mengubah kondisi yang sedemikian rupa yang bertujuan untuk menghentikan looping dengan menghasilkan kondisi yang&nbsp;<code>false<\/code>.<\/p>\r\n<p><strong>Contoh Looping While-loop 1<\/strong>&nbsp;Looping Angka 1-9 Sederhana<\/p>\r\n<pre class=\"wp-block-preformatted\">var flag = 1;\r\nwhile(flag &lt; 10) { \/\/ Loop akan terus berjalan selama nilai flag masih dibawah 10\r\n  console.log('Iterasi ke-' + flag); \/\/ Menampilkan nilai flag pada iterasi tertentu\r\n  flag++; \/\/ Mengubah nilai flag dengan menambahkan 1\r\n}<\/pre>\r\n<p>Kamu bisa mencoba kode di atas&nbsp;<a href=\"https:\/\/jsbin.com\/pahure\/1\/edit?js,console\" target=\"_blank\" rel=\"noreferrer noopener\">di sini<\/a><\/p>\r\n<p><strong>Contoh Looping While-loop 2<\/strong>&nbsp;Looping Mengembalikan Angka Total<\/p>\r\n<pre class=\"wp-block-preformatted\">var deret = 5;\r\nvar jumlah = 0;\r\nwhile(deret &gt; 0) { \/\/ Loop akan terus berjalan selama nilai deret masih di atas 0\r\n  jumlah += deret; \/\/ Menambahkan nilai variable jumlah dengan angka deret\r\n  deret--; \/\/ Mengubah nilai deret dengan mengurangi 1\r\n  console.log('Jumlah saat ini: ' + jumlah)\r\n}\r\n \r\nconsole.log(jumlah);<\/pre>\r\n<p>Kamu bisa mencoba kode di atas&nbsp;<a href=\"https:\/\/jsbin.com\/nolocam\/edit?js,console\" target=\"_blank\" rel=\"noreferrer noopener\">di sini<\/a><\/p>\r\n<h2 id=\"for-loop\"><strong>For-loop&nbsp;<\/strong><\/h2>\r\n<p>For-loop adalah bentuk lain dari iterasi, dimana statement&nbsp;<code>for<\/code>&nbsp;menjadi kontrol atas loop yang dilakukan. Hal ini yang menjadi pembeda antara for-loop dengan while-loop.<\/p>\r\n<p>Berikut adalah cara atau struktur penulisan for-loop:<\/p>\r\n<pre class=\"wp-block-preformatted\">for([Inisialisasi], [Kondisi], [Incremental\/Decremental]) {\r\n  [Proses] \/\/ Merupakan proses yang akan dijalankan dalam satu iterasi\r\n} <\/pre>\r\n<p>Pada for-loop, statement&nbsp;<code>for<\/code>&nbsp;akan menampung tiga parameter, yaitu sebut saja inisialisasi, kondisi, dan incremental\/decremental. Ketiga parameter ini akan menjadi kontrol kapan loop ini harus berhenti. Pada parameter pertama, yaitu inisialisasi, sebuah variable diberikan nilai awal atau default. Pada parameter kedua, yaitu kondisi, for-loop akan terus berjalan selama kondisi ini masih terpenuhi, dengan kata lain, mengandung nilai&nbsp;<code>true<\/code>. Pada parameter kedua, yaitu incremental\/decremental, variabel yang menjadi kontrol terhadap loop ini akan diubah nilainya.<\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p><em>Best Practice:<\/em>&nbsp;Walaupun memang for-loop dapat mengubah kondisi di dalam proses, namun best practice dari penggunaan for-loop adalah seluruh kendali atau kontrol dari looping ditentukan oleh variable yang diinisialisasi, di increment\/decrement, dan juga kondisi for-loop pun menggunakan variable tersebut.<\/p>\r\n<\/blockquote>\r\n<p>Untuk memudahkan kamu mendapatkan gambaran jelas tentang penggunaan for-loop, mari kita gunakan kedua contoh while-loop dan kita tulis ulang dalam bentuk for-loop.<\/p>\r\n<p><strong>Contoh Looping For-loop 1<\/strong>&nbsp;Looping Angka 1-9 Sederhana<\/p>\r\n<pre class=\"wp-block-preformatted\">for(var angka = 1; angka &lt; 10; angka++) {\r\n  console.log('Iterasi ke-' + angka);\r\n} <\/pre>\r\n<p>Kamu bisa mencoba kode di atas&nbsp;<a href=\"https:\/\/jsbin.com\/dijukel\/edit?js,console\" target=\"_blank\" rel=\"noreferrer noopener\">di sini<\/a><\/p>\r\n<p><strong>Contoh Looping For-loop 2<\/strong>&nbsp;Looping Mengembalikan Angka Total<\/p>\r\n<pre class=\"wp-block-preformatted\">var jumlah = 0;\r\nfor(var deret = 5; deret &gt; 0; deret--) {\r\n  jumlah += deret;\r\n  console.log('Jumlah saat ini: ' + jumlah);\r\n}\r\n \r\nconsole.log('Jumlah terakhir: ' + jumlah);<\/pre>\r\n<p>Kamu bisa mencoba kode di atas&nbsp;<a href=\"https:\/\/jsbin.com\/xukega\/edit?js,console\" target=\"_blank\" rel=\"noreferrer noopener\">di sini<\/a><\/p>\r\n<p><strong>Contoh Looping For-loop 3<\/strong>&nbsp;Looping Dengan Increment dan Decrement Lebih dari 1<\/p>\r\n<pre class=\"wp-block-preformatted\">for(var deret = 0; deret &lt; 10; deret += 2) {\r\n  console.log('Iterasi dengan Increment counter 2: ' + deret);\r\n}\r\n \r\nconsole.log('-------------------------------');\r\n \r\nfor(var deret = 15; deret &gt; 0; deret -= 3) {\r\n  console.log('Iterasi dengan Decrement counter : ' + deret);\r\n} <\/pre>\r\n<p>Kamu bisa mencoba kode di atas di repl.it.<\/p>\r\n<h4><strong>Waspadai Infinite Looping!<\/strong><\/h4>\r\n<p>Dengan sengaja atau tidak sengaja, kode kamu mungkin dapat menghasilkan infinite looping, atau looping yang tidak akan pernah berhenti. Bila ini terjadi, segera periksa statement kondisi kamu.<\/p>\r\n<pre class=\"wp-block-preformatted\">var flag = 1;\r\nwhile(flag &lt; 10) { \/\/ Loop akan terus berjalan, karena nilai flag tidak pernah berubah\r\n  console.log('Iterasi ke-' + flag);\r\n} <\/pre>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Sumber:&nbsp;<a href=\"https:\/\/github.com\/hacktiv8\/phase-0-activities\/blob\/master\/modules\/js-first-time.md#loopiteration\" target=\"_blank\" rel=\"noreferrer noopener\">github hacktiv8 phase 0 materials<\/a><\/p>\r\n<\/blockquote>","waktu_publish":"2021-04-29 08:00:00","status_publish":"publish","urutan":7,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:29:14","waktu_publish_formatted":" Kamis, 29 April 2021. 08:00:00 WIB."},{"id":764,"uuid":"409cf029-aac9-4b98-9d69-4f9cdb7763f3","author_user_id":4336,"materi_section_id":211,"judul":"Hari Ke-4 \u2013 Javascript \u2013 Array","permalink":"hari-ke-4-javascript-array","konten":"<p>Array adalah kumpulan atau tumpukan berbagai data. Cara menuliskan array yaitu dengan kurung siku (<code>[]<\/code>) dan elemen-elemen nya dipisah menggunakan tanda koma (<code>,<\/code>). Setiap elemen dari array memiliki indeks yang dimulai dari 0, 1, 2, dst. Kita dapat memanipulasi array dengan berbagai cara seperti menambahkan dan mengeluarkan elemen dalam array, menggabungkan array, atau bahkan menghapus seluruh elemen Array nya. Kita bisa memasukkan beberapa tipe data yang berbeda ke dalam Array bahkan memasukkan Array ke dalam Array.<\/p>\r\n<p>Array juga memiliki property&nbsp;<code>.length<\/code>&nbsp;seperti pada string yang berarti panjang dari sebuah array.<\/p>\r\n<pre class=\"wp-block-preformatted\">var hobbies = [\"coding\", \"cycling\", \"climbing\", \"skateboarding\"] \r\nconsole.log(hobbies) \/\/ [ 'coding', 'cycling', 'climbing', 'skateboarding' ]\r\nconsole.log(hobbies.length) \/\/ 4 \r\n \r\nconsole.log(hobbies[0]) \/\/ coding\r\nconsole.log(hobbies[2]) \/\/ climbing\r\n\/\/ Mengakses elemen terakhir dari array\r\nconsole.log(hobbies[hobbies.length -1] \/\/ skateboarding<\/pre>\r\n<h2 id=\"metode-array\"><strong>Metode Array&nbsp;<\/strong><\/h2>\r\n<p>Berikut ini adalah beberapa metode atau built-in functions yang dimiliki oleh tipe data array:<\/p>\r\n<ul>\r\n<li class=\"\">push: menambah 1 nilai ke array ke index paling belakang<\/li>\r\n<li class=\"\">pop: menghapus 1 nilai dari array index paling belakang<\/li>\r\n<li class=\"\">unshift: menambah 1 nilai ke array index paling depan (index 0)<\/li>\r\n<li class=\"\">shift: menghapus 1 nilai dari array index paling depan (index 0)<\/li>\r\n<li class=\"\">join: menggabungkan seluruh element array menjadi sebuah string dan mengambil parameter sebagai simbol penyambung antar elemen<\/li>\r\n<li class=\"\">sort: mengurutkan elemen di dalam array sesuai alphabet<\/li>\r\n<li class=\"\">slice: mengambil beberapa lapis data<\/li>\r\n<li class=\"\">splice: mengubah nilai array dengan menghapus dan\/atau menambah nilai baru ke array<\/li>\r\n<li class=\"\">split: memecah string dan mengembalikan array sesuai dengan separator \/ pemisah yang didefinisikan<\/li>\r\n<\/ul>\r\n<p>Cara menggunakan metode array adalah dengan menggunakan tanda dot (<code>.<\/code>) contohnya sbb:<\/p>\r\n<pre class=\"wp-block-preformatted\">var feeling = [\"dag\", \"dig\"]\r\nfeeling.push(\"dug\") \/\/ menambahkan nilai \"dug\" ke index paling belakang\r\nfeelling.pop() \/\/ menghapus nilai pada elemen terakhir array<\/pre>\r\n<p>Beberapa metode array ada yang mengembalikan nilai array lama yang sudah diperbarui (array lama di-update) dengan metode tersebut , dan ada pula metode array yang mengembalikan sebuah array baru dan tidak mengubah data pada array yang lama (array baru yang serupa dengan array lama). Sifat seperti ini disebut mutable atau immutable.<\/p>\r\n<h3 id=\"push\"><code><strong>.push()<\/strong><\/code><\/h3>\r\n<p><em>Push&nbsp;<\/em>adalah metode array untuk menambahkan nilai di belakang elemen terakhir di array. metode push menerima sebuah parameter yaitu nilai yang ingin kita tambahkan ke dalam array.<\/p>\r\n<pre class=\"wp-block-preformatted\">var numbers = [0, 1, 2]\r\nnumbers.push(3)\r\nconsole.log(numbers) \/\/ [0, 1, 2, 3]\r\n\/\/ Bisa juga memasukkan lebih dari satu nilai menggunakan metode push\r\nnumbers.push(4, 5)\r\nconsole.log(numbers) \/\/ [0, 1, 2, 3, 4, 5] <\/pre>\r\n<h3 id=\"pop\"><code><strong>.pop()<\/strong><\/code><\/h3>\r\n<p>Pop adalah kebalikan dari push yaitu menghapus nilai elemen paling terakhir dari sebuah array. metode Pop tidak menerima parameter apapun sehingga metode pop hanya bisa mengeluarkan satu elemen saja yaitu yang paling terakhir dari sebuah array.<\/p>\r\n<pre class=\"wp-block-preformatted\">var numbers = [0, 1, 2, 3, 4, 5]\r\nnumbers.pop() \r\nconsole.log(numbers) \/\/ [0, 1, 2, 3, 4] <\/pre>\r\n<h3 id=\"unshift\"><code><strong>.unshift()<\/strong><\/code><\/h3>\r\n<p>Unshift yaitu menambahkan nilai pada index ke-0 sehingga elemen-elemen sebelumnya bergeser.<\/p>\r\n<pre class=\"wp-block-preformatted\">var numbers = [0, 1, 2, 3]\r\nnumbers.unshift(-1) \r\nconsole.log(numbers) \/\/ [-1, 0, 1, 2, 3]<\/pre>\r\n<h3 id=\"shift\"><code><strong>.shift()<\/strong><\/code><\/h3>\r\n<p>Shift kebalikan dari unshift yaitu menghapus nilai pada elemen terdepan dari sebuah array. metode Shift tidak menerima parameter apapun.<\/p>\r\n<pre class=\"wp-block-preformatted\">var numbers = [ 0, 1, 2, 3]\r\nnumbers.shift()\r\nconsole.log(numbers) \/\/ [1, 2, 3] <\/pre>\r\n<h3 id=\"sort\"><code><strong>.sort()<\/strong><\/code><\/h3>\r\n<p>Sort adalah metode untuk mengurutkan nilai pada array. Secara otomatis, sort akan mengurutkan secara ascending (dari rendah ke tinggi) dan diurutkan berdasarkan unicode dari karakter. Urutan unicode artinya ada karakter yang secara nilai lebih besar dibandingkan dengan karakter yang lainnya. contohnya adalah karakter &ldquo;b&rdquo; akan lebih besar daripada &ldquo;a&rdquo;, karakter &ldquo;c&rdquo; lebih besar daripada karakter &ldquo;b&rdquo;, dst.<\/p>\r\n<pre class=\"wp-block-preformatted\">var animals = [\"kera\", \"gajah\", \"musang\"] \r\nanimals.sort()\r\nconsole.log(animals) \/\/ [\"gajah\", \"kera\", \"musang\"]<\/pre>\r\n<h3 id=\"slice\"><code><strong>.slice()<\/strong><\/code><\/h3>\r\n<p>slice adalah metode untuk mengambil irisan dari sebuah array. Metode slice bisa menerima satu atau dua parameter. Parameter pertama adalah nomer index pertama yang akan kita ambil sebagai irisan, sedangkan parameter kedua adalah nomer index terakhir yang ingin kita ambil sebagai irisan.<\/p>\r\n<pre class=\"wp-block-preformatted\">var angka = [0, 1, 2, 3]\r\nvar irisan1 = angka.slice(1,3) \r\nconsole.log(irisan1) \/\/[1, 2, 3]\r\nvar irisan2 = angka.slice(0,2)\r\nconsole.log(irisan2) \/\/[0, 1, 2] <\/pre>\r\n<p>Jika parameter kedua tidak diisi maka secara otomatis slice akan mengiris array dari indeks di paramer pertama sampai ke indeks terakhir array tersebut.<\/p>\r\n<pre class=\"wp-block-preformatted\">var angka = [0, 1, 2, 3]\r\nvar irisan3 = angka.slice(2)\r\nconsole.log(irisan3) \/\/ [2, 3] <\/pre>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Jika diperhatikan, metode slice tidak mengubah Array yang awal dan hasil irisan array dapat kita tampung kembali ke variable yang baru. Oleh karena itu metode Slice juga berfungsi untuk membuat salinan atau &ldquo;shallow copy&rdquo; dari sebuah array. Cara membuat shallow copy dengan metode slice yaitu dengan tanpa memberikan parameter apapun pada metode slice.<\/p>\r\n<pre class=\"wp-block-preformatted\"><code>var angka = [0, 1, 2, 3]<\/code><br \/><code>var salinAngka = angka.slice()<\/code><br \/><code>console.log(salingAngka) \/\/ [0, 1, 2, 3]<\/code><\/pre>\r\n<\/blockquote>\r\n<h3 id=\"splice\"><code><strong>.splice()<\/strong><\/code><\/h3>\r\n<p>Splice yaitu metode untuk menghapus dan\/atau menambahkan nilai elemen pada array. Metode splice bisa menerima parameter sebanyak dua atau lebih parameter. Jika ingin menggunakan splice untuk menghapus elemen pada index tertentu maka digunakan 2 paramater. Jika ingin menggunakan splice untuk menambahkan elemen pada index tertentu maka digunakan tiga parameter.<\/p>\r\n<pre class=\"wp-block-preformatted\">array.splice([IndexMulai], [JumlahNilaiYangDihapus], [NilaiYangDitambahkan1], [NilaiYangDitambahkan2], ...);<\/pre>\r\n<p>Berikut contoh penggunaan metode&nbsp;<code>splice()<\/code><\/p>\r\n<pre class=\"wp-block-preformatted\">var fruits = [ \"banana\", \"orange\", \"grape\"]\r\nfruits.splice(1, 0, \"watermelon\") \r\nconsole.log(fruits) \/\/ [ \"banana\", \"watermelon\", \"orange\", \"grape\"]<\/pre>\r\n<p>Contoh di atas berarti kita mulai mengubah array fruits dari indeks no 1, dan melakukan penghapusan nilai sebanyak 0 (yang berarti tidak menghapus apapun), dan menambahkan nilai &ldquo;watermelon&rdquo; pada indeks tersebut.<\/p>\r\n<pre class=\"wp-block-preformatted\">var fruits = [ \"banana\", \"orange\", \"grape\"]\r\nfruits.splice(0, 2)\r\nconsole.log(fruits) \/\/ [\"grape\"]<\/pre>\r\n<p>Contoh di atas berarti kita mulai mengubah array fruits dari indeks ke-0 dan melakukan penghapusan data sebanyak 2 elemen.<\/p>\r\n<h3 id=\"split-dan-join\"><code><strong>.split()<\/strong><\/code>&nbsp;dan&nbsp;<code><strong>.join()<\/strong><\/code><\/h3>\r\n<p>Metode split yaitu memecah sebuah string sehingga menjadi sebuah array. Split menerima sebuah parameter berupa karakter yang menjadi separator untuk memecah string.<\/p>\r\n<pre class=\"wp-block-preformatted\">var biodata = \"name:john,doe\" \r\nvar name = biodata.split(\":\")\r\nconsole.log(name) \/\/ [ \"name\", \"john,doe\"] <\/pre>\r\n<p>Metode join yaitu kebalikan dari split yaitu mengubah sebuah array menjadi string dengan cara menggabungkan (join) seluruh elemen array menjadi satu dengan sebuah karakter pemisah yang dikirim melalui parameter. contohnya sebagai berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">var title = [\"my\", \"first\", \"experience\", \"as\", \"programmer\"] \r\nvar slug = title.join(\"-\")\r\nconsole.log(slug) \/\/ \"my-first-experience-as-programmer\"<\/pre>\r\n<p><strong>Referensi<\/strong>:<\/p>\r\n<ul>\r\n<li><a href=\"https:\/\/www.w3schools.com\/js\/js_arrays.asp\">https:\/\/www.w3schools.com\/js\/js_arrays.asp<\/a><\/li>\r\n<li><a href=\"https:\/\/www.w3schools.com\/js\/js_array_methods.asp\">https:\/\/www.w3schools.com\/js\/js_array_methods.asp<\/a><\/li>\r\n<li><a href=\"https:\/\/www.w3schools.com\/js\/js_array_sort.asp\">https:\/\/www.w3schools.com\/js\/js_array_sort.asp<\/a><\/li>\r\n<\/ul>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-04-29 08:00:00","status_publish":"publish","urutan":8,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:28:55","waktu_publish_formatted":" Kamis, 29 April 2021. 08:00:00 WIB."},{"id":765,"uuid":"364d6ba9-7f61-4317-b91b-3d87e1500fd1","author_user_id":4336,"materi_section_id":211,"judul":"Hari Ke-5 \u2013 Javascript \u2013 Function","permalink":"hari-ke-5-javascript-function","konten":"<p>Function adalah sebuah blok kode yang disusun sedemikian rupa untuk menjalankan sebuah tindakan. Blok kode ini dibuat untuk dapat bisa digunakan kembali. Cara atau bentuk penulisan function adalah sebagai berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">function nama_function(parameter 1, parameter 2, ...) {\r\n  [Isi dari function berupa tindakan]\r\n  return [expression];\r\n}<\/pre>\r\n<p>Kode di atas tidak dapat kita copy-paste kan langsung, melainkan hanya sebuah bentuk penulisan&nbsp;<code>function<\/code>. Sebuah&nbsp;<code>function<\/code>, umumnya melakukan tindakan dan sebelum&nbsp;<code>function<\/code>&nbsp;berakhir,&nbsp;<code>function<\/code>&nbsp;bisa mengembalikan nilai dengan cara menambahkan sintaks return.<\/p>\r\n<p>Kita juga dapat mengirimkan nilai ke dalam sebuah&nbsp;<code>function<\/code>&nbsp;dengan mencantumkannya ke dalam tanda kurung dalam penulisan&nbsp;<code>function<\/code>. Untuk mengirimkan nilai lebih dari satu, gunakan tanda&nbsp;<code>,<\/code>&nbsp;sebagai pemisah.<\/p>\r\n<p><strong>Contoh Function 1:<\/strong>&nbsp;Function sederhana tanpa return<\/p>\r\n<pre class=\"wp-block-preformatted\">function tampilkan() {\r\n  console.log(\"halo!\");\r\n}\r\n \r\ntampilkan(); <\/pre>\r\n<p><strong>Contoh Function 2:<\/strong>&nbsp;Function sederhana dengan return<\/p>\r\n<pre class=\"wp-block-preformatted\">function munculkanAngkaDua() {\r\n  return 2\r\n}\r\n \r\nvar tampung = munculkanAngkaDua();\r\nconsole.log(tampung)<\/pre>\r\n<p><strong>Contoh Function 3:<\/strong>&nbsp;Function dengan parameter<\/p>\r\n<pre class=\"wp-block-preformatted\">function kalikanDua(angka) {\r\n  return angka * 2\r\n}\r\n \r\nvar tampung = kalikanDua(2);\r\nconsole.log(tampung) <\/pre>\r\n<p><strong>Contoh Function 4:<\/strong>&nbsp;Pengiriman parameter lebih dari satu<\/p>\r\n<pre class=\"wp-block-preformatted\">function tampilkanAngka(angkaPertama, angkaKedua) {\r\n  return angkaPertama + angkaKedua\r\n}\r\n \r\nconsole.log(tampilkanAngka(5, 3))<\/pre>\r\n<p><strong>Contoh Function 5:<\/strong>&nbsp;Inisialisasi parameter dengan nilai default<\/p>\r\n<pre class=\"wp-block-preformatted\">function tampilkanAngka(angka = 1) {\r\n  return angka\r\n}\r\n \r\nconsole.log(tampilkanAngka(5)) \/\/ 5, sesuai dengan nilai parameter yang dikirim\r\nconsole.log(tampilkanAngka()) \/\/ 1, karena default dari parameter adalah 1<\/pre>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Waspadai pengiriman parameter yang&nbsp;<strong>UNDEFINED!<\/strong><\/p>\r\n<\/blockquote>\r\n<p>Kita juga dapat menampung function sebagai variable dengan sebuah bentuk function yang dinamakan Anonymous Function.<\/p>\r\n<pre class=\"wp-block-preformatted\">var fungsiPerkalian = function(angkaPertama, angkaKedua) {   \r\n   return angkaPertama * angkaKedua \r\n}\r\nconsole.log(fungsiPerkalian(2, 4))<\/pre>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Sumber:&nbsp;<a href=\"https:\/\/github.com\/hacktiv8\/phase-0-activities\/blob\/master\/modules\/js-first-time.md#loopiteration\" target=\"_blank\" rel=\"noreferrer noopener\">github hacktiv8 phase 0 materials<\/a><\/p>\r\n<\/blockquote>","waktu_publish":"2021-04-30 08:00:00","status_publish":"publish","urutan":9,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:28:37","waktu_publish_formatted":" Jumat, 30 April 2021. 08:00:00 WIB."},{"id":766,"uuid":"ca1e3fce-e6a4-4e91-8736-871098abff83","author_user_id":4336,"materi_section_id":211,"judul":"Hari Ke-5 \u2013 Javascript \u2013 Object","permalink":"hari-ke-5-javascript-object","konten":"<blockquote class=\"wp-block-quote\">\r\n<p>Mempelajari tipe data Object pada Javascript<\/p>\r\n<\/blockquote>\r\n<p>Object adalah kumpulan data tidak berurut yang berisikan pasangan property (key) dan value . Jika kita ingat pada tipe data Array yang merupakan kumpulan data yang berurut sesuai indeks, sedangkan Object mirip dengan Array tapi kini kita memberikan property atau key sendiri .<br \/>Property atau key pada Object itu dapat kita umpamakan indeks pada Array. Bedanya indeks pada Array langsung diberikan secara otomatis mulai dari indeks 0 dst, sedangkan property pada Object dapat kita namai sesuka kita.<\/p>\r\n<p>Bandingkan kedua variable berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">var personArr = [\"John\", \"Doe\", \"male\", 27]\r\nvar personObj = {\r\n    firstName : \"John\",\r\n    lastName: \"Doe\",\r\n    gender: \"male\",\r\n    age: 27\r\n} <\/pre>\r\n<p>contoh di atas kita ingin mendeklarasikan variable person dalam Array dan Object. Jika pada Array kita mengakses nama depan dengan cara&nbsp;<code>personArr[0]<\/code>&nbsp;, sedangkan jika kita ingin mengakses nama depan pada Object kita dapat melakukannya dengan&nbsp;<code>personObj.firstName<\/code>&nbsp;. Keduanya memberikan value yang sama namun pemanggilan value dengan cara Object lebih kita senangi karena kita bisa mendefinisikan bahwa seseorang &ldquo;Person&rdquo; itu pasti memiliki nama depan (<code>firstName<\/code>), nama belakang (<code>lastName<\/code>), (<code>gender<\/code>), dan umur (<code>age<\/code>).<\/p>\r\n<pre class=\"wp-block-preformatted\">var personArr = [\"John\", \"Doe\", \"male\", 27]\r\nvar personObj = {\r\n    firstName : \"John\",\r\n    lastName: \"Doe\",\r\n    gender: \"male\",\r\n    age: 27\r\n}\r\n \r\nconsole.log(personArr[0]) \/\/ John\r\nconsole.log(personObj.firstName) \/\/ John <\/pre>\r\n<h2 id=\"deklarasi-object\"><strong>Deklarasi Object&nbsp;<\/strong><\/h2>\r\n<p>Cara untuk mendeklarasi sebuah object yaitu dengan memberikan curly brackets (<code>{}<\/code>) lalu buat pasangan&nbsp;<code>key: value<\/code>&nbsp;di dalamnya. Jika ingin menambahkan pasangan key dan value maka dipisah dengan tanda koma. contohnya:<\/p>\r\n<pre class=\"wp-block-preformatted\">var object = {\r\n    [key]: [value]\r\n}\r\n \r\nvar car = {\r\n    brand: \"Ferrari\",\r\n    type: \"Sports Car\",\r\n    price: 50000000\r\n    \"horse power\": 986\r\n}<\/pre>\r\n<p>Jika diperhatikan pada contoh object&nbsp;<code>car<\/code>&nbsp;di atas terdapat key dengan nama &ldquo;<code>horse power<\/code>&rdquo; yang penulisannya berbeda dengan key yang lain. Hal ini karena jika nama key dari Object lebih dari satu kata atau dipisah dengan spasi kita bisa deklarasikan dengan memberikan tanda petik (<code>\"\"<\/code>).<\/p>\r\n<p>Cara lainnya untuk membuat object adalah dengan mendeklarasikan terlebih dahulu variable sebagai Object kosong lalu melakukan assign property dan valuenya ke varible tersebut. Contohnya sebagai berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">var car2 = {}\r\n\/\/ meng-assign key:value dari object car2\r\ncar2.brand = \"Lamborghini\"\r\ncar2.brand = \"Sports Car\"\r\ncar2.price = 100000000 <\/pre>\r\n<p>Jika ingin memberikan nama key yang lebih dari satu kata dan dipisah dengan spasi maka kita dapat menulis key nya dengan menggunakan tanda petik (<code>\"\"<\/code>) di dalam kurung siku (<code>[]<\/code>).<\/p>\r\n<pre class=\"wp-block-preformatted\">car2[\"horse power\"] = 730 <\/pre>\r\n<p>Value yang kita assign pada object tidak terbatas hanya string atau number saja tapi bisa juga Array, boolean, bahkan Object lagi di dalamnya.<\/p>\r\n<h2 id=\"mengakses-nilai-pada-object\"><strong>Mengakses Nilai pada Object<\/strong><\/h2>\r\n<p>Untuk mengakses nilai pada Object bisa dengan cara memanggil object nya lalu tanda titik (dot) dan nama property\/key nya. contohnya seperti berikut<\/p>\r\n<pre class=\"wp-block-preformatted\">var motorcycle1 = {    \r\n    brand: \"Handa\",\r\n    type: \"CUB\",\r\n    price: 1000\r\n}\r\nconsole.log(motorcycle1.brand) \/\/ \"Handa\"\r\nconsole.log(motorcycle1.type) \/\/ \"CUB\"<\/pre>\r\n<p>Cara lain untuk mengakses nilai, yaitu cara yang mirip dengan mengakses nilai suatu elemen pada Array, menggunakan tanda kurung siku, dan di dalam kurung siku tersebut kita sebutkan nama property nya.<\/p>\r\n<pre class=\"wp-block-preformatted\">console.log(motorcycle1[\"price\"])<\/pre>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Tipe data Array technically adalah sebuah Object tetapi Array memiliki sifat khusus. Array secara otomatis memberikan indeks yang analogi dengan key pada Object. Coba kamu cek di console menggunakan&nbsp;<code>typeof<\/code><\/p>\r\n<pre class=\"wp-block-preformatted\"><code>var array = [ 1, 2, 3 ] <br \/>console.log(typeof array) \/\/ object<\/code><\/pre>\r\n<\/blockquote>\r\n<h2 id=\"array-of-object\">Array of Object<\/h2>\r\n<p>object bisa termasuk dalam tipe data yang berarti dapat di masukkan ke dalam array, seperti contoh di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>var mobil = [{merk: \"BMW\", warna: \"merah\", tipe: \"sedan\"}, {merk: \"toyota\", warna: \"hitam\", tipe: \"box\"}, {merk: \"audi\", warna: \"biru\", tipe: \"sedan\"}]<\/code><\/pre>\r\n<h2 id=\"array-iteration\"><strong>Array Iteration<\/strong><\/h2>\r\n<p>array iteration merupakan method dalam array untuk melakukan perulangan data dari array, method array iteration ada banyak tapi untuk basic kita hanya perlu menggunakan 3 method ini yaitu forEach(), map() dan filter()<\/p>\r\n<h4>.foreach()<\/h4>\r\n<p>foreach method untuk array berfungsi untuk perulangan data dari array, misal kita punya array seperti di bawah ini:<\/p>\r\n<pre class=\"wp-block-code\"><code>var mobil = [{merk: \"BMW\", warna: \"merah\", tipe: \"sedan\"}, {merk: \"toyota\", warna: \"hitam\", tipe: \"box\"}, {merk: \"audi\", warna: \"biru\", tipe: \"sedan\"}]<\/code><\/pre>\r\n<p>lalu kita gunakan foreach seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>mobil.forEach(function(item){\r\n   console.log(\"warna : \" + item.warna)\r\n})<\/code><\/pre>\r\n<p>maka akan muncul tampilan seperti di bawah ini<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-9872\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-59.png\" alt=\"\" width=\"172\" height=\"98\" \/><\/figure>\r\n<h4>.map()<\/h4>\r\n<p>map method untuk array berfungsi untuk membuat array baru. misal dengan var mobil diatas kita buat kode seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>var arrayWarna = mobil.map(function(item){\r\n   return item.warna\r\n})\r\n\r\nconsole.log(arrayWarna)<\/code><\/pre>\r\n<p>maka akan muncul tampilan seperti di bawah ini:<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-9873\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-60.png\" alt=\"\" width=\"284\" height=\"52\" \/><\/figure>\r\n<h4>.filter()<\/h4>\r\n<p>filter method untuk array berfungsi untuk memnyaring data yang diinginkan. misal dengan var mobil diatas kita buat kode seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>var arrayMobilFilter = mobil.filter(function(item){\r\n   return item.tipe != \"sedan\";\r\n})\r\n\r\nconsole.log(arrayMobilFilter)<\/code><\/pre>\r\n<p>maka akan muncul tampilan seperti di bawah ini:<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-9874\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-61.png\" alt=\"\" width=\"169\" height=\"131\" \/><\/figure>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-04-30 08:00:00","status_publish":"publish","urutan":10,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:28:20","waktu_publish_formatted":" Jumat, 30 April 2021. 08:00:00 WIB."}]},{"id":212,"uuid":"2054faaa-0e04-4fa8-b0af-b5324684d528","materi_id":25,"nama":"Pekan 1 \u2013 Tugas","permalink":"pekan-1-tugas","urutan":3,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":null,"posting":[{"id":767,"uuid":"9a64c641-99ce-4108-be12-68306030925d","author_user_id":4336,"materi_section_id":212,"judul":"Tugas 1 \u2013 Git","permalink":"tugas-1-git","konten":"<h2 id=\"petunjuk-pengerjaan\"><strong>Petunjuk Pengerjaan<\/strong><\/h2>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<h2 id=\"1-buat-repository-project-baru\"><strong>1. Buat repository project baru<\/strong><\/h2>\r\n<p>Buatlah satu repository project baru dengan nama project &ldquo;<strong>IM Sanbercode Reactjs Batch 24<\/strong>&ldquo;, pastikan visibility level di set &ldquo;<strong>Private<\/strong>&ldquo;, dan centang pada bagian &ldquo;<strong>Initialize repository with a README<\/strong>&ldquo;.<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-13799\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/12\/image-1024x485.png\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/12\/image-1024x485.png 1024w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/12\/image-300x142.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/12\/image-768x364.png 768w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/12\/image.png 1193w\" alt=\"\" width=\"90%\" \/><\/figure>\r\n<h2 id=\"2-buat-branch-baru\"><strong>2. invite trainer<\/strong><\/h2>\r\n<p>invite trainer pada repository project yang telah di buat dengan menuju menu members<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-13800\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/12\/image-1.png\" sizes=\"(max-width: 1021px) 100vw, 1021px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/12\/image-1.png 1021w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/12\/image-1-300x109.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/12\/image-1-768x280.png 768w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/12\/image-1-683x250.png 683w\" alt=\"\" width=\"90%\" \/><\/figure>\r\n<p>lalu pada tab invite member isi input &ldquo;<strong>GitLab member or Email address<\/strong>&rdquo; dengan&nbsp;<strong>@abdul110<\/strong>&nbsp;lalu pada choose &ldquo;<strong>Choose a Role Permission<\/strong>&rdquo; pilih <strong>maintainer<\/strong> dan klik <strong>invite<\/strong><\/p>\r\n<p>untuk&nbsp;<strong>github&nbsp;<\/strong>bisa di sesuaikan dan invite&nbsp;<strong>abdulalim110<\/strong>&nbsp;sebagai <strong>collaborator<\/strong><\/p>\r\n<h2 id=\"2-buat-branch-baru\"><strong>3. Clone repository<\/strong><\/h2>\r\n<p>Lakukanlah clone dari project yang telah dibuat. Kemudian masuk ke folder project yang telah di clone<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-13802\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/12\/image-2.png\" sizes=\"(max-width: 1012px) 100vw, 1012px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/12\/image-2.png 1012w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/12\/image-2-300x146.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/12\/image-2-768x375.png 768w\" alt=\"\" width=\"90%\" \/><\/figure>\r\n<p>lalu copy text yang ada di dalam Clone With HTTPS lalu jalankan perintah ini di terminal\/cmd pada komputer\/laptop anda<\/p>\r\n<pre class=\"wp-block-code\"><code>git clone <strong>hasil_copy_dari_clone_with_https<\/strong><\/code><\/pre>\r\n<p>lalu pindahkan ke folder project yang sudah di clone<\/p>\r\n<h2 id=\"3-menambahkan-file-baru\"><strong>4. Menambahkan folder dan file baru<\/strong><\/h2>\r\n<p>Buat folder baru dengan nama &ldquo;Tugas-Harian-Part-1&rdquo; dan di dalamnya tambahkan folder baru lagi dengan nama &ldquo;Tugas-1&rdquo; lalu tambahkan file &ldquo;data_peserta.txt&rdquo;. kurang lebih struktur foldernya seperti ini<\/p>\r\n<pre class=\"wp-block-code\"><code>im-sanbercode-reactjs-batch-24\/\r\n  Tugas-Harian-Part-1\/\r\n    Tugas-1\/\r\n      data_peserta.txt<\/code><\/pre>\r\n<p>Isi file &ldquo;data_peserta.txt&rdquo; tersebut dengan nama dan email Anda saat mendaftar, akun gitlab, serta akun telegram pada grup diskusi, contoh:<\/p>\r\n<pre class=\"wp-block-preformatted\">Data Peserta Sanbercode Bootcamp ReactJS\r\n1. Nama: \r\n2. Email: \r\n3. Sistem Operasi yang digunakan:\r\n4. Akun Gitlab\/Github: \r\n5. Akun Telegram: <\/pre>\r\n<h2 id=\"5-kumpulkan-tugas\"><strong>5. Kumpulkan tugas<\/strong><\/h2>\r\n<p>Lalu update tugasnya ke repository masing-masing. Selanjutnya kumpulkan tugas Anda dengan melakukan copy link commit yang telah dibuat dari halaman repository project gitlab ke akun Anda di <a href=\"\/\">https:\/\/sanbercode.com\/<\/a>&nbsp;.<\/p>\r\n<p>Untuk selengkapnya, teknis pengumpulan tugas dapat di lihat di tab materi -&gt; lalu klik pendahuluan -&gt; lalu klik teknis pengumpulan<\/p>\r\n<h3 id=\"tambahan\"><strong>tambahan<\/strong><\/h3>\r\n<p>bagi yang ingin mengerjakan selain di&nbsp;<strong>gitlab<\/strong>, di persilahkan menggunakan&nbsp;<strong>github<\/strong><\/p>\r\n<p>&nbsp;<\/p>\r\n<p><\/p>","waktu_publish":"2021-04-26 08:00:00","status_publish":"publish","urutan":1,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-26 08:55:45","waktu_publish_formatted":" Senin, 26 April 2021. 08:00:00 WIB."},{"id":768,"uuid":"a47198b0-5249-4352-88a0-191c7cd7ccd1","author_user_id":4336,"materi_section_id":212,"judul":"Tugas 2 \u2013 HTML & CSS","permalink":"tugas-2-html-css","konten":"<div class=\"entry-content\">\r\n<h2 id=\"petunjuk-pengerjaan\"><strong>Petunjuk Pengerjaan<\/strong><\/h2>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<h3 id=\"1-menambahkan-folder-baru\"><strong>1. Menambahkan Folder Baru<\/strong><\/h3>\r\n<p>Gunakanlah project yang sama dengan Tugas-1 (<strong>jangan buat repository baru lagi<\/strong>). Lalu buatlah folder baru didalam folder &ldquo;Tugas-Harian-Part-1&rdquo; dengan nama &ldquo;Tugas-2&rdquo;, lalu file yang dibuat di bawah di masukan ke folder tersebut<\/p>\r\n<h3 id=\"1-membuat-file-html\"><strong>2. Membuat File HTML<\/strong><\/h3>\r\n<h4><strong>a.<\/strong>&nbsp;<strong>membuat file index.html<\/strong><\/h4>\r\n<p>Buatlah sebuah file HTML bernama index.html. Gunakan code yang sudah disediakan di bawah ini:<\/p>\r\n<pre class=\"wp-block-code\"><code>&lt;html&gt;\r\n  &lt;head&gt;\r\n    &lt;link href=\"public\/css\/style.css\" rel=\"stylesheet\" \/&gt;\r\n    &lt;link href=\"https:\/\/fonts.googleapis.com\/css?family=Slabo+27px\" rel=\"stylesheet\"&gt;\r\n  &lt;\/head&gt;\r\n  &lt;body&gt;\r\n    &lt;header&gt;\r\n      &lt;img id=\"logo\" src=\"public\/css\/logo.png\" width=\"200px\" \/&gt;\r\n      &lt;nav&gt;\r\n        &lt;ul&gt;\r\n          &lt;a href=\"index.html\"&gt;&lt;li&gt;Home&lt;\/li&gt;&lt;\/a&gt;\r\n          &lt;a href=\"about.html\"&gt;&lt;li&gt;About&lt;\/li&gt;&lt;\/a&gt;\r\n          &lt;a href=\"contact.html\"&gt;&lt;li&gt;Contact&lt;\/li&gt;&lt;\/a&gt;\r\n        &lt;\/ul&gt;\r\n      &lt;\/nav&gt;\r\n    &lt;\/header&gt;\r\n    &lt;section&gt;\r\n      &lt;h1&gt;Featured Posts&lt;\/h1&gt;\r\n      &lt;div id=\"article-list\"&gt;\r\n        &lt;div&gt;\r\n          &lt;a href=\"\"&gt;&lt;h3&gt;Lorem Post 1&lt;\/h3&gt;&lt;\/a&gt;\r\n          &lt;p&gt;\r\n            Lorem Ipsum Dolor Sit Amet, mea te verear signiferumque, per illum labores ne. Blandit omnesque scripserit pri ex, et pri dicant eirmod deserunt. Aeque perpetua ea nec. Sit erant patrioque delicatissimi ut. Et sea quem sint, nam in minim voluptatibus. Etiam placerat eam in.\r\n          &lt;\/p&gt;\r\n        &lt;\/div&gt;\r\n        &lt;div&gt;\r\n          &lt;a href=\"\"&gt;&lt;h3&gt;Lorem Post 2&lt;\/h3&gt;&lt;\/a&gt;\r\n          &lt;p&gt;\r\n            Lorem Ipsum Dolor Sit Amet, mea te verear signiferumque, per illum labores ne. Blandit omnesque scripserit pri ex, et pri dicant eirmod deserunt. Aeque perpetua ea nec. Sit erant patrioque delicatissimi ut. Et sea quem sint, nam in minim voluptatibus. Etiam placerat eam in.\r\n          &lt;\/p&gt;\r\n        &lt;\/div&gt;\r\n        &lt;div&gt;\r\n          &lt;a href=\"\"&gt;&lt;h3&gt;Lorem Post 3&lt;\/h3&gt;&lt;\/a&gt;\r\n          &lt;p&gt;\r\n            Lorem Ipsum Dolor Sit Amet, mea te verear signiferumque, per illum labores ne. Blandit omnesque scripserit pri ex, et pri dicant eirmod deserunt. Aeque perpetua ea nec. Sit erant patrioque delicatissimi ut. Et sea quem sint, nam in minim voluptatibus. Etiam placerat eam in.\r\n          &lt;\/p&gt;\r\n        &lt;\/div&gt;\r\n        &lt;div&gt;\r\n          &lt;a href=\"\"&gt;&lt;h3&gt;Lorem Post 4&lt;\/h3&gt;&lt;\/a&gt;\r\n          &lt;p&gt;\r\n            Lorem Ipsum Dolor Sit Amet, mea te verear signiferumque, per illum labores ne. Blandit omnesque scripserit pri ex, et pri dicant eirmod deserunt. Aeque perpetua ea nec. Sit erant patrioque delicatissimi ut. Et sea quem sint, nam in minim voluptatibus. Etiam placerat eam in.\r\n          &lt;\/p&gt;\r\n        &lt;\/div&gt;\r\n        &lt;div&gt;\r\n          &lt;a href=\"\"&gt;&lt;h3&gt;Lorem Post 5&lt;\/h3&gt;&lt;\/a&gt;\r\n          &lt;p&gt;\r\n            Lorem Ipsum Dolor Sit Amet, mea te verear signiferumque, per illum labores ne. Blandit omnesque scripserit pri ex, et pri dicant eirmod deserunt. Aeque perpetua ea nec. Sit erant patrioque delicatissimi ut. Et sea quem sint, nam in minim voluptatibus. Etiam placerat eam in.\r\n          &lt;\/p&gt;\r\n        &lt;\/div&gt;\r\n      &lt;\/div&gt;\r\n    &lt;\/section&gt;\r\n    &lt;footer&gt;\r\n      &lt;h5&gt;copyright &amp;copy; 2020 by Sanbercode&lt;\/h5&gt;\r\n    &lt;\/footer&gt;\r\n  &lt;\/body&gt;\r\n&lt;\/html&gt;<\/code><\/pre>\r\n<h4><strong>b.<\/strong>&nbsp;<strong>membuat file about.html<\/strong><\/h4>\r\n<p>buatlah file about.html dengan tampilan seperti ini<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-14002\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/01\/image.png\" sizes=\"(max-width: 804px) 100vw, 804px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/01\/image.png 804w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/01\/image-300x80.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/01\/image-768x204.png 768w\" alt=\"\" width=\"804\" height=\"214\" \/><\/figure>\r\n<p>lalu tambahkan tag di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>&lt;a href=\"index.html\"&gt;Kembali Ke Index&lt;\/a&gt;<\/code><\/pre>\r\n<h4><strong>c.<\/strong>&nbsp;<strong>membuat file contact.html<\/strong><\/h4>\r\n<p>buatlah file contact.html dengan tampilan seperti ini<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-6782\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-41.png\" sizes=\"(max-width: 847px) 100vw, 847px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-41.png 847w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-41-300x173.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-41-768x442.png 768w\" alt=\"\" width=\"847\" height=\"488\" \/><\/figure>\r\n<p>lalu tambahkan tag di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>&lt;a href=\"index.html\"&gt;Kembali Ke Index&lt;\/a&gt;<\/code><\/pre>\r\n<h3 id=\"2-buat-file-css\"><strong>3. Buat File CSS<\/strong><\/h3>\r\n<p>Buatlah file CSS di dalam folder bernama &lsquo;css&rsquo;. folder &lsquo;css&rsquo; tersebut berada di dalam folder public. kemudian hubungkan pada file index.html dengan cara menambahkannya di header<\/p>\r\n<pre class=\"wp-block-preformatted\">&lt;link href=\"public\/css\/style.css\" rel=\"stylesheet\" type=\"text\/css\"&gt;<\/pre>\r\n<h3 id=\"3-menyiapkan-asset-gambar\"><strong>4. Menyiapkan Asset Gambar<\/strong><\/h3>\r\n<p>Buatlah folder di dalam folder public dengan nama img dimana kita akan meletakkan gambar kita di sana. Sehingga nantinya pengambilan alamat dari gambar di folder :&nbsp;<code>public\/img\/logo.png<\/code>&nbsp;. Aset gambar bisa kamu download dari file di bawah ini. Download logo dengan nama&nbsp;<code>logo.png<\/code>&nbsp;dan gambar pola sebagai&nbsp;<code>pattern.png<\/code><\/p>\r\n<div class=\"wp-block-image\">\r\n<figure class=\"aligncenter\"><img src=\"https:\/\/gblobscdn.gitbook.com\/assets%2F-LiR2ZMOIaxmhLlPQhLa%2F-LsKO0ePPOrb2KQEd7Gq%2F-LsKOmfnPPoDiqmDH44r%2Flogo.png?alt=media&amp;token=b613bed4-5936-4f6b-aec4-aed6c214f630\" alt=\"\" \/>\r\n<figcaption>logo.png<\/figcaption>\r\n<\/figure>\r\n<\/div>\r\n<div class=\"wp-block-image\">\r\n<figure class=\"aligncenter\"><img src=\"https:\/\/gblobscdn.gitbook.com\/assets%2F-LiR2ZMOIaxmhLlPQhLa%2F-LsKO0ePPOrb2KQEd7Gq%2F-LsKOnZbYN8Zs5H89ODH%2Fpattern.jpg?alt=media&amp;token=27a7b746-8252-45a5-8df2-b1b68fb8ceae\" alt=\"\" \/>\r\n<figcaption>pattern.png<\/figcaption>\r\n<\/figure>\r\n<\/div>\r\n<p>&zwnj;<\/p>\r\n<p>keterangan: logo sanbercode untuk logo yang akan ditampilkan. sedangkan gambar pola yang di bawahnya adalah gambar yang dijadikan background. &zwnj;<\/p>\r\n<h3 id=\"4-membuat-layout-html-css\"><strong>5. Membuat Layout HTML + CSS<\/strong><\/h3>\r\n<p>Buatlah halaman web dengan layout seperti di bawah ini di file index.html:<\/p>\r\n<p><img class=\"wp-image-14005\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/01\/image-1-1024x494.png\" sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/01\/image-1-1024x494.png 1024w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/01\/image-1-300x145.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/01\/image-1-768x370.png 768w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/01\/image-1.png 1344w\" alt=\"\" width=\"100%\" \/><\/p>\r\n<p><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/01\/preview-tugas-html-css.gif\" width=\"100%\" \/><\/p>\r\n<p>File-file gambar:<\/p>\r\n<ul>\r\n<li>logo sanbercode :&nbsp;<a href=\"https:\/\/drive.google.com\/file\/d\/1125xkTSNko19q8wbksvKbj4s7ybIwmHO\/view?usp=sharing\">download<\/a><\/li>\r\n<li>background pattern:&nbsp;<a href=\"https:\/\/drive.google.com\/file\/d\/1aMMIlxYxOcWUDW5JwoSp31fW0A73-Y5D\/view?usp=sharing\">download<\/a><\/li>\r\n<li>simulasi output gif:&nbsp;<a href=\"https:\/\/drive.google.com\/file\/d\/17Cl5vISGOwWqjcDsJmJqQBiHxGoJ_GWB\/view?usp=sharing\">download<\/a><\/li>\r\n<\/ul>\r\n<h3 id=\"4-membuat-layout-html-css\"><strong>6. Kumpulkan Tugas<\/strong><\/h3>\r\n<p>Lalu update tugasnya ke repository masing-masing. Selanjutnya kumpulkan tugas Anda dengan melakukan copy link commit yang telah dibuat dari halaman repository project gitlab\/github ke akun Anda di <a href=\"\/\">https:\/\/sanbercode.com\/<\/a>&nbsp;.<\/p>\r\n<p>Untuk selengkapnya, teknis pengumpulan tugas dapat di lihat di tab materi -&gt; lalu klik pendahuluan -&gt; lalu klik teknis pengumpulan<\/p>\r\n<h3 id=\"4-membuat-layout-html-css\"><strong>Tambahan<\/strong><\/h3>\r\n<p>Pada tugas ini <strong>tidak di perbolehkan<\/strong> menggunakan <strong>bootstrap dan sejenisnya<\/strong><\/p>\r\n<\/div>","waktu_publish":"2021-04-27 08:00:00","status_publish":"publish","urutan":2,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:25:47","waktu_publish_formatted":" Selasa, 27 April 2021. 08:00:00 WIB."},{"id":769,"uuid":"5ae080b9-beee-4532-a8fe-4f8f16e2de7b","author_user_id":4336,"materi_section_id":212,"judul":"Tugas 3 \u2013 Javascript \u2013 Intro & Conditional","permalink":"tugas-3-javascript-intro-conditional","konten":"<div class=\"entry-content\">\r\n<h2 id=\"petunjuk-pengerjaan\"><strong>Petunjuk Pengerjaan<\/strong><\/h2>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<h3 id=\"1-menambahkan-folder-baru-dan-file-baru\"><strong>1. Menambahkan Folder Baru dan file baru<\/strong><\/h3>\r\n<p>Gunakanlah project yang sama dengan Tugas-1 (<strong>jangan buat repository baru lagi<\/strong>). Lalu buatlah folder baru didalam folder &ldquo;Tugas-Harian-Part-1&rdquo; dengan nama &ldquo;Tugas-3&rdquo;, lalu buat file baru di dalam folder tersebut dengan nama &ldquo;tugas3.js&rdquo;.<\/p>\r\n<p>sehingga struktur foldernya seperti di bawah ini<br \/><code>  Tugas-Harian-Part-1\/\r\n<br \/>&nbsp; &nbsp;Tugas-1\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-2\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-3\/<\/code><code><\/code><\/p>\r\n<h3 id=\"1-membuat-file-html\"><strong>2. Kerjakan Soal di bawah ini<\/strong><\/h3>\r\n<p>kerjakan soal di bawah ini dan masukkan semua kode jawabannya ke dalam file &ldquo;tugas3.js&rdquo;<\/p>\r\n<p>kerjakan soal ini&nbsp;<strong>tanpa&nbsp;<\/strong>menggunakan <strong>looping<\/strong>, <strong>function <\/strong>dan kode-kode <strong>ES6<\/strong> (bagi yang sudah paham ES6), jadi kerjakan dengan kode-kode sesuai materi<\/p>\r\n<p><strong>soal 1<\/strong><\/p>\r\n<p>buatlah variabel-variabel seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>var kataPertama = \"saya\";\r\nvar kataKedua = \"senang\";\r\nvar kataKetiga = \"belajar\";\r\nvar kataKeempat = \"javascript\";<\/code><\/pre>\r\n<p>gabungkan variabel-variabel tersebut agar menghasilkan output<\/p>\r\n<pre class=\"wp-block-code\"><code>saya Senang belajaR JAVASCRIPT<\/code><\/pre>\r\n<p><strong>soal 2<\/strong><\/p>\r\n<p>buatlah variabel-variabel seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>var panjangPersegiPanjang = \"8\";\r\nvar lebarPersegiPanjang = \"5\";\r\n<br \/>var alasSegitiga= \"6\";\r\nvar tinggiSegitiga = \"7\";<\/code><\/pre>\r\n<p>ubah lah variabel diatas ke dalam integer dan gunakan pada operasi perhitungan dari keliling persegi panjang dan luas segitiga dengan variabel di bawah ini:<\/p>\r\n<p><code>var kelilingPersegiPanjang;<br \/>var luasSegitiga;<\/code><\/p>\r\n<p>lalu tampilkan dengan console.log<\/p>\r\n<p><strong>soal 3<\/strong><\/p>\r\n<p>buatlah variabel-variabel seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>var sentences= 'wah javascript itu keren sekali'; \r\n\r\nvar firstWord= sentences.substring(0, 3); \r\nvar secondWord; \/\/ do your own! \r\nvar thirdWord; \/\/ do your own! \r\nvar fourthWord; \/\/ do your own! \r\nvar fifthWord; \/\/ do your own! \r\n\r\nconsole.log('Kata Pertama: ' + firstWord); \r\nconsole.log('Kata Kedua: ' + secondWord); \r\nconsole.log('Kata Ketiga: ' + thirdWord); \r\nconsole.log('Kata Keempat: ' + fourthWord); \r\nconsole.log('Kata Kelima: ' + fifthWord);<\/code><\/pre>\r\n<p>selesaikan variabel yang belum diisi dan hasilkan output seperti berikut:<\/p>\r\n<pre class=\"wp-block-code\"><code>Kata Pertama: wah\r\nKata Kedua: javascript\r\nKata Ketiga: itu\r\nKata Keempat: keren\r\nKata Kelima: sekali<\/code><\/pre>\r\n<p><strong>soal 4<\/strong><\/p>\r\n<p>buatlah variabel seperti di bawah ini<\/p>\r\n<p><code>var nilaiJohn = 80; <br \/>var nilaiDoe = 50;<\/code><\/p>\r\n<p>tentukan indeks nilai dari <strong>nilaiJohn <\/strong>dan <strong>nilaiDoe <\/strong>(tampilkan dengan console.log) dengan kondisi :<\/p>\r\n<pre class=\"wp-block-code\"><code>nilai &gt;= 80 indeksnya A\r\nnilai &gt;= 70 dan nilai &lt; 80 indeksnya B\r\nnilai &gt;= 60 dan nilai &lt; 70 indeksnya c\r\nnilai &gt;= 50 dan nilai &lt; 60 indeksnya D\r\nnilai &lt; 50 indeksnya E<\/code><\/pre>\r\n<p><strong>soal 5<\/strong><\/p>\r\n<p>buatlah variabel seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>var tanggal = 22;\r\nvar bulan = 7;\r\nvar tahun = 2020;<\/code><\/pre>\r\n<p>ganti tanggal ,bulan, dan tahun sesuai dengan tanggal lahir anda dan buatlah switch case pada bulan, lalu muncul kan string nya dengan output seperti ini 22 Juli 2020 (isi di sesuaikan dengan tanggal lahir masing-masing)<\/p>\r\n<h3 id=\"3-tips\"><strong>3. Tips<\/strong><\/h3>\r\n<p>Agar soal mudah di periksa trainer maka sebelum jawaban soal sisipkan komentar seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ soal 1\r\n.... jawaban soal 1\r\n\r\n\/\/ soal 2\r\n.... jawaban soal 2\r\n\r\ndan seterusnya<\/code><\/pre>\r\n<h3 id=\"4-membuat-layout-html-css\"><strong>4. Kumpulkan Tugas<\/strong><\/h3>\r\n<p>Lalu update tugasnya ke repository masing-masing. Selanjutnya kumpulkan tugas Anda dengan melakukan copy link commit yang telah dibuat dari halaman repository project gitlab\/github ke akun Anda di <a href=\"\/\">https:\/\/sanbercode.com\/<\/a>&nbsp;.<\/p>\r\n<p>Untuk selengkapnya, teknis pengumpulan tugas dapat di lihat di tab materi -&gt; lalu klik pendahuluan -&gt; lalu klik teknis pengumpulan<\/p>\r\n<\/div>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-04-28 08:00:00","status_publish":"publish","urutan":3,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:25:30","waktu_publish_formatted":" Rabu, 28 April 2021. 08:00:00 WIB."},{"id":770,"uuid":"80c65b54-cec1-43cc-b663-3142107556ff","author_user_id":4336,"materi_section_id":212,"judul":"Tugas 4 \u2013 Javascript \u2013 Loop & Array","permalink":"tugas-4-javascript-loop-array","konten":"<div class=\"entry-content\">\r\n<h2 id=\"petunjuk-pengerjaan\"><strong>Petunjuk Pengerjaan<\/strong><\/h2>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<h3 id=\"1-menambahkan-folder-baru-dan-file-baru\"><strong>1. Menambahkan Folder Baru dan file baru<\/strong><\/h3>\r\n<p>Gunakanlah project yang sama dengan Tugas-1 (<strong>jangan buat repository baru lagi<\/strong>). Lalu buatlah folder baru didalam folder &ldquo;Tugas-Harian-Part-1&rdquo; dengan nama &ldquo;Tugas-4&rdquo;, lalu buat file baru di dalam folder tersebut dengan nama &ldquo;tugas4.js&rdquo;.<br \/><br \/>sehingga struktur foldernya seperti di bawah ini<br \/><code>  Tugas-Harian-Part-1\/\r\n<br \/>&nbsp; &nbsp;Tugas-1\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-2\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-3\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-4\/<\/code><\/p>\r\n<h3 id=\"1-membuat-file-html\"><strong>2. Kerjakan Soal di bawah ini<\/strong><\/h3>\r\n<p>kerjakan soal di bawah ini dan masukkan semua kode jawabannya ke dalam file &ldquo;tugas4.js&rdquo;<\/p>\r\n<p>kerjakan soal ini&nbsp;<strong>tanpa&nbsp;<\/strong>menggunakan kode-kode&nbsp;<strong>ES6<\/strong>&nbsp;(bagi yang sudah paham ES6), jadi kerjakan dengan kode-kode sesuai materi<\/p>\r\n<p>output nya hanya menggunakan <strong>console.log&nbsp;<\/strong>atau <strong>console.debug<\/strong>, selain itu tidak di perbolehkan<\/p>\r\n<h4><strong>soal 1<\/strong><\/h4>\r\n<p>Pada tugas ini kamu diminta untuk melakukan looping dalam JavaScript dengan menggunakan syntax&nbsp;<code>while<\/code>. Untuk membuat tantangan ini lebih menarik, kamu juga diminta untuk membuat suatu looping yang menghitung maju dan menghitung mundur. Jangan lupa tampilkan di console juga judul &lsquo;LOOPING PERTAMA&rsquo; dan &lsquo;LOOPING KEDUA&rsquo;.&rdquo;<\/p>\r\n<p>Output:<\/p>\r\n<pre class=\"wp-block-code\"><code>LOOPING PERTAMA\r\n2 - I love coding\r\n4 - I love coding\r\n6 - I love coding\r\n8 - I love coding\r\n10 - I love coding\r\n12 - I love coding\r\n14 - I love coding\r\n16 - I love coding\r\n18 - I love coding\r\n20 - I love coding\r\nLOOPING KEDUA\r\n20 - I will become a frontend developer\r\n18 - I will become a frontend developer                                                                              \r\n16 - I will become a frontend developer\r\n14 - I will become a frontend developer\r\n12 - I will become a frontend developer\r\n10 - I will become a frontend developer\r\n8 - I will become a frontend developer\r\n6 - I will become a frontend developer\r\n4 - I will become a frontend developer\r\n2 - I will become a frontend developer<\/code><\/pre>\r\n<h4><strong>soal 2<\/strong><\/h4>\r\n<p>Pada tugas ini kamu diminta untuk melakukan looping dalam JavaScript dengan menggunakan syntax&nbsp;<code>for<\/code>. Untuk membuat tantangan ini lebih menarik, kamu juga diminta untuk memenuhi syarat tertentu yaitu:<\/p>\r\n<p>SYARAT:<br \/>A. Jika angka ganjil maka tampilkan Santai<br \/>B. Jika angka genap maka tampilkan Berkualitas<br \/>C. Jika angka yang sedang ditampilkan adalah kelipatan 3 DAN angka ganjil maka tampilkan I Love Coding.<\/p>\r\n<p>Output:<\/p>\r\n<pre class=\"wp-block-code\"><code>1 - Santai\r\n2 - Berkualitas\r\n3 - I Love Coding \r\n4 - Berkualitas\r\n5 - Santai\r\n6 - Berkualitas\r\n7 - Santai\r\n8 - Berkualitas\r\n9 - I Love Coding\r\n10 - Berkualitas\r\n11 - Santai\r\n12 - Berkualitas\r\n13 - Santai\r\n14 - Berkualitas\r\n15 - I Love Coding\r\n16 - Berkualitas\r\n17 - Santai\r\n18 - Berkualitas\r\n19 - Santai\r\n20 - Berkualitas<\/code><\/pre>\r\n<h4><strong>soal 3<\/strong><\/h4>\r\n<p>Kali ini kamu diminta untuk menampilkan sebuah segitiga dengan tanda pagar (#) dengan dimensi tinggi 7 dan alas 7. Looping boleh menggunakan syntax apa pun (<code>while<\/code>,&nbsp;<code>for<\/code>,&nbsp;<code>do while<\/code>).<\/p>\r\n<p>Output:<\/p>\r\n<pre class=\"wp-block-code\"><code>#\r\n##\r\n###\r\n####\r\n#####\r\n######\r\n#######<\/code><\/pre>\r\n<h4>soal 4<\/h4>\r\n<p>buatlah variabel seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>var kalimat=[\"aku\", \"saya\", \"sangat\", \"sangat\", \"senang\", \"belajar\", \"javascript\"]<\/code><\/pre>\r\n<p>ubah kalimat diatas menjadi seperti di bawah ini:<\/p>\r\n<p><code>[\"saya\", \"sangat\", \"senang\", \"belajar\", \"javascript\"]<\/code><code><\/code><\/p>\r\n<p>lalu tampilkan dengan output seperti di bawah ini:<\/p>\r\n<p>\"saya sangat senang belajar javascript\"<\/p>\r\n<h4>soal 5<\/h4>\r\n<p>buatlah variabel seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>var sayuran=[]<\/code><\/pre>\r\n<p>perlu di ingat bahwa <strong>deklarasi variabel sayuran<\/strong> diatas di mulai dengan <strong>array kosong<\/strong> dulu&nbsp;<\/p>\r\n<p>tambahkanlah data di bawah ini ke variabel sayuran:<\/p>\r\n<ul>\r\n<li>Kangkung<\/li>\r\n<li>Bayam<\/li>\r\n<li>Buncis<\/li>\r\n<li>Kubis<\/li>\r\n<li>Timun<\/li>\r\n<li>Seledri<\/li>\r\n<li>Tauge<\/li>\r\n<\/ul>\r\n<p>lalu urutkan berdasarkan alfabet dan lalu tampilkan dengan loop dan beri angka di depannya sehingga menghasilkan output seperti ini:<\/p>\r\n<p>1. Bayam<br \/>2. Buncis<br \/>3. Kangkung<br \/>4. Kubis<br \/>5. Seledri<br \/>6. Tauge<br \/>7. Timun<\/p>\r\n<h3 id=\"3-tips\"><strong>3. Tips<\/strong><\/h3>\r\n<p>Agar soal mudah di periksa trainer maka sebelum jawaban soal sisipkan komentar seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ soal 1\r\n.... jawaban soal 1\r\n\r\n\/\/ soal 2\r\n.... jawaban soal 2\r\n\r\ndan seterusnya<br \/><br \/><\/code><\/pre>\r\n<div class=\"entry-content\">\r\n<h3 id=\"4-membuat-layout-html-css\"><strong>4. Kumpulkan Tugas<\/strong><\/h3>\r\n<p>Lalu update tugasnya ke repository masing-masing. Selanjutnya kumpulkan tugas Anda dengan melakukan copy link commit yang telah dibuat dari halaman repository project gitlab\/github ke akun Anda di <a href=\"\/\">https:\/\/sanbercode.com\/<\/a>&nbsp;.<\/p>\r\n<p>Untuk selengkapnya, teknis pengumpulan tugas dapat di lihat di tab materi -&gt; lalu klik pendahuluan -&gt; lalu klik teknis pengumpulan<\/p>\r\n<\/div>\r\n<pre class=\"wp-block-code\"><code><\/code><\/pre>\r\n<p>&nbsp;<\/p>\r\n<pre class=\"wp-block-code\"><code><\/code><\/pre>\r\n<p>&nbsp;<\/p>\r\n<\/div>\r\n<p>&nbsp;<\/p>\r\n<p><\/p>","waktu_publish":"2021-04-29 08:00:00","status_publish":"publish","urutan":4,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-29 08:26:59","waktu_publish_formatted":" Kamis, 29 April 2021. 08:00:00 WIB."},{"id":771,"uuid":"4061739d-ca05-4424-92d2-3ed0ba8223e5","author_user_id":4336,"materi_section_id":212,"judul":"Tugas 5 \u2013 Function & Object","permalink":"tugas-5-function-object","konten":"<div class=\"entry-content\">\r\n<h2 id=\"petunjuk-pengerjaan\"><strong>Petunjuk Pengerjaan<\/strong><\/h2>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<h3 id=\"1-menambahkan-folder-baru-dan-file-baru\"><strong>1. Menambahkan Folder Baru dan file baru<\/strong><\/h3>\r\n<p>Gunakanlah project yang sama dengan Tugas-1 (<strong>jangan buat repository baru lagi<\/strong>). Lalu buatlah folder baru dengan nama &ldquo;Tugas-5&rdquo;, lalu buat file baru di dalam folder tersebut dengan nama &ldquo;tugas5.js&rdquo;.<\/p>\r\n<p>sehingga struktur foldernya seperti di bawah ini<br \/><code>  Tugas-Harian-Part-1\/\r\n<br \/>&nbsp; &nbsp;Tugas-1\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-2\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-3\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-4\/<br \/>&nbsp; &nbsp;Tugas-5\/<\/code><code><\/code><\/p>\r\n<h3 id=\"1-membuat-file-html\"><strong>2. Kerjakan Soal di bawah ini<\/strong><\/h3>\r\n<p>kerjakan soal di bawah ini dan masukkan semua kode jawabannya ke dalam file &ldquo;tugas5.js&rdquo;<br \/><br \/>kerjakan soal ini&nbsp;<strong>tanpa&nbsp;<\/strong>menggunakan kode-kode&nbsp;<strong>ES6<\/strong>&nbsp;(bagi yang sudah paham ES6), jadi kerjakan dengan kode-kode sesuai materi<\/p>\r\n<pre class=\"wp-block-preformatted\">&nbsp;<\/pre>\r\n<h3 id=\"soal-2\"><strong>soal 1<\/strong><\/h3>\r\n<p>Tulislah 3 function dengan nama luas persegi panjang, keliling persegi panjang dan volume balok<\/p>\r\n<pre class=\"wp-block-preformatted\">\/*\r\n    Tulis code function di sini\r\n*\/\r\n \r\nvar panjang= 12\r\nvar lebar= 4<br \/>var tinggi = 8\r\n \r\nvar luasPersegiPanjang = luasPersegiPanjang(panjang, lebar)<br \/>var kelilingPersegiPanjang = kelilingPersegiPanjang(panjang, lebar)<br \/>var volumeBalok = volumeBalok(panjang, lebar, tinggi)<br \/><br \/>console.log(luasPersegiPanjang) <br \/>console.log(kelilingPersegiPanjang)<br \/>console.log(volumeBalok)<\/pre>\r\n<h3 id=\"soal-3\"><strong>soal 2<\/strong><\/h3>\r\n<p>Tulislah sebuah function dengan nama introduce() yang memproses paramater yang dikirim menjadi sebuah kalimat perkenalan seperti berikut: &ldquo;Nama saya [nama], umur saya [umur] tahun, alamat saya di [alamat], dan saya punya hobby yaitu [hobi]!&rdquo;<\/p>\r\n<pre class=\"wp-block-preformatted\">\/* \r\n    Tulis kode function di sini\r\n*\/\r\n \r\nvar name = \"John\"\r\nvar age = 30\r\nvar address = \"Jalan belum jadi\"\r\nvar hobby = \"Gaming\"\r\n \r\nvar perkenalan = introduce(name, age, address, hobby)\r\nconsole.log(perkenalan) \/\/ Menampilkan \"Nama saya John, umur saya 30 tahun, alamat saya di Jalan belum jadi, dan saya punya hobby yaitu Gaming!\" <\/pre>\r\n<h4><strong>soal 3<\/strong><\/h4>\r\n<p>ubahlah array di bawah ini menjadi object dengan property nama, jenis kelamin, hobi dan tahun lahir (var arrayDaftarPeserta harus di olah menjadi object)<\/p>\r\n<pre class=\"wp-block-code\"><code>var arrayDaftarPeserta = [\"John Doe\", \"laki-laki\", \"baca buku\" , 1992]<\/code><\/pre>\r\n<h4><strong>soal 4<\/strong><\/h4>\r\n<p>anda diberikan data-data buah seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>1.nama: Nanas\r\n  warna: Kuning\r\n  ada bijinya: tidak\r\n  harga: 9000 \r\n2.nama: Jeruk\r\n  warna: Oranye\r\n  ada bijinya: ada\r\n  harga: 8000\r\n3.nama: Semangka\r\n  warna: Hijau &amp; Merah\r\n  ada bijinya: ada\r\n  harga: 10000\r\n4.nama: Pisang\r\n  warna: Kuning\r\n  ada bijinya: tidak\r\n  harga: 5000<\/code><\/pre>\r\n<p>uraikan data tersebut menjadi array of object dan munculkan data yang tidak memiliki biji<\/p>\r\n<h4><strong>soal 5<\/strong><\/h4>\r\n<p>buatlah function tambahDataFilm yang menambahkan object ke array<\/p>\r\n<pre class=\"wp-block-code\"><code>\/* <br \/>    Tulis kode function di sini <br \/>*\/<br \/><br \/>var dataFilm = []<br \/><br \/>tambahDataFilm(\"LOTR\", \"2 jam\", \"action\", \"1999\")<br \/>tambahDataFilm(\"avenger\", \"2 jam\", \"action\", \"2019\")<br \/>tambahDataFilm(\"spiderman\", \"2 jam\", \"action\", \"2004\")<br \/>tambahDataFilm(\"juon\", \"2 jam\", \"horror\", \"2004\")<\/code><\/pre>\r\n<p><code>console.log(dataFilm)<\/code><\/p>\r\n<p>berikut ini contoh output tugas 5:<\/p>\r\n<p><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/03\/tugas-5-c.png\" \/><\/p>\r\n<h3 id=\"3-tips\"><strong>3. Tips<\/strong><\/h3>\r\n<p>Agar soal mudah di periksa trainer maka sebelum jawaban soal sisipkan komentar seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ soal 1\r\n.... jawaban soal 1\r\n\r\n\/\/ soal 2\r\n.... jawaban soal 2\r\n\r\ndan seterusnya<\/code><\/pre>\r\n<h3 id=\"4-membuat-layout-html-css\"><strong>4. Kumpulkan Tugas<\/strong><\/h3>\r\n<p>Lalu update tugasnya ke repository masing-masing. Selanjutnya kumpulkan tugas Anda dengan melakukan copy link commit yang telah dibuat dari halaman repository project gitlab\/github ke akun Anda di <a href=\"\/\">https:\/\/sanbercode.com\/<\/a>&nbsp;.<\/p>\r\n<p>Untuk selengkapnya, teknis pengumpulan tugas dapat di lihat di tab materi -&gt; lalu klik pendahuluan -&gt; lalu klik teknis pengumpulan<\/p>\r\n<p>&nbsp;<\/p>\r\n<\/div>\r\n<p>&nbsp;<\/p>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-04-30 08:00:00","status_publish":"publish","urutan":5,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:24:54","waktu_publish_formatted":" Jumat, 30 April 2021. 08:00:00 WIB."}]},{"id":213,"uuid":"d4b5a3c0-1249-4812-91f5-4336e6b2f960","materi_id":25,"nama":"Pekan 2 - Materi","permalink":"pekan-2-materi","urutan":4,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":null,"posting":[{"id":772,"uuid":"bbd94d54-93d5-4af0-81de-ac35336e7580","author_user_id":4336,"materi_section_id":213,"judul":"Hari Ke-6 \u2013 Javascript \u2013 ES6","permalink":"hari-ke-6-javascript-es6","konten":"<div class=\"entry-content\">\r\n<div class=\"entry-content\">\r\n<div class=\"entry-content\">\r\n<p>ES6 atau EcmaScript 6 atau EcmaScript 2015 merupakan fitur bahasa pada pemrograman Javascript modern atau biasa di sebut next gen javascript. lalu kenapa kita harus mempelajari ES6, itu karena di reactJS kita akan banyak menggunakan sintaks-sintaks ES6.<\/p>\r\n<h2 id=\"daftar-fitur-es6\"><strong>Daftar Fitur ES6<\/strong><\/h2>\r\n<ul>\r\n<li class=\"\">Arrows Function<\/li>\r\n<li class=\"\">Classes<\/li>\r\n<li class=\"\">Enchanced object literals<\/li>\r\n<li class=\"\">Template strings<\/li>\r\n<li class=\"\">Destructuring<\/li>\r\n<li class=\"\">Default + rest + spread<\/li>\r\n<li class=\"\">Let + const<\/li>\r\n<li class=\"\">Iterators + for..of<\/li>\r\n<li class=\"\">Generators<\/li>\r\n<li class=\"\">Unicode<\/li>\r\n<li class=\"\">Modules<\/li>\r\n<li class=\"\">Modules loaders<\/li>\r\n<li class=\"\">Map +set + weakmap + weakset<\/li>\r\n<li class=\"\">Proxies<\/li>\r\n<li class=\"\">Symbols<\/li>\r\n<li class=\"\">Subclassable built-ins<\/li>\r\n<li class=\"\">Promises<\/li>\r\n<li class=\"\">Math + number + string + array + object apis<\/li>\r\n<li class=\"\">Binary dan octal literals<\/li>\r\n<li class=\"\">Reflect API<\/li>\r\n<li class=\"\">Tail calls<\/li>\r\n<\/ul>\r\n<p>Tidak perlu menguasai seluruh fitur diatas, tetapi kita akan membagi fitur-fitur yang penting untuk di pelajari yaitu:<\/p>\r\n<ul>\r\n<li>let + const<\/li>\r\n<li>arrow function<\/li>\r\n<li>default paramater<\/li>\r\n<li>Template literal<\/li>\r\n<li>Enhanced object literals<\/li>\r\n<li>Destructuring<\/li>\r\n<li>Rest Parameters + Spread Operator<\/li>\r\n<li>promise (nanti ada materinya di asynchronous)<\/li>\r\n<li>class<\/li>\r\n<\/ul>\r\n<h2 id=\"let-const\"><strong>Let + Const<\/strong><\/h2>\r\n<p>let dan const merupakan statement untuk mendefinisikan variable sama seperti var hanya saja terdapat perbedaan diantara let + const dan var.<\/p>\r\n<p>let hampir sama seperti var hanya saja jika dalam satu block kode ada sebuah let yang sudah di definisikan kita tidak dapat mendefinisikan kembali kecuali kita membuat block kode baru di dalamnya misal seperti menambahkan if<\/p>\r\n<p>sedangkan const sendiri bersifat tidak bisa di rubah seperti sebuah konstanta dalam matematika<\/p>\r\n<p>var sendiri masih bisa digunakan untuk menjaga compability dengan versi sebelumnya<\/p>\r\n<p>berikut ini perbandingan var dengan let + const:<\/p>\r\n<p><strong>Normal Javascript:<\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>var x = 1;\r\n \r\nif (x === 1) {\r\nvar x = 2;\r\n \r\nconsole.log(x);\r\n\/\/ expected output: 2\r\n}\r\n \r\nconsole.log(x); \/\/ 2 <\/code><\/pre>\r\n<p><strong>ES6 :<\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>let x = 1;\r\n \r\nif (x === 1) {\r\n  let x = 2;\r\n \r\n  console.log(x);\r\n  \/\/ expected output: 2\r\n}\r\n \r\nconsole.log(x); \/\/ 1 \r\n\r\nconst number = 42;\r\nnumber = 100; \/\/ Uncaught TypeError: Assignment to constant variable.<\/code><\/pre>\r\n<h2 id=\"arrow-functions\"><strong>Arrow Functions<\/strong><\/h2>\r\n<p>arrow functions merupakan fitur yang ada pada es6 bisa dibilang lebih singkat dari function biasa, function biasa sendiri masih bisa di gunakan.<\/p>\r\n<p>berikut ini perbandingan penggunaan function dan arrow function:<\/p>\r\n<p><strong>Normal Javascript:<\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>function myFunction (){\r\n    \/\/ isi Function\r\n}\r\n\/\/ panggil Function\r\nmyFunction()<\/code><\/pre>\r\n<p><strong>ES6 :<\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>const myFuncton = () =&gt; {\r\n    \/\/function\r\n}\r\n\r\n\/\/ panggil Function\r\nmyFunction()<\/code><\/pre>\r\n<h2 id=\"default-parameters\"><strong>Default Parameters<\/strong><\/h2>\r\n<p>biasanya kita dalam membuat function pasti punya parameter tapi apakah parameter itu sendiri bisa di beri default, jawabannya adalah ya di ES6 kita dapat memasukkan default parameter seperti contoh di bawah ini:<\/p>\r\n<pre class=\"wp-block-code\"><code>function multiply(a, b = 1) {\r\n  return a * b;\r\n}\r\n \r\nconsole.log(multiply(5, 2));\r\n\/\/ expected output: 10\r\n \r\nconsole.log(multiply(5));\r\n\/\/ expected output: 5 <\/code><\/pre>\r\n<h2 id=\"template-literals\"><strong>Template Literals<\/strong><\/h2>\r\n<p>template literal atau biasa di sebut template string merupakan fitur ES6 yang memungkinkan kita menyusun string dengan rapi dengan menggunakan tanda petik terbalik dan ${variabelnya}.<\/p>\r\n<p>berikut ini cara menggunakan template literal:<\/p>\r\n<pre class=\"wp-block-code\"><code>const firstName= \"John\"\r\nconst lastName = \"Doe\"\r\nconst teamName = \"Mr\"\r\n\r\nconst theString = `${firstName} ${lastName}, ${teamName}`\r\n\r\nconsole.log(theString) \/\/ John Doe, Mr<\/code><\/pre>\r\n<h2 id=\"enhanced-object-literals\"><strong>Enhanced object literals&nbsp;<\/strong><\/h2>\r\n<p>Enhanced object literals merupakan fitur ES6 yang memungkinkan kita untuk menyederhanakan sebuah object, dimana biasanya kita selalu menulis property dan value, tetapi jika terdapat kondisi ada variabel yang namanya sama dengan property maka kita bisa assign hal tersebut sebagai value tetapi dengan&nbsp; hanya menulis property nya saja<\/p>\r\n<p>berikut ini contoh enhanced object literals dan perbandingan dengan javascript sebelum es6<\/p>\r\n<p><strong>Before ES6 Javascript:<\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>const fullName = 'John Doe'\r\n \r\nconst john = {\r\n  fullName: fullName\r\n}<\/code><\/pre>\r\n<p><strong>After ES6 Javascript:<\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>const fullName = 'John Doe'\r\n \r\nconst john = {fullName}<\/code><\/pre>\r\n<h2 id=\"destructuring\"><strong>Destructuring<\/strong><\/h2>\r\n<p>Destructuring merupakan ekspresi javascript yang memungkinkan untuk membagi atau memecah nilai dari sebuah array atau objek ke dalam variabel yang berbeda<\/p>\r\n<p>berikut ini contoh penggunaan destructuring dan perbandingannya dengan sebelum destructuring<\/p>\r\n<p><strong>tanpa destructuring<\/strong>:<\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ array\r\nvar numbers = [1,2,3]\r\n\r\nvar numberOne = numbers[0]\r\nvar numberTwo = numbers[1]\r\nvar numberThree = numbers[2]\r\n\r\nconsole.log(numberOne)\r\n\r\n\/\/ object\r\nvar studentName = {\r\n    firstName: 'Peter',\r\n    lastName: 'Parker'\r\n};\r\n \r\nconst firstName = studentName.firstName;\r\nconst lastName = studentName.lastName;\r\n\r\nconsole.log(firstName)<\/code><\/pre>\r\n<p><strong>dengan destructuring:<\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ array\r\nlet numbers = [1,2,3]\r\n\r\nconst [numberOne, numberTwo, numberThree] = numbers\r\n\r\nconsole.log(numberOne)\r\n\r\n\/\/ object\r\nvar studentName = {\r\n    firstName: 'Peter',\r\n    lastName: 'Parker'\r\n};\r\n \r\nconst {firstName, lastName} = studentName\r\n\r\nconsole.log(firstName)<\/code><\/pre>\r\n<h2 id=\"rest-parameters-spread-operator\">Rest Parameters + Spread Operator<\/h2>\r\n<p>Rest Parameters dan Spread Operator di lambangkan dengan simbol yang sama yaitu \"...\"<\/p>\r\n<p><strong>Rest Parameters <\/strong><\/p>\r\n<p>Rest Parameter&nbsp;ini berguna untuk menggabungkan semua paramater pada&nbsp;function&nbsp;ke dalam array. Dengan menggunakan&nbsp;Rest Parameter&nbsp;ini dapat membantu kita mendefinisikan&nbsp;function&nbsp;dengan rapi serta memberikan parameter yang tidak terbatas pada sebuah&nbsp;function.<\/p>\r\n<p>berikut ini contoh penggunaan rest parameters:<\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ Rest Parameters\r\n \r\n\/\/first example\r\nlet scores = ['98', '95', '93', '90', '87', '85']\r\nlet [first, second, third, ...restOfScores] = scores;\r\n \r\nconsole.log(first) \/\/ 98\r\nconsole.log(second) \/\/ 95\r\nconsole.log(third) \/\/ 93\r\nconsole.log(restOfScores) \/\/ [90, 87, 85] \r\n\r\n\/\/second example <br data-rich-text-line-break=\"true\" \/>const filter = (...rest) =&gt;{ <br data-rich-text-line-break=\"true\" \/>return rest.filter(el =&gt; el.text !== undefined) <br data-rich-text-line-break=\"true\" \/>} <br data-rich-text-line-break=\"true\" \/><br data-rich-text-line-break=\"true\" \/>console.log(filter(1, {text: \"wonderful\"}, \"next\")) \/\/ wonderful<br data-rich-text-line-break=\"true\" \/><br data-rich-text-line-break=\"true\" \/>\/\/third example <br data-rich-text-line-break=\"true\" \/>const fullName = (...rest) =&gt;{ <br data-rich-text-line-break=\"true\" \/>let [firstName, lastName] = rest<br data-rich-text-line-break=\"true\" \/>return `${firstName} ${lastName}`<br data-rich-text-line-break=\"true\" \/>} <br data-rich-text-line-break=\"true\" \/><br data-rich-text-line-break=\"true\" \/>console.log(fullName(\"John\", \"Doe\")) \/\/ John Doe<br \/><\/code><\/pre>\r\n<p><strong>Spread Operator<\/strong><\/p>\r\n<p>Spread Operator&nbsp;digunakan untuk membagi elemen array atau properti pada objek, sehingga elemen array dapat ditambahkan\/dimasukan ke dalam array baru<\/p>\r\n<pre class=\"wp-block-code\"><code><\/code><\/pre>\r\n<p>berikut ini contoh penggunaan Spread Operator:<\/p>\r\n<pre class=\"wp-block-code\"><code>\r\n\/\/ spread operator\r\nlet array1 = ['one', 'two']\r\nlet array2 = ['three', 'four']\r\nlet array3 = ['five', 'six']\r\n \r\n\/\/ ES5 Way \/ Normal Javascript\r\n \r\nvar combinedArray = array1.concat(array2).concat(array3)\r\nconsole.log(combinedArray) \/\/ ['one', 'two', 'three', 'four', 'five', 'six']\r\n \r\n\/\/ ES6 Way \r\n \r\nlet combinedArray = [...array1, ...array2, ...array3]\r\nconsole.log(combinedArray) \/\/ ['one', 'two', 'three', 'four', 'five', 'six']<br \/><br \/>\/\/Spread in object<br data-rich-text-line-break=\"true\" \/><br data-rich-text-line-break=\"true\" \/>let person = {name: \"john\", age: 30}<br data-rich-text-line-break=\"true\" \/><br data-rich-text-line-break=\"true\" \/>let newPerson = {...person, hobby: \"Gaming\"}<br data-rich-text-line-break=\"true\" \/><br data-rich-text-line-break=\"true\" \/>console.log(newPerson) \/\/ {name: \"john\", age: 30, hobby: \"Gaming\"}<\/code><\/pre>\r\n<p>&nbsp;<\/p>\r\n<p>referensi:&nbsp;<\/p>\r\n<ul>\r\n<li>https:\/\/www.w3schools.com\/js\/js_es6.asp<\/li>\r\n<li>https:\/\/medium.com\/linux-user-group-surabaya\/rest-dan-spread-pada-javascript-13f572ab85f4<\/li>\r\n<\/ul>\r\n<\/div>\r\n<footer class=\"entry-footer wedocs-entry-footer\"><\/footer><\/div>\r\n<footer class=\"entry-footer wedocs-entry-footer\"><\/footer>\r\n<pre class=\"wp-block-code\"><code><\/code><\/pre>\r\n<pre class=\"wp-block-code\"><code><\/code><\/pre>\r\n<\/div>\r\n<footer class=\"entry-footer wedocs-entry-footer\"><\/footer>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-05-03 08:00:00","status_publish":"publish","urutan":1,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:20:35","waktu_publish_formatted":" Senin, 03 Mei 2021. 08:00:00 WIB."},{"id":773,"uuid":"ef2fad29-80ca-45c3-85dc-f998c2e095d0","author_user_id":4336,"materi_section_id":213,"judul":"Hari Ke-7 \u2013 Javascript \u2013 Class","permalink":"hari-ke-7-javascript-class","konten":"<div class=\"entry-content\">\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Pada materi sebelumnya, telah dipelajari tentang Object Literals di Javascript. Dengan Object kita dapat merepresentasikan segala hal termasuk program yang akan kita buat dengan Javascript. Materi kali ini akan mempelajari object dalam bentuk Class.<\/p>\r\n<\/blockquote>\r\n<p>Di dalam dunia pemrograman dikenal sebuah konsep dengan nama OOP atau Object Oriented Programming. Secara sederhana, dengan konsep OOP maka segala sesuatu dapat kita anggap sebagai sebuah Object atau cetakan (Blueprint). Contohnya terdapat Object Class bernama &ldquo;Car&rdquo; yang berarti mobil. Suatu (cetakan) mobil biasanya memiliki nama dan dibuat oleh sebuah pabrikan otomotif (factory). Selain itu mobil dapat memiliki fungsi untuk berjalan, mengerem, membunyikan klakson, dll.<\/p>\r\n<h2 id=\"mendefinisikan-sebuah-class\"><strong>Mendefinisikan Sebuah Class&nbsp;<\/strong><\/h2>\r\n<p>Class sebetulnya adalah sebuah functions yang spesial, dan seperti function yang kita ketahui sebelumnya bahwa functions dapat dideklarasikan dan dipanggil begitu pula dengan Class.<\/p>\r\n<h3 id=\"deklarasi-class\"><strong>Deklarasi Class<\/strong><\/h3>\r\n<p>Cara yang pertama untuk membuat sebuah class yaitu dengan mendeklarasikannya. Caranya adalah tuliskan &ldquo;Class&rdquo; diikuti dengan nama class-nya.<\/p>\r\n<pre class=\"wp-block-preformatted\">class Car {\r\n    constructor(brand,factory) {\r\n        this.brand = brand\r\n        this.factory = factory\r\n        this.sound = \"honk! honk!vroomvroom\"\r\n    }\r\n}<\/pre>\r\n<h3 id=\"ekspresi-class\">Ekspresi Class<\/h3>\r\n<p>Cara lain untuk membuat sebuah class yaitu dengan cara membuat sebuah variabel. Class tersebut boleh diberikan nama atau tidak diberi nama. contohnya sebagai berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ Tidak diberi nama \r\nvar Car = class {\r\n    constructor(brand, factory) {\r\n        this.brand = brand\r\n        this.factory = factory\r\n    }\r\n}\r\n \r\nconsole.log(Car.name) \/\/ Car\r\n \r\n\/\/ Diberi nama\r\nvar Car = class Car2 {\r\n    constructor(brand, factory) {\r\n        this.brand = brand\r\n        this.factory = factory\r\n    }\r\n}\r\nconsole.log(Car.name) \/\/ Car2<\/pre>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Nama sebuah Class biasanya menggunakan kapital pada huruf pertama nya. Jika terdapat dua kata atau lebih maka huruf pertama pada kata yang selanjutnya harus kapital.<\/p>\r\n<pre class=\"wp-block-preformatted\"><code>class Car{} \/\/ BENAR<\/code><br \/><code>class car{} \/\/ SALAH<\/code><br \/><code>class SportsCar {} \/\/ BENAR<\/code><br \/><code>class sportscar {} \/\/ SALAH <\/code><\/pre>\r\n<p>&nbsp;<\/p>\r\n<\/blockquote>\r\n<h2 id=\"method\"><strong>Method<\/strong><\/h2>\r\n<p>Sintaks constructor pada class merupakan method khusus, dimana dilakukan inisialisasi properties, yang akan dieksekusi secara otomatis ketika class dibuat, dan ia harus memiliki nama &ldquo;constructor&rdquo;. (Jika tidak dituliskan, maka Javascript akan menambahkan method constructor kosong secara otomatis).<\/p>\r\n<p>Kita juga dapat membuat method sendiri, dengan sintaks yang sudah biasa kita gunakan:<\/p>\r\n<pre class=\"wp-block-preformatted\">class&nbsp;Car {\r\n&nbsp;&nbsp;constructor(brand) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.carname&nbsp;= brand;\r\n&nbsp;&nbsp;}\r\n&nbsp; present() {\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;\"I have a \"&nbsp;+&nbsp;this.carname;\r\n&nbsp;&nbsp;}\r\n}\r\n\r\nmycar =&nbsp;new&nbsp;Car(\"Ford\");\r\nconsole.log(mycar.present()) \/\/ I have a Ford<\/pre>\r\n<p>Seperti yang terlihat pada contoh di atas, method dapat digunakan dengan cara memanggil nama class dan method nya ditambah dengan kurung buka dan kurung tutup. Parameter bisa dimasukan di dalam tanda kurung jika diperlukan, seperti pada contoh di bawah.<\/p>\r\n<pre class=\"wp-block-preformatted\">class&nbsp;Car {\r\n&nbsp;&nbsp;constructor(brand) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.carname&nbsp;= brand;\r\n&nbsp;&nbsp;}\r\n&nbsp; present(x) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x +&nbsp;\", I have a \"&nbsp;+&nbsp;this.carname;\r\n&nbsp;&nbsp;}\r\n}\r\n\r\nmycar =&nbsp;new&nbsp;Car(\"Ford\");\r\nconsole.log(mycar.present(\"Hello\"));<\/pre>\r\n<h2 id=\"static-method\"><strong>Static Method<\/strong><\/h2>\r\n<p>Static methods didefinisikan hanya untuk class itu sendiri. sehingga, jika melihat pada contoh sebelumnya static method hanya bisa diakses melalui Car, dan tidak bisa melalui mycar:<\/p>\r\n<pre class=\"wp-block-preformatted\"> class&nbsp;Car {\r\n&nbsp; constructor(brand) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.carname&nbsp;=&nbsp;brand;\r\n&nbsp;&nbsp;}\r\n&nbsp;&nbsp;static&nbsp;hello() {\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;\"Hello!!\";\r\n&nbsp;&nbsp;}\r\n}\r\n\r\nmycar =&nbsp;new&nbsp;Car(\"Ford\");\r\n\r\n\/\/ memanggil 'hello()' pada class Car:\r\nconsole.log(Car.hello());\r\n\r\n\/\/ dan tidak bisa pada 'mycar':\r\n\/\/ console.log(mycar.hello());\r\n\/\/ jika menggunakan sintaks tersebut akan memunculkan error.<\/pre>\r\n<h2 id=\"inheritance\"><strong>Inheritance<\/strong><\/h2>\r\n<p>Untuk membuat inheritance dari suatu class, gunakan keyword&nbsp;<code>extends<\/code>. Class yang dibuat dengan metode inheritance, akan memiliki method yang sama dengan class asalnya. Contoh berikut adalah class Model yang merupakan inheritance dari class Car:<\/p>\r\n<pre class=\"wp-block-preformatted\"> class&nbsp;Car {\r\n&nbsp; constructor(brand) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.carname&nbsp;=&nbsp;brand;\r\n&nbsp;&nbsp;}\r\n&nbsp; present() {\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;'I have a '&nbsp;+&nbsp;this.carname;\r\n&nbsp;&nbsp;}\r\n}\r\n\r\nclass&nbsp;Model&nbsp;extends&nbsp;Car {\r\n&nbsp;&nbsp;constructor(brand, mod) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;super(brand);\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.model&nbsp;= mod;\r\n&nbsp;&nbsp;}\r\n&nbsp; show() {\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this.present() +&nbsp;', it is a '&nbsp;+&nbsp;this.model;\r\n&nbsp;&nbsp;}\r\n}\r\n\r\nmycar =&nbsp;new&nbsp;Model(\"Ford\",&nbsp;\"Mustang\");\r\nconsole.log(mycar.show());<\/pre>\r\n<p>Method&nbsp;<code>super()<\/code>&nbsp;mengacu pada class asalnya, dimana dengan menggunakan method&nbsp;<code>super()<\/code>&nbsp; di dalam method constructor, kita dapat memanggil constructor class asalnya dan mengakses property dan method nya.<\/p>\r\n<h2 id=\"getters-dan-setters\"><strong>Getters dan Setters<\/strong><\/h2>\r\n<p>Pada class juga kita dapat menggunakan getter dan setter. getter dan setter dapat digunakan untuk melakukan proses tertentu pada suatu property, sebelum property tersebut digunakan. Untuk menambahak getter dan setter pada class, gunakan keyword&nbsp;<code>get<\/code>&nbsp;dan&nbsp;<code>set<\/code>. (Meskipun getter merupakan sebuah method, namun dalam menggunakannya tidak digunakan &ldquo;( )&rdquo; setelah memanggil method tersebut, seperti pada contoh di bawah).<\/p>\r\n<pre class=\"wp-block-preformatted\"> class&nbsp;Car {\r\n&nbsp; constructor(brand) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.carname&nbsp;= brand;\r\n&nbsp; }\r\n&nbsp; get cnam() {\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this.carname;\r\n&nbsp; }\r\n&nbsp; set cnam(x) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this.carname&nbsp;= x;\r\n&nbsp; }\r\n}\r\n\r\nmycar =&nbsp;new&nbsp;Car(\"Ford\");\r\nconsole.log(mycar.cnam); \/\/ Ford\r\n\/\/ getter cnam digunakan tanpa \"()\"<\/pre>\r\n<p>Biasanya untuk membedakan method dengan property, property ditulis dengan menggunakan &ldquo;_&rdquo; di depan namanya, sementara method (termasuk getter dan setter) tidak.<\/p>\r\n<pre class=\"wp-block-preformatted\">class&nbsp;Car {\r\n&nbsp; constructor(brand) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this._carname&nbsp;= brand;\r\n&nbsp; }\r\n&nbsp; get carname() {\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this._carname;\r\n&nbsp; }\r\n&nbsp; set carname(x) {\r\n&nbsp;&nbsp;&nbsp;&nbsp;this._carname&nbsp;= x;\r\n&nbsp; }\r\n}\r\n\r\nmycar =&nbsp;new&nbsp;Car(\"Ford\");\r\nmycar.carname&nbsp;=&nbsp;\"Volvo\"; \/\/ memanggil setter, mengubah Ford menjadi Volvo\r\nconsole.log(mycar.carname); \/\/ Volvo<\/pre>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>sumber:&nbsp;<a href=\"https:\/\/www.w3schools.com\/js\/js_classes.asp\">w3schools.com<\/a><\/p>\r\n<\/blockquote>\r\n<p>&nbsp;<\/p>\r\n<\/div>","waktu_publish":"2021-05-04 08:00:00","status_publish":"publish","urutan":2,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:19:55","waktu_publish_formatted":" Selasa, 04 Mei 2021. 08:00:00 WIB."},{"id":774,"uuid":"879c45c5-d89e-4fee-ad0e-c76a5ee09023","author_user_id":4336,"materi_section_id":213,"judul":"Hari Ke-8 \u2013 Javascript \u2013 Asynchronous","permalink":"hari-ke-8-javascript-asynchronous","konten":"<div class=\"entry-content\">\r\n<p>Di dalam dunia pemrograman terdapat dua cara dalam menjalankan program: Synchronous dan Asynchronous. Synchronous artinya program berjalan secara berurutan sedangkan Asynchronous artinya program berjalan bersama-sama.<\/p>\r\n<p>Terkadang di dalam program yang kita buat terdapat suatu sintaks yang mengharuskan code pada baris tersebut untuk dijalankan terlebih dahulu sebelum menjalankan sintaks pada baris selanjutnya. Hal ini dikenal dengan istilah&nbsp;<strong>blocking<\/strong>. Sebaliknya&nbsp;<strong>non-blocking<\/strong>&nbsp;artinya program berjalan dengan mengeksekusi sintaks dari baris ke baris secara paralel (bersama-sama) .<\/p>\r\n<div class=\"wp-block-image\">\r\n<figure class=\"aligncenter size-large\"><img src=\"https:\/\/gblobscdn.gitbook.com\/assets%2F-LlUaK30_GFBvMOdUWKf%2F-LmaxxI-WCdSbno_EMIf%2F-Lmb1Y86xkSMjjQR9D_D%2Fcontrol-io.svg?alt=media&amp;token=28454ce2-c28b-4149-bd72-7fa57d83737c\" alt=\"\" \/><\/figure>\r\n<\/div>\r\n<p>Perhatikan contoh program di bawah ini:<\/p>\r\n<pre class=\"wp-block-preformatted\">setTimeout(function() {\r\n  console.log(\"saya dijalankan belakangan\")\r\n}, 3000)\r\n \r\nconsole.log(\"saya dijalankan pertama\") <\/pre>\r\n<p>Jika kita jalankan program di atas, maka yang akan tampil terlebih dahulu di console adalah &ldquo;saya dijalankan pertama&rdquo; walaupun sintaksnya ditulis belakangan setelah function setTimeout. Function setTimeout di atas merupakan salah satu contoh function asynchronous di Javascript.<\/p>\r\n<p>Cara untuk mengatasi Asynchronous seperti function setTimeout adalah dengan&nbsp;<strong>Callback<\/strong>&nbsp;atau dengan&nbsp;<strong>Promise<\/strong>.<\/p>\r\n<h2 id=\"callback\"><strong>Callback&nbsp;<\/strong><\/h2>\r\n<h3 id=\"membuat-callback\"><strong>Membuat Callback&nbsp;<\/strong><\/h3>\r\n<p>Callback adalah function yang dipanggil ketika function lain selesai menjalankan programnya. Contoh sederhana Callback adalah pada function setTimeout di atas. function setTimeout menerima dua parameter yaitu callback dan waktu tunggu (timeout). function tersebut menjalankan timeout terlebih dahulu lalu ketika waktu yang diset sudah dilewati maka function callback akan dipanggil.<\/p>\r\n<p>Contoh untuk membuat callback seperti berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ Deklarasi function yang memilik callback sebagai parameter\r\nfunction periksaDokter(nomerAntri, callback) {\r\n    if(nomerAntri &gt; 50 ) {\r\n        callback(false)\r\n    } else if(nomerAntri &lt; 10) {\r\n        callback(true)\r\n    }    \r\n} <\/pre>\r\n<p>Misalkan kita ingin periksa ke dokter yang antriannya sering panjang dan memakai nomer antri melalui pemesanan online. Setelah registrasi online lalu kita melakukan pemesanan dan menunggu nomer antrian. Function di atas menerima parameter nomer antri dan sebuah callback. Dilakukan pengecekan kondisi jika nomor antriannya lebih dari 50 maka lebih baik jalan-jalan dulu daripada menunggu, tapi jika nomor antriannya kurang dari 10 tentunya kita harus standby lagi di klinik untuk dipanggil.<\/p>\r\n<h3 id=\"menjalankan-callback\"><strong>Menjalankan Callback<\/strong><\/h3>\r\n<p>Setelah dideklarasi function yang memiliki callback, kini kita jalankan function tersebut.<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ Menjalankan function periksaDokter yang sebelumnya sudah dideklarasi\r\nperiksaDokter(65, function(check) {\r\n    if(check) {\r\n        console.log(\"sebentar lagi giliran saya\")\r\n    } else {\r\n        console.log(\"saya jalan-jalan dulu\")\r\n    }\r\n}) <\/pre>\r\n<p>Karena kita tidak ingin menunggu maka kita gunakan callback untuk mengecek apakah nomer antriannya masih lama atau tidak. Jadi ketika dicek ternyata nomer antriannya masih lama maka hasil return (callback) dari function periksaDokter bernilai false (check = false), sebaliknya jika sudah sebentar lagi akan diberikan callback dengan nilai true (check = true) .<\/p>\r\n<p>Ketika menjalankan function periksaDokter, diberikan parameter pertama yaitu nomer antrian 65 dan parameter kedua adalah sebuah deklarasi function yang merupakan callback. Seperti sudah dideklarasikan di periksaDokter bahwa callback dipanggil dengan satu parameter bernilai boolean.<\/p>\r\n<p><!-- wp:paragraph --><\/p>\r\n<p><strong>contoh lainnya<\/strong>:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>terdapat fungsi callback seperti di bawah ini<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>function periksaAntrianDokter(nomerAntri, callback) {\r\n  console.log(`sekarang antrian ke-${nomerAntri}`)\r\n  setTimeout(function () {\r\n    if(nomerAntri === 10 ) { \r\n      console.log(\"saya masuk ruangan dokter\")\r\n      callback(0)\r\n    } else {\r\n      console.log(\"saya masih menunggu\")\r\n      callback(nomerAntri+1)\r\n    }    \r\n  }, 1000)\r\n}<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>cara menggunakan callback dengan setTimeout di dalamnya adalah seperti ini:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>var nomorAntriSekarang = 7\r\n\r\n\/\/ contoh menggunakan callback hell\r\nperiksaAntrianDokter(nomorAntriSekarang, function(nomorAntriBaru){\r\n  periksaAntrianDokter(nomorAntriBaru, function(nomorAntriBaru1){\r\n    periksaAntrianDokter(nomorAntriBaru1, function(nomorAntriBaru2){\r\n      periksaAntrianDokter(nomorAntriBaru2, function(nomorAntriBaru3){\r\n        return nomorAntriBaru3\r\n      })\r\n    })\r\n  })\r\n});\r\n\r\n\/\/ atau dengan\r\n menggunakan function recursive\r\nfunction execute(nomorAntri){\r\n  periksaAntrianDokter(nomorAntri, function(nomorAntriBaru){\r\n    if (nomorAntriBaru !== 0){\r\n      execute(nomorAntriBaru)\r\n    }\r\n  })\r\n}\r\n\r\nexecute(nomorAntriSekarang)<\/code><\/pre>\r\n<p><!-- \/wp:code --><\/p>\r\n<p>&nbsp;<\/p>\r\n<h2 id=\"promise\"><strong>Promise&nbsp;<\/strong><\/h2>\r\n<p>Sesuai dengan namanya, Promise berarti janji. Seperti janji yang biasanya memakan waktu dan janji bisa ditepati (resolve) atau diingkari (reject). Misalkan pada contoh di bawah ini seorang anak dijanjikan mendapatkan sebuah handphone baru oleh Ibunya. Jika Ibunya sedang bahagia maka janji sebuah handphone baru ditepati, selain itu jika ibunya sedang marah maka janji diingkari.<\/p>\r\n<h3 id=\"membuat-promise\"><strong>Membuat Promise<\/strong><\/h3>\r\n<p>Cara membuat promise adalah dengan menginstance sebuah class Promise. class Promise tersebut sudah disediakan di Javascript. Parameter yang dikirim ketika melakukan instance class Promise yaitu sebuah function yang menerima dua parameter yaitu resolve dan reject.<\/p>\r\n<pre class=\"wp-block-preformatted\">var isMomHappy = false;\r\n \r\n\/\/ Promise\r\nvar willIGetNewPhone = new Promise(\r\n    function (resolve, reject) {\r\n        if (isMomHappy) {\r\n            var phone = {\r\n                brand: 'Samsung',\r\n                color: 'black'\r\n            };\r\n            resolve(phone); \/\/ fulfilled atau janji dipenuhi\r\n        } else {\r\n            var reason = new Error('mom is not happy');\r\n            reject(reason); \/\/ reject (ingkar)\r\n        }\r\n \r\n    }\r\n); <\/pre>\r\n<h3 id=\"menjalankan-promise\"><strong>Menjalankan Promise&nbsp;<\/strong><\/h3>\r\n<p>Menjalankan promise seperti kita menagih janji yang sudah dibuat.<\/p>\r\n<pre class=\"wp-block-preformatted\">function askMom() {\r\n    willIGetNewPhone\r\n        .then(function (fulfilled) {\r\n            \/\/ yay, you got a new phone\r\n            console.log(fulfilled);\r\n         \/\/ output: { brand: 'Samsung', color: 'black' }\r\n        })\r\n        .catch(function (error) {\r\n            \/\/ oops, mom don't buy it\r\n            console.log(error.message);\r\n         \/\/ output: 'mom is not happy'\r\n        });\r\n}\r\n \r\n\/\/ Tanya Mom untuk menagih janji\r\naskMom() <\/pre>\r\n<p>Untuk menagih janji dibuat sebuah function dengan nama askMom yang isinya adalah menagih janji willIGetNewPhone. Ketika anak menagih janji menggunakan function askMom() maka promise willIGetNewPhone dipanggil dan terdapat dua methods yaitu&nbsp;<code>then<\/code>&nbsp;dan&nbsp;<code>catch<\/code>&nbsp;. Method .then() dan .catch() keduanya menerima parameter function. Resolve yang dijalankan di pendeklarasian promise akan mengirim handphone baru dan ditangkap di method&nbsp;<code>.then()<\/code>. Sedangkan reject pada pendeklarasian promise akan mengirim pesan error atau alasan kenapa janji diingkari dan ditangkap di method&nbsp;<code>.catch()<\/code>.<\/p>\r\n<p><!-- wp:paragraph --><\/p>\r\n<p><strong>contoh lainnya<\/strong>:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>terdapat dua fungsi promise seperti di bawah ini:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ promise periksa antrian dokter\r\nfunction periksaAntrianDokterPromise(nomerAntri) {\r\n  console.log(`sekarang antrian ke-${nomerAntri}`)\r\n  return new Promise( function (resolve, reject){\r\n    setTimeout(function () {\r\n      if(nomerAntri === 10 ) { \r\n        console.log(\"saya masuk ruangan dokter\")\r\n        reject(0)\r\n      } else {\r\n        console.log(\"saya masih menunggu\")\r\n        resolve(nomerAntri+1)\r\n      }    \r\n    }, 1000)\r\n  })\r\n}\r\n\r\n\/\/ promise periksa data pasien\r\nfunction periksaDataPasien(nomorIdPasien) {\r\n  var dataPasien = [\r\n    {id: 1, nama: \"John\", jenisKelamin: \"Laki-laki\"},\r\n    {id: 2, nama: \"Michael\", jenisKelamin: \"Laki-laki\"},\r\n    {id: 3, nama: \"Sarah\", jenisKelamin: \"Perempuan\"},\r\n    {id: 4, nama: \"Frank\", jenisKelamin: \"Laki-laki\"}\r\n  ]\r\n  return new Promise( function (resolve, reject){\r\n    var pasien = dataPasien.find(x=&gt; x.id === nomorIdPasien)\r\n    if (pasien === undefined){\r\n      reject(\"data pasien tidak ada\")\r\n    }else{\r\n      resolve(pasien)\r\n    }\r\n  })\r\n}<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>cara menggunakan promisenya adalah seperti ini:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ untuk promise periksa antrian dokter\r\nvar nomorAntriSekarang = 7\r\nfunction execute(nomorAntri){\r\n periksaAntrianDokterPromise(nomorAntri).then(function(nomorAntriBaru){\r\n    if (nomorAntriBaru !== 0){\r\n      execute(nomorAntriBaru)\r\n    }\r\n  }).catch(function(err){\r\n    console.log(err)\r\n  })\r\n}\r\n\r\nexecute(nomorAntriSekarang)\r\n\r\n\r\n\/\/ untuk promise periksa data pasien\r\nperiksaDataPasien(5).then(function(data){\r\n  console.log(data)\r\n}).catch(function(err){\r\n  console.log(err)\r\n})<\/code><\/pre>\r\n<h1 class=\"main__header-title\">Async\/await<\/h1>\r\n<p><strong>1. Apa itu async\/await ?<\/strong><\/p>\r\n<p>Async\/await adalah fitur yang hadir sejak ES2017. Fitur ini mempermudah kita dalam menangani proses&nbsp;<em class=\"jp\">asynchronous.&nbsp;<\/em><\/p>\r\n<p>Ada 2 kata kunci disini yaitu&nbsp;<strong class=\"hj if\"><em class=\"jp\">async<\/em><\/strong>&nbsp;dan&nbsp;<strong class=\"hj if\"><em class=\"jp\">await<\/em><\/strong><em class=\"jp\">, m<\/em>ari kita lihat contohnya :<\/p>\r\n<p>jika kita memiliki promise seperti ini:<\/p>\r\n<div>\r\n<div><code>function&nbsp;doAsync()&nbsp;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;return&nbsp;new&nbsp;Promise(&nbsp;function&nbsp;(resolve,&nbsp;reject){<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;check&nbsp;=&nbsp;true<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(check){<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolve(\"berhasil\")<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;}else{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reject(\"gagal\")<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;}<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;})<\/code><\/div>\r\n<div><code>}<\/code><\/div>\r\n<div>&nbsp;<\/div>\r\n<div>maka cara menggunakan nya pada async\/await adalah seperti ini:<\/div>\r\n<\/div>\r\n<p>&nbsp;<code>async function hello(){<br \/>&nbsp; &nbsp;var result = await doAsync()<br \/><\/code><code>&nbsp; &nbsp;console.log(result)<br \/>}<\/code><\/p>\r\n<p><code>hello()<\/code><\/p>\r\n<p id=\"373d\" class=\"hh hi dq hj b hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ie di en\" data-selectable-paragraph=\"\"><strong class=\"hj if\">Keterangan :<br \/>async<\/strong>&nbsp;<strong class=\"hj if\">&rarr;<\/strong>&nbsp;mengubah function menjadi asynchronous<br \/><strong class=\"hj if\">await &rarr;<\/strong>&nbsp;menunda eksekusi hingga proses asynchronous selesai, dari kode di atas berarti&nbsp;<em class=\"jp\">console.log(result)<\/em> tidak akan di eksekusi sebelum proses&nbsp;<em class=\"jp\">doAsync( )<\/em> selesai . <em class=\"jp\">await<\/em> juga bisa digunakan berkali-kali di dalam function<\/p>\r\n<p class=\"hh hi dq hj b hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ie di en\" data-selectable-paragraph=\"\">sekarang kita coba gunakan promise pada async\/await :<\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ promise periksa data pasien\r\nfunction periksaDataPasien(nomorIdPasien) {\r\n  var dataPasien = [\r\n    {id: 1, nama: \"John\", jenisKelamin: \"Laki-laki\"},\r\n    {id: 2, nama: \"Michael\", jenisKelamin: \"Laki-laki\"},\r\n    {id: 3, nama: \"Sarah\", jenisKelamin: \"Perempuan\"},\r\n    {id: 4, nama: \"Frank\", jenisKelamin: \"Laki-laki\"}\r\n  ]\r\n  return new Promise( function (resolve, reject){\r\n    var pasien = dataPasien.find(x=&gt; x.id === nomorIdPasien)\r\n    if (pasien === undefined){\r\n      reject(\"data pasien tidak ada\")\r\n    }else{\r\n      resolve(pasien)\r\n    }\r\n  })\r\n}<\/code><\/pre>\r\n<p class=\"hh hi dq hj b hk hl hm hn ho hp hq hr hs ht hu hv hw hx hy hz ia ib ic id ie di en\" data-selectable-paragraph=\"\"><code><\/code><br \/>jika promise diatas kita gunakan dalam async\/await maka akan menjadi seperti di bawah ini:<\/p>\r\n<div>\r\n<div><code>async&nbsp;function&nbsp;periksaPasien(){<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;const&nbsp;dataJohn&nbsp;=&nbsp;await&nbsp;periksaDataPasien(1)<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;console.log(dataJohn)<\/code><\/div>\r\n<div><code>}<\/code><\/div>\r\n<br \/>\r\n<div>perbedaan saat kita menggunakan then dan catch disini kita bisa memasukkan hasil promise nya ke dalam variabel<\/div>\r\n<div>&nbsp;<\/div>\r\n<div><strong>2. Error Handling<\/strong><\/div>\r\n<div>&nbsp;<\/div>\r\n<div>ketika menggunakan promise maka pasangan dari then adalah catch yang di mana catch itu adalah error handling dari promise, tapi bagaiamana dengan async\/await, async\/await menggunakan try dan catch untuk error handlingnya seperti contoh di bawah ini:<br \/><br \/><\/div>\r\n<div>\r\n<div><code>async&nbsp;function&nbsp;hello(){<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;try&nbsp;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;var&nbsp;result&nbsp;=&nbsp;await&nbsp;doAsync()<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;console.log(result)<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;}&nbsp;catch(err){<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;console.log(err)<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;}<\/code><\/div>\r\n<div><code>}<\/code><\/div>\r\n<br \/>\r\n<div><code>hello()<\/code><\/div>\r\n<div>&nbsp;<\/div>\r\n<div><strong>3. Serial &amp; Paralel<\/strong><\/div>\r\n<\/div>\r\n<div>&nbsp;<\/div>\r\n<div>Pada saat mengeksekusi beberapa proses asynchronous, ada kalanya kita harus memilih eksekusi secara serial atau parallel. Serial biasanya digunakan jika kita ingin mengeksekusi proses asynchronous secara berurutan. Sedangkan paralel jika ingin di eksekusi secara bersamaan, dalam hal ini urutan tidak menjadi prioritas tapi hasil dan performa.&nbsp;<\/div>\r\n<div>&nbsp;<\/div>\r\n<div>\r\n<div>\r\n<div><code>const&nbsp;firstPromise&nbsp;=&nbsp;()&nbsp;=&gt;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;return&nbsp;new&nbsp;Promise&nbsp;((resolve,reject)&nbsp;=&gt;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(()=&gt;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolve(\"first&nbsp;promise\")<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;},1000)<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;})<\/code><\/div>\r\n<div><code>}<\/code><\/div>\r\n<br \/>\r\n<div><code>const&nbsp;secondPromise&nbsp;=&nbsp;()&nbsp;=&gt;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;return&nbsp;new&nbsp;Promise&nbsp;((resolve,reject)&nbsp;=&gt;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(()=&gt;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolve(\"second&nbsp;promise\")<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;},1000)<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;})<\/code><\/div>\r\n<div><code>}<\/code><\/div>\r\n<br \/>\r\n<div><code>const&nbsp;thirdPromise&nbsp;=&nbsp;()&nbsp;=&gt;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;return&nbsp;new&nbsp;Promise&nbsp;((resolve,reject)&nbsp;=&gt;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(()=&gt;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolve(\"third&nbsp;promise\")<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;},1000)<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;})<\/code><\/div>\r\n<div><code>}<\/code><\/div>\r\n<br \/>\r\n<div><code>\/\/ini&nbsp;paralel&nbsp;selama&nbsp;satu&nbsp;detik<\/code><\/div>\r\n<div><code>const&nbsp;asyncParalel&nbsp;=&nbsp;async&nbsp;()&nbsp;=&gt;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;firstPromise().then(res=&gt;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;console.log(res)<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;})<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;secondPromise().then(res=&gt;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;console.log(res)<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;})<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;thirdPromise().then(res=&gt;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;&nbsp;&nbsp;console.log(res)<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;})<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;<\/code><\/div>\r\n<div><code>}<\/code><\/div>\r\n<br \/>\r\n<div><code>\/\/&nbsp;ini&nbsp;berseri&nbsp;selama&nbsp;tiga&nbsp;detik<\/code><\/div>\r\n<div><code>const&nbsp;asyncSerial&nbsp;=&nbsp;async&nbsp;()&nbsp;=&gt;{<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;let&nbsp;a&nbsp;=&nbsp;await&nbsp;firstPromise()<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;console.log(a)<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;let&nbsp;b&nbsp;=&nbsp;await&nbsp;secondPromise()<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;console.log(b)<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;let&nbsp;c&nbsp;=&nbsp;await&nbsp;thirdPromise()<\/code><\/div>\r\n<div><code>&nbsp;&nbsp;console.log(c)<\/code><\/div>\r\n<div><code>}<\/code><\/div>\r\n<br \/>\r\n<div><code>asyncParalel()<\/code><\/div>\r\n<div><code>asyncSerial()<\/code><\/div>\r\n<\/div>\r\n<\/div>\r\n<\/div>\r\n<p>jika kita jalankan kode diatas maka terlihat bahwa asyncParalel diatas menjalankan semua promisenya serentak sedangkan asyncSerial menjalankan kodenya satu persatu, maka dari itu permasalahan asynchronous dapat di selesaikan dengan ini<\/p>\r\n<p><strong>referensi:<\/strong><\/p>\r\n<ul>\r\n<li><a href=\"https:\/\/medium.com\/coderupa\/panduan-komplit-asynchronous-programming-pada-javascript-part-4-async-await-fc504c344238\">https:\/\/medium.com\/coderupa\/panduan-komplit-asynchronous-programming-pada-javascript-part-4-async-await-fc504c344238<\/a><\/li>\r\n<\/ul>\r\n<p><!-- \/wp:code --><\/p>\r\n<\/div>\r\n<p><\/p>","waktu_publish":"2021-05-05 08:00:00","status_publish":"publish","urutan":3,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:19:29","waktu_publish_formatted":" Rabu, 05 Mei 2021. 08:00:00 WIB."},{"id":775,"uuid":"91b9ca28-c0ce-4380-836b-6ca82db16073","author_user_id":4336,"materi_section_id":213,"judul":"Hari Ke-9 \u2013 Pengenalan Reactjs","permalink":"hari-ke-9-pengenalan-reactjs","konten":"<div class=\"entry-content\">\r\n<h2 id=\"apa-itu-reactjs\">Apa itu ReactJS?<\/h2>\r\n<p><strong>ReactJS&nbsp;<\/strong>atau&nbsp;<strong>React&nbsp;<\/strong>adalah&nbsp;<strong>Javascript library<\/strong>&nbsp;yang digunakan untuk membangun<strong>&nbsp;user interface<\/strong>&nbsp;(antar muka), jadi react itu adalah sebuah library bukan sebuah framework<\/p>\r\n<p>reactjs sendiri di kembangkan oleh facebook. react dibuat oleh Jordan Walke, seorang software engineer di Facebook, yang merilis prototipe awal React yang disebut &ldquo;FaxJS &ldquo;.<\/p>\r\n<p>berikut ini hal-hal yang penting dalam reactjs:<\/p>\r\n<h3 id=\"9f62\">1. Components<\/h3>\r\n<p><strong>Component<\/strong>s&nbsp;bisa di bilang hal yang sangat penting di reactjs. Components adalah semacam konsep bagaimana cara untuk membuat tiap bagian dari UI (tampilan) bisa bekerja secara mandiri dan terisolasi dari bagian-bagian yang lain.<\/p>\r\n<p>Sebenarnya secara sadar atau tidak sadar bagi yang sering bekerja dengan kode HTML, selalu melakukan pemisahan bagian dari halaman-halaman misalnya&nbsp;<em>Header<\/em>,&nbsp;<em>Content<\/em>, dan&nbsp;<em>Footer<\/em>. Biasanya tujuannya agar kode tidak menumpuk di satu halaman sehingga di pisahkan ke file-file kecil yang lebih spesifik fungsinya dan kode lebih&nbsp;<em>maintainable<\/em>&nbsp;jika ada perbaikan.<\/p>\r\n<p><strong>Khusus di reactjs&nbsp;<\/strong>bahkan hampir bagian terkecil di tampilan disarankan untuk dipisahkan. components ini memiliki sifat reusable yang membuat developer tidak perlu menyalin halaman atau komponen yang sama berulang-ulang<\/p>\r\n<p>berikut ini ilustrasi components di reactjs:<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-8047\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-67-1024x651.png\" sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-67-1024x651.png 1024w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-67-300x191.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-67-768x489.png 768w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-67.png 1105w\" alt=\"\" width=\"85%\" \/>\r\n<figcaption>illustrasi components<\/figcaption>\r\n<\/figure>\r\n<h3 id=\"9b23\">2. JSX<\/h3>\r\n<p>JSX merupakan ekstensi javascript yang membuat kita dapat menuliskan tag HTML di dalam javascript.<\/p>\r\n<div class=\"wp-block-image\">\r\n<figure class=\"aligncenter size-large\"><img class=\"wp-image-8027\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-58.png\" sizes=\"(max-width: 395px) 100vw, 395px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-58.png 395w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-58-300x33.png 300w\" alt=\"\" width=\"395\" height=\"43\" \/>\r\n<figcaption>illustrasi jsx<\/figcaption>\r\n<\/figure>\r\n<\/div>\r\n<p>pada reactjs ini kita akan JSX dan mungkin ada sedikit perbedaan di dalamnya, tetapi untuk yang sudah memahami html ini tidak akan terlihat sulit<\/p>\r\n<h3 id=\"78a0\">3. Virtual DOM<\/h3>\r\n<p>Jika mulai mendalami React, akan ada pertanyaan apa itu&nbsp;<em>virtual&nbsp;<\/em>DOM?&nbsp;<em>Virtual&nbsp;<\/em>DOM adalah representasi DOM secara&nbsp;<em>virtual<\/em>.<\/p>\r\n<p>Kenapa React menggunakan&nbsp;<em>virtual&nbsp;<\/em>DOM? JavaScript itu sebenarnya&nbsp;cepat. Yang membuat JavaScript terasa&nbsp;lambat adalah ketika JavaScript mengolah DOM. React membuat&nbsp;<em>virtual&nbsp;<\/em>DOM untuk mempercepat urusan tersebut.<\/p>\r\n<p>React melakukan semua operasi di dalam&nbsp;<em>virtual&nbsp;<\/em>DOM. Setelah operasi tersebut selesai, React menulis perubahan tersebut di DOM.<\/p>\r\n<p>Proses di React jika ada perubahan suatu elemen di dalam DOM:<\/p>\r\n<p>1. React sudah mempunyai representasi dari DOM di virtual DOM.<\/p>\r\n<p>2. React menerima representasi DOM yang berisi perubahan.<\/p>\r\n<p>3. React membandingkan perbedaan kedua representasi lama dan baru.<\/p>\r\n<p>4. Hasil dari perbandingan tersebut dimasukkan ke antrian.<\/p>\r\n<p>5. Terakhir React akan me-<em>render&nbsp;<\/em>ulang&nbsp;<em>patch&nbsp;<\/em>tersebut ke DOM<\/p>\r\n<p>Analoginya begini, saya punya pensil dan spidol. Ketika saya menulis di kertas menggunakan spidol dan melakukan kesalahan (<em>typo<\/em>) di tengah paragraf maka saya harus mengganti dengan kertas yang baru dan menulis lagi dari awal.<\/p>\r\n<p>Namun jika saya menggunakan pensil, saya bisa menghapus kesalahan tersebut dengan penghapus tanpa mengulang lagi dari awal.<\/p>\r\n<h3 id=\"de66\">4. States &amp; Lifecycle<\/h3>\r\n<p><strong>State&nbsp;<\/strong>adalah asal dari suatu data. Komponen pada react tentunya membutuhkan data (tidak semua namun rata-rata membutuhkan data). Data tersebut dapat berasal dari mana saja. State adalah salah satu sumber data tersebut. Selain state data dari komponen juga dapat berasal dari props (bukan property).<\/p>\r\n<p><strong>Lifecycle&nbsp;<\/strong>dalam sebuah komponen dalam react, terdapat tiga lifecycle berikut: Inisialisasi \/ mounting (ketika komponen dibuat\/ditambahkan pertama kali pada DOM)<\/p>\r\n<p>Update \/ rerender (ketika terdapat perubahan state\/prop yang mengakibatkan perubahan pada DOM)<\/p>\r\n<p>Unmounting (ketika komponen akan dihapus dari DOM)<\/p>\r\n<p>Pada setiap lifecycle tersebut, komponen react akan mengeksekusi method\/fungsi yang berbeda yang kita sebut sebagai lifecycle methods. Beberapa method mempunyai prefix will dan did yang menunjukkan kapan method tersebut akan dieksekusi.<\/p>\r\n<h2 id=\"setup-dan-installasi-reactjs\">Installasi dan setup ReactJS<\/h2>\r\n<p>sebelum ke installasi dan setup ada beberapa requirements atau prasyaratnya yaitu:<\/p>\r\n<ul>\r\n<li>nodeJS (versi LTS terbaru)<\/li>\r\n<li>text editor (visual studio code, sublime, atom dll)<\/li>\r\n<li>terminal (bisa cmd, git bash atau terminal di text editor)<\/li>\r\n<\/ul>\r\n<p>berikut ini step installasi dan setup ReactJS:<\/p>\r\n<p><strong>1. installasi<\/strong><\/p>\r\n<p>pertama masuk ke terminal lalu pindah ke folder yang diinginkan untuk installasi project reactjs, lalu jalankan perintah seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>npx create-react-app my-app<\/code><\/pre>\r\n<p>untuk text &ldquo;my-app&rdquo; dapat di ganti sesuai dengan nama project yang kita inginkan<\/p>\r\n<div class=\"wp-block-image\">\r\n<figure class=\"aligncenter size-large\"><img class=\"wp-image-8028\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-59.png\" sizes=\"(max-width: 491px) 100vw, 491px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-59.png 491w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-59-300x101.png 300w\" alt=\"\" width=\"491\" height=\"165\" \/>\r\n<figcaption>illustrasi create react app<\/figcaption>\r\n<\/figure>\r\n<\/div>\r\n<p>tunggulah hingga proses installasi selesai<\/p>\r\n<p><strong>2. menjalankan project reactjs yang sudah di install<\/strong><\/p>\r\n<p>pada terminal pindahkan posisinya menuju folder my-app (jika nama appnyna berbeda bisa di sesuaikan dengan). lalu ketikkan perintah<\/p>\r\n<p><code>npm start<\/code><\/p>\r\n<p>seperti di gambar di bawah ini:<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-8030\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-60.png\" sizes=\"(max-width: 786px) 100vw, 786px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-60.png 786w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-60-300x110.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-60-768x282.png 768w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-60-683x250.png 683w\" alt=\"\" width=\"786\" height=\"289\" \/>\r\n<figcaption>illustrasi npm start<\/figcaption>\r\n<\/figure>\r\n<p>setelah itu otomatis browser default anda menambahkan tab dengan url localhost:3000(default port untuk localhostnya adalah 3000) yang menampilkan tampil react app seperti di bawah ini<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-8031\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-61-1024x460.png\" sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-61-1024x460.png 1024w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-61-300x135.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-61-768x345.png 768w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-61.png 1304w\" alt=\"\" width=\"85%\" \/>\r\n<figcaption>starter react<\/figcaption>\r\n<\/figure>\r\n<p><strong>3. edit file app.js untuk mencoba beberapa kodenya<\/strong>&nbsp;<\/p>\r\n<p>pada gambar diatas kita di beritahu bahwa kita dapat mengedit file app.js di dalam folder src, mari kita ubah sedikit app js tersebut<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-8032\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-62.png\" sizes=\"(max-width: 443px) 100vw, 443px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-62.png 443w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-62-300x236.png 300w\" alt=\"\" width=\"443\" height=\"348\" \/><\/figure>\r\n<p>pada app.js tersebut maka anda akan mendapatkan kode seperti di bawah ini<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-8034\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-63.png\" sizes=\"(max-width: 671px) 100vw, 671px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-63.png 671w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-63-300x226.png 300w\" alt=\"\" width=\"671\" height=\"506\" \/><\/figure>\r\n<p>disini kita coba hapus semua tag header lalu masukkan kode baru seperti di bawah ini:<\/p>\r\n<pre class=\"wp-block-code\"><code>&lt;h1&gt;Hello World&lt;\/h1&gt;<\/code><\/pre>\r\n<p>maka akan muncul tampilan seperti di bawah ini:<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-8039\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-66-1024x126.png\" sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-66-1024x126.png 1024w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-66-300x37.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-66-768x95.png 768w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/image-66.png 1352w\" alt=\"\" width=\"85%\" \/><\/figure>\r\n<p>selamat anda telah membuat app react pertama anda. untuk detail mengenai components, props, state dan lain sebagainya akan di berikan detailnya di materi berikutnya.<\/p>\r\n<p><strong>Referensi<\/strong>:<\/p>\r\n<ul>\r\n<li><a href=\"https:\/\/reactjs.org\/docs\/create-a-new-react-app.html\">https:\/\/reactjs.org\/docs\/create-a-new-react-app.html<\/a><\/li>\r\n<li><a href=\"https:\/\/blog.codigo.id\/react-js-60fa358daefc\">https:\/\/blog.codigo.id\/react-js-60fa358daefc<\/a><\/li>\r\n<li><a href=\"https:\/\/medium.com\/@adhiguna.sabril\/mengenal-components-di-react-js-dengan-es6-2bcd6ba74c73\">https:\/\/medium.com\/@adhiguna.sabril\/mengenal-components-di-react-js-dengan-es6-2bcd6ba74c73<\/a><\/li>\r\n<\/ul>\r\n<p>&nbsp;<\/p>\r\n<\/div>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-05-06 08:00:00","status_publish":"publish","urutan":4,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:18:59","waktu_publish_formatted":" Kamis, 06 Mei 2021. 08:00:00 WIB."},{"id":776,"uuid":"2ed4a159-3987-4e43-b9ab-980b12c4a2e7","author_user_id":4336,"materi_section_id":213,"judul":"Hari Ke-10 \u2013 Components & Props","permalink":"hari-ke-10-components-props","konten":"<div class=\"entry-content\">\r\n<p>Components memungkinkan Anda membagi UI menjadi bagian-bagian yang independen dan dapat digunakan kembali, dan anda bisa mengaturnya setiap bagian secara terpisah<\/p>\r\n<p>sedangkan props merupakan properti-properti dari component yang dapat kita gunakan untuk menampilkan data, biasanya digunakan untuk inisialisasi data<\/p>\r\n<p>Secara konseptual, komponen seperti function JavaScript. Mereka menerima input dan mengembalikan React Element yang akan muncul di layar<\/p>\r\n<h2 id=\"function-components-dan-class-components\">Function Components dan Class Components<\/h2>\r\n<p>untuk mendefinisikan component terdapat dua cara yaitu dengan menggunakan function dan class<\/p>\r\n<p>berikut ini contoh component yang menggunakan function<\/p>\r\n<pre class=\"wp-block-code\"><code>function Welcome(props) {\r\n  return &lt;h1&gt;Hello, {props.name}&lt;\/h1&gt;;\r\n}<\/code><\/pre>\r\n<p>function di atas ialah react component yang valid karena function itu menerima argumen &ldquo;props&rdquo; (singkatan dari properties) tunggal dengan data dan akan memberikan return ke React Element. kita bisa menyebut function tersebut dengan &ldquo;Function Component&rdquo; karna secara harfiah itu adalah function JavaScript.<\/p>\r\n<p>dan kita juga bisa menggunakan ES6 class untuk mebangun component. berikut ini contoh component dengan menggunakan class React.Component:<\/p>\r\n<pre class=\"wp-block-code\"><code>class Welcome extends React.Component {\r\n  render() {\r\n    return &lt;h1&gt;Hello, {this.props.name}&lt;\/h1&gt;;\r\n  }\r\n}<\/code><\/pre>\r\n<h2 id=\"menyusun-components\">Menyusun Components<\/h2>\r\n<p>Component dapat merujuk ke component lain dalam outputnya. Ini memungkinkan kita bisa menggunakan component yang sama secara berulang-ulang (reusable).<\/p>\r\n<p>berikui ini contoh untuk cara menyusun components (asumsi ini di folder app.js)<\/p>\r\n<pre class=\"wp-block-code\"><code>import React from 'react';\r\nimport '.\/App.css';\r\n\r\nclass Welcome extends React.Component {\r\n  render() {\r\n    return &lt;h1&gt;Hello, {this.props.name}&lt;\/h1&gt;;\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;Welcome name=\"Sarah\" \/&gt;\r\n      &lt;Welcome name=\"Michael\" \/&gt;\r\n      &lt;Welcome name=\"John\" \/&gt;\r\n    &lt;\/div&gt;\r\n  );\r\n}\r\n\r\nexport default App;<\/code><\/pre>\r\n<h2 id=\"mengolah-data-dan-mengekstrak-component\">Mengolah data dan mengekstrak component<\/h2>\r\n<p>mungkin timbul pertanyaan bagaimana cara mengolah data dan di munculkan ke component, lalu bagaimana jika ingin menggunakan component yang berbeda-beda dan di gunakan gabungkan satu tempat. mari kita simak contoh di bawah ini<\/p>\r\n<p>misal ada data seperti di bawah ini:<\/p>\r\n<pre class=\"wp-block-code\"><code>var person = [\r\n  {name: \"sarah\", age: 25},\r\n  {name: \"michael\", age: 30},\r\n  {name: \"john\", age: 33}\r\n]<\/code><\/pre>\r\n<p>lalu ada dua component seperti di bawah ini:<\/p>\r\n<p><strong>welcome component<\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>class Welcome extends React.Component {\r\n  render() {\r\n    return &lt;h1&gt;Hello, {this.props.name}&lt;\/h1&gt;;\r\n  }\r\n}<\/code><\/pre>\r\n<p><strong>age component<\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>class Age extends React.Component {\r\n  render() {\r\n    return &lt;h1&gt;your age is {this.props.age}&lt;\/h1&gt;;\r\n  }\r\n}<\/code><\/pre>\r\n<p>untuk mengolah data person di atas dan menggabungkan dua component tersebut kita bisa membuat component baru yang melakukan dua hal tersebut.<\/p>\r\n<p>berikut ini contoh pengolahan data dan penggabungan dua component tersebut:<\/p>\r\n<pre class=\"wp-block-code\"><code>var person = [\r\n  {name: \"sarah\", age: 25},\r\n  {name: \"michael\", age: 30},\r\n  {name: \"john\", age: 33}\r\n]\r\n\r\nclass UserInfo extends React.Component {\r\n  render() {\r\n    return (\r\n      &lt;&gt;\r\n        {person.map(el=&gt; {\r\n          return (\r\n            &lt;div style={{border: \"1px solid #000\", padding: \"20px\"}}&gt;\r\n              &lt;Welcome name={el.name}\/&gt; \r\n              &lt;ShowAge age={el.age}\/&gt; \r\n            &lt;\/div&gt;\r\n          )\r\n        })}\r\n      &lt;\/&gt;\r\n    )\r\n  }\r\n}<\/code><\/pre>\r\n<p>lalu penerapannya dalam file app.js adalah seperti berikut ini:<\/p>\r\n<pre class=\"wp-block-code\"><code>import React from 'react';\r\nimport '.\/App.css';\r\n\r\nclass Welcome extends React.Component {\r\n  render() {\r\n    return &lt;h1&gt;Hello, {this.props.name}&lt;\/h1&gt;;\r\n  }\r\n}\r\n\r\nclass ShowAge extends React.Component {\r\n  render() {\r\n    return &lt;h1&gt;your age is {this.props.age}&lt;\/h1&gt;;\r\n  }\r\n}\r\n\r\nvar person = [\r\n  {name: \"sarah\", age: 25},\r\n  {name: \"michael\", age: 30},\r\n  {name: \"john\", age: 33}\r\n]\r\n\r\n\r\n\r\nclass UserInfo extends React.Component {\r\n  render() {\r\n    return (\r\n      &lt;&gt;\r\n        {person.map(el=&gt; {\r\n          return (\r\n            &lt;div style={{border: \"1px solid #000\", padding: \"20px\"}}&gt;\r\n              &lt;Welcome name={el.name}\/&gt; \r\n              &lt;ShowAge age={el.age}\/&gt; \r\n            &lt;\/div&gt;\r\n          )\r\n        })}\r\n      &lt;\/&gt;\r\n    )\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;UserInfo \/&gt;\r\n    &lt;\/div&gt;\r\n  );\r\n}\r\n\r\nexport default App;<\/code><\/pre>\r\n<h2 id=\"import-dan-export-module\">import dan export module<\/h2>\r\n<p>seperti yang dilihat diatas maka file app.js akan terlalu penuh, lalu apakah kita bisa membuat file tersendiri untuk UserInfo misal, jawabannya adalah iya<\/p>\r\n<p>buatlah file UserInfo.js di dalam folder src lalu masukkan kode di bawah ini:<\/p>\r\n<pre class=\"wp-block-code\"><code>import React from 'react';\r\n\r\nclass Welcome extends React.Component {\r\n  render() {\r\n    return &lt;h1&gt;Hello, {this.props.name}&lt;\/h1&gt;;\r\n  }\r\n}\r\n\r\nclass ShowAge extends React.Component {\r\n  render() {\r\n    return &lt;h1&gt;your age is {this.props.age}&lt;\/h1&gt;;\r\n  }\r\n}\r\n\r\nvar person = [\r\n  {name: \"sarah\", age: 25},\r\n  {name: \"michael\", age: 30},\r\n  {name: \"john\", age: 33}\r\n]\r\n\r\nclass UserInfo extends React.Component {\r\n  render() {\r\n    return (\r\n      &lt;&gt;\r\n        {person.map(el=&gt; {\r\n          return (\r\n            &lt;div style={{border: \"1px solid #000\", padding: \"20px\"}}&gt;\r\n              &lt;Welcome name={el.name}\/&gt; \r\n              &lt;ShowAge age={el.age}\/&gt; \r\n            &lt;\/div&gt;\r\n          )\r\n        })}\r\n      &lt;\/&gt;\r\n    )\r\n  }\r\n}\r\n\r\nexport default UserInfo<\/code><\/pre>\r\n<p>lalu untuk import UserInfo di app.js bisa adalah seperti di bawah ini:<\/p>\r\n<pre class=\"wp-block-code\"><code>import React from 'react';\r\nimport '.\/App.css';\r\nimport UserInfo from '.\/UserInfo';\r\n\r\nfunction App() {\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;UserInfo \/&gt;\r\n    &lt;\/div&gt;\r\n  );\r\n}\r\n\r\nexport default App;<\/code><\/pre>\r\n<p><strong>Referensi<\/strong>:<\/p>\r\n<ul>\r\n<li><a href=\"https:\/\/id.reactjs.org\/docs\/components-and-props.html\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\">https:\/\/id.reactjs.org\/docs\/components-and-props.html<\/a><\/li>\r\n<\/ul>\r\n<p>&nbsp;<\/p>\r\n<\/div>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-05-07 08:00:00","status_publish":"publish","urutan":5,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:18:44","waktu_publish_formatted":" Jumat, 07 Mei 2021. 08:00:00 WIB."}]},{"id":214,"uuid":"a34293e4-83bf-48a5-8170-c60c45f47dda","materi_id":25,"nama":"Pekan 2 - Tugas","permalink":"pekan-2-tugas","urutan":5,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":null,"posting":[{"id":777,"uuid":"38eeea39-6294-41c3-8b98-a62209981bac","author_user_id":4336,"materi_section_id":214,"judul":"Tugas 6 \u2013 Javascript ES6","permalink":"tugas-6-javascript-es6","konten":"<div class=\"entry-content\">\r\n<h2 id=\"petunjuk-pengerjaan\"><strong>Petunjuk Pengerjaan<\/strong><\/h2>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<h3 id=\"1-menambahkan-folder-baru-dan-file-baru\"><strong>1. Menambahkan Folder Baru dan file baru<\/strong><\/h3>\r\n<p>Gunakanlah project yang sama dengan Tugas-1 (<strong>jangan buat repository baru lagi<\/strong>). Lalu buat folder baru dengan nama &ldquo;Tugas-6&rdquo; dan buatlah file tugas6.js<\/p>\r\n<p>sehingga struktur foldernya seperti di bawah ini<br \/><code>  Tugas-Harian-Part-1\/\r\n<br \/>&nbsp; &nbsp;Tugas-1\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-2\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-3\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-4\/<br \/>&nbsp; &nbsp;Tugas-5\/<br \/>&nbsp; &nbsp;Tugas-6\/<\/code><\/p>\r\n<h3 id=\"2-kerjakan-soal-di-bawah-ini\"><strong>2. Kerjakan Soal di bawah ini<\/strong><\/h3>\r\n<p>kerjakan soal di bawah ini di dalam file tugas6.js, perlu di ingat pada tugas ini yang di utamakan bukan hasil\/outputnya saja tapi juga kode nya sesuai dengan instruksi soal<\/p>\r\n<h4><strong>Soal 1<\/strong><\/h4>\r\n<p>buatlah <strong>dua fungsi<\/strong> yaitu fungsi <strong>luas lingkaran<\/strong> dan <strong>keliling lingkaran<\/strong> dengan <strong>arrow function <\/strong>(wajib ada parameternya)<strong>&nbsp;<\/strong> lalu gunakan let atau const di dalam soal ini<\/p>\r\n<h4><strong>Soal 2<\/strong><\/h4>\r\n<p>Tulislah sebuah <strong>arrow function <\/strong>dengan nama introduce yang parameternya menggunakan <strong>rest parameter&nbsp;<\/strong>dan menghasilkan kalimat \"Pak John adalah seorang penulis yang berusia 30 tahun\" <strong>menggunakan template literal.<br \/><\/strong><\/p>\r\n<pre class=\"wp-block-preformatted\">\/* \r\n    Tulis kode function di sini\r\n*\/\r\n <br \/>\/\/kode di bawah ini jangan dirubah atau dihapus\r\nconst perkenalan = introduce(\"John\", \"30\", \"Laki-Laki\", \"penulis\")\r\nconsole.log(perkenalan) \/\/ Menampilkan \"Pak John adalah seorang penulis yang berusia 30 tahun\" <\/pre>\r\n<h4><strong>Soal 3<\/strong><\/h4>\r\n<p>return dalam fungsi di bawah ini masih menggunakan object literal dalam ES5, ubahlah menjadi bentuk yang lebih sederhana di ES6.<\/p>\r\n<pre class=\"wp-block-preformatted\"> const newFunction = function literal(firstName, lastName){\r\n  return {\r\n    firstName: firstName,\r\n    lastName: lastName,\r\n    fullName: function(){\r\n      console.log(firstName + \" \" + lastName)\r\n    }\r\n  }\r\n}\r\n  <br \/>\/\/ kode di bawah ini jangan diubah atau dihapus sama sekali<br \/>console.log(newFunction(\"John\", \"Doe\").firstName)<br \/>console.log(newFunction(\"Richard\", \"Roe\").lastName)<br \/>newFunction(\"William\", \"Imoh\").fullName()<\/pre>\r\n<h4><strong>Soal 4<\/strong><\/h4>\r\n<p>Diberikan sebuah objek sebagai berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">let phone = {<br \/>   name: \"Galaxy Note 20\",<br \/>   brand: \"Samsung\",<br \/>   year: 2020,<br \/>   colors: [\"Mystic Bronze\", \"Mystic White\", \"Mystic Black\"]<br \/>}<br \/><code>\/\/ kode diatas ini jangan di rubah atau di hapus sama sekali<\/code><br \/><br \/>\/* Tulis kode jawabannya di sini *\/ <\/pre>\r\n<pre class=\"wp-block-preformatted\">\/\/ kode di bawah ini jangan dirubah atau dihapus<br \/>console.log(phoneBrand, phoneName, year, colorBlack, colorBronze) <\/pre>\r\n<p>tuliskan kode jawaban yang berisi hasil destructuring yang nantinya akan di gunakan dalam console.log&nbsp;<\/p>\r\n<h4><strong>soal 5<\/strong><\/h4>\r\n<p>buatlah variabel-variabel seperti di bawah ini:<\/p>\r\n<pre class=\"wp-block-code\"><code>let warna = [\"biru\", \"merah\", \"kuning\" , \"hijau\"]\r\n\r\nlet dataBukuTambahan= {\r\n  penulis: \"john doe\",\r\n  tahunTerbit: 2020 \r\n}\r\n\r\nlet buku = {\r\n  nama: \"pemograman dasar\",\r\n  jumlahHalaman: 172,\r\n  warnaSampul:[\"hitam\"]\r\n}<br \/>\/\/ kode diatas ini jangan di rubah atau di hapus sama sekali<br \/><br \/>\/* Tulis kode jawabannya di sini *\/ <\/code><\/pre>\r\n<p>gabungkanlah variabel warna (gabungkan dengan atribut warnaSampul) dan dataBukuTambahan ke variabel buku dengan menggunakan <strong>spread operator<\/strong><\/p>\r\n<p>berikut ini contoh output tugas 6:<\/p>\r\n<p><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/03\/tugas-6-c.png\" \/><\/p>\r\n<p>&nbsp;<\/p>\r\n<h3 id=\"3-tips\"><strong>3. Tips<\/strong><\/h3>\r\n<p>Agar soal mudah di periksa trainer maka sebelum jawaban soal sisipkan komentar seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ soal 1\r\n.... jawaban soal 1\r\n\r\n\/\/ soal 2\r\n.... jawaban soal 2\r\n\r\ndan seterusnya<\/code>&nbsp;<\/pre>\r\n<h3 id=\"3-tips\"><strong>4. Kumpulkan Tugas<\/strong><\/h3>\r\n<p>Lalu update tugasnya ke repository masing-masing. Selanjutnya kumpulkan tugas Anda dengan melakukan copy link commit yang telah dibuat dari halaman repository project gitlab\/github ke akun Anda di <a href=\"\/\">https:\/\/sanbercode.com\/<\/a>&nbsp;.<\/p>\r\n<p>Untuk selengkapnya, teknis pengumpulan tugas dapat di lihat di tab materi -&gt; lalu klik pendahuluan -&gt; lalu klik teknis pengumpulan<\/p>\r\n<h3 id=\"4-membuat-layout-html-css\"><\/h3>\r\n<\/div>\r\n<p>&nbsp;<\/p>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-05-03 08:00:00","status_publish":"publish","urutan":1,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-05-04 10:24:10","waktu_publish_formatted":" Senin, 03 Mei 2021. 08:00:00 WIB."},{"id":778,"uuid":"5f8077c9-2fc0-4490-833f-0818ab037e09","author_user_id":4336,"materi_section_id":214,"judul":"Tugas 7 \u2013 Javascript Class","permalink":"tugas-7-javascript-class","konten":"<div class=\"entry-content\">\r\n<h2 id=\"petunjuk-pengerjaan\"><strong>Petunjuk Pengerjaan<\/strong><\/h2>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<h3 id=\"1-menambahkan-folder-baru-dan-file-baru\"><strong>1. Menambahkan Folder Baru dan file baru<\/strong><\/h3>\r\n<p>Gunakanlah project yang sama dengan Tugas-1 (<strong>jangan buat repository baru lagi<\/strong>). Lalu buat folder baru dengan nama &ldquo;Tugas-7&rdquo; dan buatlah file tugas7.js<\/p>\r\n<p>sehingga struktur foldernya seperti di bawah ini<br \/><code>  Tugas-Harian-Part-1\/\r\n<br \/>&nbsp; &nbsp;Tugas-1\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-2\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-3\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-4\/<br \/>&nbsp; &nbsp;Tugas-5\/<br \/>&nbsp; &nbsp;Tugas-6\/<br \/>&nbsp; &nbsp;Tugas-7\/<\/code><\/p>\r\n<h3 id=\"1-membuat-file-html\"><strong>2. Kerjakan Soal di bawah ini<\/strong><\/h3>\r\n<p>kerjakan soal di bawah ini di dalam folder &ldquo;Tugas-7&rdquo;<\/p>\r\n<h4>soal 1<\/h4>\r\n<p>Terdapat sebuah class Animal yang memiliki sebuah constructor name, default property legs= 4 dan cold_blooded = false.<\/p>\r\n<p><strong>Release 0<\/strong><\/p>\r\n<p>Buatlah class Animal yang menerima satu parameter constructor berupa name. Secara default class Animal akan memiliki property yaitu legs (jumlah kaki) yang bernilai 4 dan cold_blooded bernilai false.<\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Gunakan method getter dan setter untuk mengakses property di dalam class<\/p>\r\n<\/blockquote>\r\n<pre class=\"wp-block-preformatted\">class Animal {\r\n    \/\/ Code class di sini\r\n}\r\n \r\nvar sheep = new Animal(\"shaun\");\r\n \r\nconsole.log(sheep.name) \/\/ \"shaun\"\r\nconsole.log(sheep.legs) \/\/ 4\r\nconsole.log(sheep.cold_blooded) \/\/ false<br \/>sheep.legs = 3<br \/>console.log(sheep.legs)<\/pre>\r\n<p><strong>Release 1<\/strong><\/p>\r\n<p>Buatlah class Frog dan class Ape yang merupakan inheritance dari class Animal. Perhatikan bahwa Ape (Kera) merupakan hewan berkaki 2, hingga dia tidak menurunkan sifat jumlah kaki 4 dari class Animal. class Ape memiliki function yell() yang menampilkan &ldquo;Auooo&rdquo; dan class Frog memiliki function jump() yang akan menampilkan &ldquo;hop hop&rdquo;.<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ Code class Ape dan class Frog di sini\r\n \r\nvar sungokong = new Ape(\"kera sakti\")\r\nsungokong.yell() \/\/ \"Auooo\"<br \/>sungokong.legs = 2<br \/>console.log(sungokong.name)<br \/>console.log(sungokong.legs)<br \/>console.log(sungokong.cold_blooded)<br \/><br \/>var kodok = new Frog(\"buduk\")\r\nkodok.jump() \/\/ \"hop hop\"<br \/>console.log(kodok.name)<br \/>console.log(kodok.legs)<br \/>console.log(kodok.cold_blooded)<\/pre>\r\n<h4>soal 2<\/h4>\r\n<p>Terdapat sebuah class dengan nama&nbsp;<code>Clock<\/code>&nbsp;yang ditulis seperti penulisan pada function, ubahlah fungsi tersebut menjadi class dan pastikan fungsi tersebut tetap berjalan dengan baik. Jalankan fungsi di terminal\/console Anda untuk melihat hasilnya. (tekan tombol Ctrl + C pada terminal untuk menghentikan method clock.start())<\/p>\r\n<blockquote class=\"wp-block-quote\">\r\n<p>Hint: Fokus soal ini hanya pada kegiatan mengubah struktur function&nbsp;<code>Clock&nbsp;<\/code>menjadi class. Jangan lupa menambahkan constructor di dalam class, dan ubah function di dalam&nbsp;<code>Clock&nbsp;<\/code>menjadi method pada class.<\/p>\r\n<\/blockquote>\r\n<pre class=\"wp-block-preformatted\">function&nbsp;Clock({&nbsp;template&nbsp;})&nbsp;{\r\n&nbsp;&nbsp;\r\n&nbsp;&nbsp;var&nbsp;timer;\r\n\r\n&nbsp;&nbsp;function&nbsp;render()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;date&nbsp;=&nbsp;new&nbsp;Date();\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;hours&nbsp;=&nbsp;date.getHours();\r\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(hours&nbsp;&lt;&nbsp;10)&nbsp;hours&nbsp;=&nbsp;'0'&nbsp;+&nbsp;hours;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;mins&nbsp;=&nbsp;date.getMinutes();\r\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(mins&nbsp;&lt;&nbsp;10)&nbsp;mins&nbsp;=&nbsp;'0'&nbsp;+&nbsp;mins;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;secs&nbsp;=&nbsp;date.getSeconds();\r\n&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(secs&nbsp;&lt;&nbsp;10)&nbsp;secs&nbsp;=&nbsp;'0'&nbsp;+&nbsp;secs;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;output&nbsp;=&nbsp;template\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.replace('h',&nbsp;hours)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.replace('m',&nbsp;mins)\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.replace('s',&nbsp;secs);\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;console.log(output);\r\n&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;this.stop&nbsp;=&nbsp;function()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;clearInterval(timer);\r\n&nbsp;&nbsp;};\r\n\r\n&nbsp;&nbsp;this.start&nbsp;=&nbsp;function()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;render();\r\n&nbsp;&nbsp;&nbsp;&nbsp;timer&nbsp;=&nbsp;setInterval(render,&nbsp;1000);\r\n&nbsp;&nbsp;};\r\n\r\n}\r\n\r\nvar&nbsp;clock&nbsp;=&nbsp;new&nbsp;Clock({template:&nbsp;'h:m:s'});\r\nclock.start(); <\/pre>\r\n<p>function di atas diubah menjadi struktur class seperti berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">class Clock {\r\n    \/\/ Code di sini\r\n}\r\n\r\nvar&nbsp;clock&nbsp;=&nbsp;new&nbsp;Clock({template:&nbsp;'h:m:s'});\r\nclock.start();  <\/pre>\r\n<p>berikut ini contoh output dari tugas 7:<\/p>\r\n<p><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/01\/image-4.png\" \/><br \/><br \/>pada contoh output di atas soal 2 kebetulan saya mengeceknya ketika pukul 07.52-an<\/p>\r\n<h3><strong>3. Tips<\/strong><\/h3>\r\n<p>Agar soal mudah di periksa trainer maka sebelum jawaban soal sisipkan komentar seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ soal 1\r\n.... jawaban soal 1\r\n\r\n\/\/ soal 2\r\n.... jawaban soal 2\r\n\r\ndan seterusnya<\/code><\/pre>\r\n<h3 id=\"4-membuat-layout-html-css\"><strong>4. Kumpulkan Tugas<\/strong><\/h3>\r\n<pre class=\"wp-block-code\"><code><\/code><\/pre>\r\n<p>Lalu update tugasnya ke repository masing-masing. Selanjutnya kumpulkan tugas Anda dengan melakukan copy link commit yang telah dibuat dari halaman repository project gitlab\/github ke akun Anda di <a href=\"\/\">https:\/\/sanbercode.com\/<\/a>&nbsp;.<\/p>\r\n<pre class=\"wp-block-code\"><code><\/code><\/pre>\r\n<p>Untuk selengkapnya, teknis pengumpulan tugas dapat di lihat di&nbsp;<a href=\"https:\/\/blog.sanbercode.com\/docs\/kurikulum-reactjs\/pendahuluan\/teknis-pengumpulan-tugas\/\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"teknis pengumpulan tugas (opens in a new tab)\">teknis pengumpulan tugas<\/a><\/p>\r\n<\/div>","waktu_publish":"2021-05-04 08:00:00","status_publish":"publish","urutan":2,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-05-04 11:02:46","waktu_publish_formatted":" Selasa, 04 Mei 2021. 08:00:00 WIB."},{"id":779,"uuid":"171be66d-bb06-4a33-8bf7-47960779d314","author_user_id":4336,"materi_section_id":214,"judul":"Tugas 8 \u2013 Javascript \u2013 Asynchronous","permalink":"tugas-8-javascript-asynchronous","konten":"<h2 id=\"petunjuk-pengerjaan\"><strong>Petunjuk Pengerjaan<\/strong><\/h2>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<h3 id=\"1-menambahkan-folder-baru-dan-file-baru\"><strong>1. Menambahkan Folder Baru dan file baru<\/strong><\/h3>\r\n<p>Gunakanlah project yang sama dengan Tugas-1 (<strong>jangan buat repository baru lagi<\/strong>). Lalu buat folder baru dengan nama &ldquo;Tugas-8&rdquo;&nbsp;<\/p>\r\n<p>sehingga struktur foldernya seperti di bawah ini<br \/><code>  Tugas-Harian-Part-1\/\r\n<br \/>&nbsp; &nbsp;Tugas-1\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-2\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-3\/<\/code><br \/><code>&nbsp; &nbsp;Tugas-4\/<br \/>&nbsp; &nbsp;Tugas-5\/<br \/>&nbsp; &nbsp;Tugas-6\/<br \/>&nbsp; &nbsp;Tugas-7\/<br \/>&nbsp; &nbsp;Tugas-8\/<\/code><code><\/code><\/p>\r\n<h3 id=\"2-kerjakan-soal-di-bawah-ini\"><strong>2. Kerjakan Soal di bawah ini<\/strong><\/h3>\r\n<p>kerjakan soal di bawah ini di dalam folder &ldquo;Tugas-8&rdquo;<\/p>\r\n<h4><strong>Soal 1<\/strong><\/h4>\r\n<p>Kita mempunyai tumpukan buku untuk dibaca. Setiap buku memiliki waktu yang dibutuhkan untuk menghabiskan buku tersebut. Sudah disediakan function readBooks yang menerima tiga parameter: waktu, buku yang dibaca, dan sebuah callback. Salin code berikut ke dalam sebuah file bernama&nbsp;<code>callback.js<\/code>&nbsp;.<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ di callback.js\r\nfunction readBooks(time, book, callback ) {\r\n    console.log(\"saya membaca \" + book.name )\r\n    setTimeout(function(){\r\n        let sisaWaktu = 0\r\n        if(time &gt;= book.timeSpent) {\r\n            sisaWaktu = time - book.timeSpent\r\n            console.log(\"saya sudah membaca \" + book.name + \", sisa waktu saya \" + sisaWaktu)\r\n            callback(sisaWaktu) \/\/menjalankan function callback\r\n        } else {\r\n            console.log('waktu saya habis')\r\n            callback(time)\r\n        }   \r\n    }, book.timeSpent)\r\n}\r\n \r\nmodule.exports = readBooks <\/pre>\r\n<p>Masih satu folder dengan file&nbsp;<code>callback.js<\/code>, buatlah sebuah file dengan nama&nbsp;<code>index.js<\/code>&nbsp;lalu tuliskan code seperti berikut.<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ di index.js\r\nvar readBooks = require('.\/callback.js')\r\n \r\nvar books = [\r\n    {name: 'LOTR', timeSpent: 3000}, \r\n    {name: 'Fidas', timeSpent: 2000}, \r\n    {name: 'Kalkulus', timeSpent: 4000},\r\n    {name: 'komik', timeSpent: 1000}\r\n]\r\n \r\n\/\/ Tulis code untuk memanggil function readBooks di sini<\/pre>\r\n<p>lanjutkan code pada&nbsp;<code>index.js<\/code>&nbsp;untuk memanggil function readBooks. Buku yang akan dihabiskan adalah buku-buku di dalam array&nbsp;<code>books<\/code>. Pertama function readBooks menerima input waktu yang dimiliki yaitu 10000 ms (10 detik) dan books pada indeks ke-0. Setelah mendapatkan callback sisa waktu yang dikirim lewat callback, sisa waktu tersebut dipakai untuk membaca buku pada indeks ke-1. Begitu seterusnya sampai waktu habis atau semua buku sudah terbaca. Untuk melihat output, jalankan file&nbsp;<code>index.js<\/code>&nbsp;dengan node js :<\/p>\r\n<pre class=\"wp-block-preformatted\"> $ node index.js<\/pre>\r\n<hr class=\"wp-block-separator\" \/>\r\n<p>berikut ini contoh output soal 1:&nbsp;<\/p>\r\n<p><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/01\/tugas8-1.gif\" \/><\/p>\r\n<h4><strong>Soal 2<\/strong><\/h4>\r\n<p>Setelah no.1 berhasil, implementasikan function readBooks yang menggunakan callback di atas namun sekarang menggunakan Promise. Buatlah sebuah file dengan nama&nbsp;<code>promise.js<\/code>. Tulislah sebuah function dengan nama readBooksPromise yang me-return sebuah promise seperti berikut:<\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ di file promise.js\r\nfunction readBooksPromise (time, book) {\r\n  console.log(\"saya mulai membaca \" + book.name )\r\n  return new Promise( function (resolve, reject){\r\n    setTimeout(function(){\r\n      let sisaWaktu = time - book.timeSpent\r\n      if(sisaWaktu &gt;= 0 ){\r\n          console.log(\"saya sudah selesai membaca \" + book.name + \", sisa waktu saya \" + sisaWaktu)\r\n          resolve(sisaWaktu)\r\n      } else {\r\n          console.log(\"saya sudah tidak punya waktu untuk baca \"+ book.name)\r\n          reject(sisaWaktu)\r\n      }\r\n    }, book.timeSpent)\r\n  })\r\n}\r\n \r\nmodule.exports = readBooksPromise<\/pre>\r\n<p>Masih di folder yang sama dengan promise.js, buatlah sebuah file dengan nama&nbsp;<code>index2.js<\/code>. Tuliskan code sebagai berikut<\/p>\r\n<pre class=\"wp-block-preformatted\">var readBooksPromise = require('.\/promise.js')\r\n \r\nvar books = [\r\n    {name: 'LOTR', timeSpent: 3000}, \r\n    {name: 'Fidas', timeSpent: 2000}, \r\n    {name: 'Kalkulus', timeSpent: 4000}\r\n]\r\n \r\n\/\/ Lanjutkan code untuk menjalankan function readBooksPromise <\/pre>\r\n<p>Lakukan hal yang sama dengan soal no.1, habiskan waktu selama 10000 ms (10 detik) untuk membaca semua buku dalam array books.!<\/p>\r\n<p>berikut ini contoh output soal 2:&nbsp;<\/p>\r\n<p><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/01\/tugas8-2-edited.gif\" \/><\/p>\r\n<h4>Soal 3<\/h4>\r\n<p>Buatlah sebuah file dengan nama&nbsp;<code>promise2.js<\/code>. Tulislah sebuah function dengan nama filterBookPromise yang me-return sebuah promise seperti berikut:<\/p>\r\n<pre class=\"wp-block-code\"><code>function filterBooksPromise(colorful, amountOfPage){\r\n  return new Promise(function(resolve, reject){\r\n    var books=[\r\n        {name: \"shinchan\", totalPage: 50, isColorful: true},\r\n        {name: \"Kalkulus\", totalPage: 250, isColorful: false},\r\n        {name: \"doraemon\", totalPage: 40, isColorful: true},\r\n        {name: \"algoritma\", totalPage: 250, isColorful: false},\r\n    ]\r\n    if (amountOfPage &gt;= 40) {\r\n        resolve(books.filter(x=&gt; x.totalPage &gt;= amountOfPage &amp;&amp; x.isColorful == colorful));\r\n      } else {\r\n        var reason= new Error(\"Maaf buku di bawah 40 halaman tidak tersedia\")\r\n        reject(reason);\r\n      }\r\n  });\r\n}<br \/>\r\nmodule.exports = filterBooksPromise<\/code><\/pre>\r\n<p>Masih di folder yang sama dengan promise2.js, buatlah sebuah file dengan nama&nbsp;<code>index3.js<\/code>. Tuliskan code sebagai berikut:<\/p>\r\n<pre class=\"wp-block-code\"><code>var filterBooksPromise = require('.\/promise2.js')\r\n \r\n\/\/ Lanjutkan code untuk menjalankan function filterBookPromise<\/code><\/pre>\r\n<p>gunakan promise dengan kondisi seperti di bawah ini:<\/p>\r\n<ul>\r\n<li>bukunya berwarna dan jumlah halamannya 40&nbsp;<\/li>\r\n<li>bukunya tidak berwarna dan jumlah halamannya 250 (<strong>gunakan async\/await untuk kondisi ini<\/strong>)<\/li>\r\n<li>bukunya berwarna dan jumlah halamannya 30&nbsp;(<strong>gunakan async\/await untuk kondisi ini<\/strong>)<strong>&nbsp;<\/strong><\/li>\r\n<\/ul>\r\n<p>berikut ini contoh output soal 3:<\/p>\r\n<p><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/03\/tugas-8-3.png\" \/><\/p>\r\n<h3 id=\"4-membuat-layout-html-css\"><strong>3. Kumpulkan Tugas<\/strong><\/h3>\r\n<pre class=\"wp-block-code\"><code><\/code><\/pre>\r\n<p>Lalu update tugasnya ke repository masing-masing. Selanjutnya kumpulkan tugas Anda dengan melakukan copy link commit yang telah dibuat dari halaman repository project gitlab\/github ke akun Anda di <a href=\"\/\">https:\/\/sanbercode.com\/<\/a>&nbsp;.<\/p>\r\n<pre class=\"wp-block-code\"><code><\/code><\/pre>\r\n<p>Untuk selengkapnya, teknis pengumpulan tugas dapat di lihat di&nbsp;<a href=\"https:\/\/blog.sanbercode.com\/docs\/kurikulum-reactjs\/pendahuluan\/teknis-pengumpulan-tugas\/\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"teknis pengumpulan tugas (opens in a new tab)\">teknis pengumpulan tugas<\/a><\/p>\r\n<p>&nbsp;<\/p>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-05-05 08:00:00","status_publish":"publish","urutan":3,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:17:35","waktu_publish_formatted":" Rabu, 05 Mei 2021. 08:00:00 WIB."},{"id":780,"uuid":"ed920e7a-0686-487b-85c3-45cf96c5514f","author_user_id":4336,"materi_section_id":214,"judul":"Tugas 9 \u2013 Pengenalan Reactjs","permalink":"tugas-9-pengenalan-reactjs","konten":"<div class=\"entry-content\">\r\n<h2 id=\"petunjuk-pengerjaan\">Petunjuk Pengerjaan<\/h2>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<h3 id=\"1-buatlah-project-reactjs\">1. Buatlah Project ReactJS<\/h3>\r\n<p>buatlah project reactjs pada folder tugas harian dengan nama &ldquo;Tugas-Harian-Part-2&rdquo; pastikan folder &ldquo;tugas-Harian-Part-2&rdquo; berada sejajar dengan folder &ldquo;Tugas-Harian-Part-1&rdquo;<\/p>\r\n<p>jika sudah terlanjur membuat project dengan nama lain silahkan rename saja menjadi &ldquo;tugas-Harian-Part-2&rdquo;<\/p>\r\n<p>sehingga struktur foldernya akan terlihat seperti di bawah ini:<\/p>\r\n<p><code>im-sanbercode-reactjs-batch-24\/\r\n<br \/>&nbsp; &nbsp;Tugas-Harian-Part-1\/<br \/>&nbsp; &nbsp;Tugas-Harian-Part-2\/<\/code><\/p>\r\n<h3 id=\"2-kerjakan-soal-di-bawah-ini\">2. Kerjakan Soal di bawah ini<\/h3>\r\n<p>lalu ubahlah tampilan pada app.js di dalam folder src menjadi seperti tampilan di bawah ini (stylingnya harus sama persis):<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-8044\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/Screenshot_9.png\" sizes=\"(max-width: 521px) 100vw, 521px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/Screenshot_9.png 521w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/Screenshot_9-300x180.png 300w\" alt=\"\" width=\"521\" height=\"312\" \/><\/figure>\r\n<p>pada tugas ini <strong>tidak di perbolehkan<\/strong> menggunakan bootstrap ataupun sejenisnya<\/p>\r\n<h2 id=\"5-kumpulkan-tugas\">3. Kumpulkan tugas<\/h2>\r\n<p>Selanjutnya kumpulkan tugas Anda dengan melakukan copy link commit yang telah dibuat dari halaman repository project gitlab ke akun Anda di&nbsp;<a href=\"\/\">https:\/\/sanbercode.com\/<\/a>&nbsp;.<\/p>\r\n<p>Untuk selengkapnya, teknis pengumpulan tugas dapat di lihat di&nbsp;<a href=\"https:\/\/blog.sanbercode.com\/docs\/kurikulum-reactjs\/pendahuluan\/teknis-pengumpulan-tugas\/\" target=\"_blank\" rel=\"noreferrer noopener\">teknis pengumpulan tugas<\/a><\/p>\r\n<\/div>\r\n<p>&nbsp;<\/p>\r\n<p>&nbsp;<\/p>\r\n<p><\/p>","waktu_publish":"2021-05-06 08:00:00","status_publish":"publish","urutan":4,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:27:19","waktu_publish_formatted":" Kamis, 06 Mei 2021. 08:00:00 WIB."},{"id":781,"uuid":"31386369-2902-4ec1-b776-9a8897a4a938","author_user_id":4336,"materi_section_id":214,"judul":"Tugas 10 \u2013 Reactjs \u2013 Components & Props","permalink":"tugas-10-reactjs-components-props","konten":"<div class=\"entry-content\">\r\n<h2 id=\"petunjuk-pengerjaan\">Petunjuk Pengerjaan<\/h2>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<h3 id=\"1-menambahkan-folder-baru\">1. Menambahkan Folder Baru<\/h3>\r\n<p>Gunakanlah Project yang sudah di buat pada <strong>Tugas-9<\/strong>. lalu buatlah dua folder baru dalam folder <strong>&ldquo;src<\/strong>&rdquo; dengan nama &ldquo;<strong>Tugas-9<\/strong>&rdquo; dan &ldquo;<strong>Tugas-10<\/strong>&rdquo;<\/p>\r\n<h3 id=\"2-kerjakan-soal-di-bawah-ini\">2. Kerjakan Soal di bawah ini<\/h3>\r\n<p><strong>soal<\/strong>&nbsp;<strong>1<\/strong><\/p>\r\n<p>rubahlah tugas 9 menjadi component baru dan masukkan ke dalam folder &ldquo;<strong>Tugas-9<\/strong>&rdquo; dan import component tugas 9 ke app.js<\/p>\r\n<p><strong>soal 2<\/strong><\/p>\r\n<p>buatlah component di dalam folder &ldquo;<strong>Tugas-10<\/strong>&rdquo; yang tampilan seperti (stylingnya harus sama persis) di bawah ini:<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-8163\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/Screenshot_21.png\" sizes=\"(max-width: 698px) 100vw, 698px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/Screenshot_21.png 698w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/Screenshot_21-300x89.png 300w\" alt=\"\" width=\"698\" height=\"206\" \/><\/figure>\r\n<p>dengan menggunakan data variable seperti di bawah ini (pastikan ada penggunaan props dalam tugas-10 ini)<\/p>\r\n<pre class=\"wp-block-code\"><code>let dataHargaBuah = [\r\n  {nama: \"Semangka\", harga: 10000, berat: 1000},\r\n  {nama: \"Anggur\", harga: 40000, berat: 500},\r\n  {nama: \"Strawberry\", harga: 30000, berat: 400},\r\n  {nama: \"Jeruk\", harga: 30000, berat: 1000},\r\n  {nama: \"Mangga\", harga: 30000, berat: 500}\r\n]<\/code><\/pre>\r\n<p>lalu import component tugas 10 ke app.js<\/p>\r\n<p>pada tugas ini <strong>tidak di perbolehkan<\/strong> menggunakan <strong>bootstrap<\/strong> ataupun sejenisnya<\/p>\r\n<p>&nbsp;<\/p>\r\n<h2 id=\"5-kumpulkan-tugas\">3. Kumpulkan tugas<\/h2>\r\n<p>Selanjutnya kumpulkan tugas Anda dengan melakukan copy link commit yang telah dibuat dari halaman repository project gitlab ke akun Anda di&nbsp;<a href=\"\/\">https:\/\/sanbercode.com\/<\/a>&nbsp;.<\/p>\r\n<p>Untuk selengkapnya, teknis pengumpulan tugas dapat di lihat di&nbsp;<a href=\"https:\/\/blog.sanbercode.com\/docs\/kurikulum-reactjs\/pendahuluan\/teknis-pengumpulan-tugas\/\" target=\"_blank\" rel=\"noreferrer noopener\">teknis pengumpulan tugas<\/a><\/p>\r\n<p>&nbsp;<\/p>\r\n<p>&nbsp;<\/p>\r\n<\/div>","waktu_publish":"2021-05-07 08:00:00","status_publish":"publish","urutan":5,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:16:51","waktu_publish_formatted":" Jumat, 07 Mei 2021. 08:00:00 WIB."}]},{"id":215,"uuid":"24f8df64-7218-4638-9e17-d30d1eeb32ce","materi_id":25,"nama":"Pekan 3 - Materi","permalink":"pekan-3-materi","urutan":7,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":null,"posting":[{"id":782,"uuid":"e31f85b8-f8fd-4abe-8d9d-198b6c1544c5","author_user_id":4336,"materi_section_id":215,"judul":"Hari Ke-11 \u2013 Reactjs \u2013 State & Components Lifecycle","permalink":"hari-ke-11-reactjs-state-components-lifecycle","konten":"<div class=\"entry-content\">\r\n<p>pada materi sebelumnya kita sudah mempelajari tentang components dan props, tapi pada materi tersebut pengolahan data di sana masih statis atau tidak berubah-rubah, pada materi ini kita akan mempelajari bagaiana merubah data dengan dinamis<\/p>\r\n<h2 id=\"state\"><strong>State<\/strong><\/h2>\r\n<p><em>State<\/em>&nbsp;mirip dengan&nbsp;<em>props<\/em>, tetapi bersifat pribadi dan sepenuhnya dikendalikan oleh component. misal kita punya state angka 1 di suatu&nbsp;<em>component<\/em>, itu brarti state angka 1 itu hanya di miliki oleh component tersebut. lalu perubahan state tersebut erat hubungannya dengan&nbsp;<em>components lifecycle<\/em><\/p>\r\n<h2 id=\"components-lifecycle\"><strong>Components lifecycle<\/strong><\/h2>\r\n<p>Masing-masing Component memiliki beberapa &ldquo;<em>lifecycle<\/em>&nbsp;<em>method<\/em>&rdquo; yang bisa ditimpa untuk menjalankan kode pada waktu tertentu dalam proses.&nbsp;<\/p>\r\n<div class=\"wp-block-image\">\r\n<figure class=\"aligncenter size-large\"><img class=\"wp-image-8265\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-23-1024x362.png\" sizes=\"(max-width: 1024px) 100vw, 1024px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-23-1024x362.png 1024w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-23-300x106.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-23-768x271.png 768w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-23.png 1177w\" alt=\"\" width=\"1024\" height=\"362\" \/>\r\n<figcaption>Diagram ini di sadur dari&nbsp;<a href=\"https:\/\/projects.wojtekmaj.pl\/react-lifecycle-methods-diagram\/\">https:\/\/projects.wojtekmaj.pl\/react-lifecycle-methods-diagram\/<\/a><\/figcaption>\r\n<\/figure>\r\n<\/div>\r\n<p>menurut diagram diatas.&nbsp;<em>lifecycle<\/em>&nbsp;method pada components terbagi kepada tiga fase yaitu:<\/p>\r\n<h4><strong>Mounting (Pemasangan)<\/strong><\/h4>\r\n<p>Fase Mounting adalah fase ketika components di buat atau pertama kali di render ke DOM, didalam fase ini terdapat method-method yang umum digunakan diantaranya:<\/p>\r\n<ul>\r\n<li><strong>constructor()<\/strong><\/li>\r\n<li><strong>render()<\/strong><\/li>\r\n<li><strong>componentDidMount()<\/strong><\/li>\r\n<\/ul>\r\n<p>penjelasan method-method tersebut akan di jelaskan nanti satu persatu.<\/p>\r\n<h4><strong>Updating<\/strong><\/h4>\r\n<p>Fase updating adalah fase ketika sebuah component akan di render ulang, biasanya ini terjadi ketika ada perubahan pada state atau props yang mengakibatkan perubahan DOM. didalam fase ini terdapat method-method yang digunakan diantaranya:<\/p>\r\n<ul>\r\n<li><strong>render()<\/strong><\/li>\r\n<li><strong>componentDidUpdate()<\/strong><\/li>\r\n<\/ul>\r\n<p>penjelasan method-method tersebut akan di jelaskan nanti satu persatu<\/p>\r\n<h4><strong>Unmounting&nbsp;(Pelepasan)<\/strong><\/h4>\r\n<p>Fase unmounting adalah fase ketika component di hapus dari DOM. Pada fase ini hanya ada satu method yang akan di eksekusi yaitu&nbsp;<strong>componentWillUnmount()<\/strong>, yang di jalankan sebelum sebuah component di hapus dari DOM<\/p>\r\n<h2 id=\"penjelasan-method-method-lifecycle\"><strong>Penjelasan Method-Method lifecycle<\/strong><\/h2>\r\n<p>berikut ini penjelasan mengenai method-method yang umum di gunakan dalam components lifecycle:<\/p>\r\n<h4><strong>constructor()<\/strong><\/h4>\r\n<p>constructor dalam class React Component dipanggil sebelum dipasang (mounted). Saat mengimplementasikan constructor untuk subkelas React.Component, kita harus memanggil super(props) sebelum statement lainnya. Jika tidak, this.props akan bernilai undefined did dalam constructor, yang bisa menyebabkan bugs.<\/p>\r\n<p>pada umumnya constructor dalam React hanya digunakan untuk inisialisasi state lokal dengan ditetapkan dalam object ke this.state.<\/p>\r\n<p><strong>tidak boleh memanggil<\/strong>&nbsp;setState() dalam constructor(). dan sangat disarankan tidak memanggil props di dalam constructor. berikut ini contoh penerapan constructor dalam sebuah class Timer:<\/p>\r\n<pre class=\"wp-block-code\"><code>class Timer extends Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      time: 0\r\n    }\r\n  }\r\n}<\/code><\/pre>\r\n<h4><strong>render()<\/strong><\/h4>\r\n<p>method render() merupakan satu-satunya metjod yang paling dibutuhkan dalam class Component.<\/p>\r\n<p>Saat dipanggil, method ini akan memeriksa this.props dan this.state serta mengembalikan tipe berikut:<\/p>\r\n<p>Element React. Umumnya dibuat lewat JSX. Misalnya, dan merupakan elemen React yang memerintahkan React untuk me-render sebuah simpul DOM, atau komponen yang didefinisikan pengguna.<br \/>Array dan fragment. Memungkinkan Anda untuk mengembalikan beberapa elemen sekaligus dari render. Lihat dokumentasi tentang fragment untuk detail lebih lanjut.<br \/>Portal. Memungkinkan Anda untuk me-render anak ke subpohon DOM yang berbeda. Lihat dokumentasi tentang portals for more details.<br \/>String dan angka. Tipe ini akan di-render sebagai simpul teks dalam DOM.<br \/>Boolean atau null. Tidak me-render (umumnya ada untuk mendukung pola return test &amp;&amp; , dengan nilai test yang bertipe boolean.)<br \/>Fungsi render() harus bersifat murni (pure), yang berarti fungsi ini tidak mengubah state komponen, mengembalikan hasil yang sama setiap kali dipanggil, dan tidak berinteraksi langsung dengan browser.<\/p>\r\n<p>Jika Anda harus berinteraksi dengan browser, jalankan prosesnya dalam componentDidMount() atau dalam metode lifecycle lainnya saja. Dengan menjaga render() bersifat murni, cara kerja komponen lebih mudah dibayangkan.<\/p>\r\n<p>berikut ini contoh penerapannya dalam class Timer:<\/p>\r\n<pre class=\"wp-block-code\"><code>class Timer extends Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      time: 0\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      &lt;&gt;\r\n        &lt;h1 style={{textAlign: \"center\"}}&gt;\r\n          {this.state.time}\r\n        &lt;\/h1&gt;\r\n      &lt;\/&gt;\r\n    )\r\n  }\r\n}<\/code><\/pre>\r\n<h4><strong>componentDidMount()<\/strong><\/h4>\r\n<p>componentDidMount() adalah method yang di panggil setelah render namun kita bisa menginisialisasi kembali data kita di dalam method ini, dan di perbolehkan menggunakan setState di dalam method ini. dan kita dapat menggunakan props di dalam method ini<\/p>\r\n<p>dalam penerapannya biasanya, componentDidMount() di pakai untuk mengambil data dari Rest API.<\/p>\r\n<p>berikut ini penerapan componentDidMount() di dalam class Timer:<\/p>\r\n<pre class=\"wp-block-code\"><code>class Timer extends Component{\r\n  componentDidMount(){\r\n    if (this.props.start !== undefined){\r\n      this.setState({time: this.props.start})\r\n    }\r\n    this.timerID = setInterval(\r\n      () =&gt; this.tick(),\r\n      1000\r\n    );\r\n  }\r\n\r\n  tick() {\r\n    this.setState({\r\n      time: this.state.time + 1 \r\n    });\r\n  }\r\n}<\/code><\/pre>\r\n<h4><strong>componentDidUpdate()<\/strong><\/h4>\r\n<p>componentDidUpdate() langsung dipanggil setelah terjadi perubahan. Metode ini tidak dipanggil dalam proses render awal.<\/p>\r\n<p>Gunakan metode ini sebagai kesempatan untuk beroperasi pada DOM ketika komponen diperbarui. Metode ini juga merupakan tempat yang baik untuk menjalankan pemanggilan jaringan, selama Anda bisa membandingkan prop saat ini dengan prop sebelumnya (misalnya, permintaan jaringan mungkin tidak diperlukan jika prop tidak berubah).<\/p>\r\n<pre class=\"wp-block-code\"><code>componentDidUpdate(prevProps) {\r\n   \/\/ Penggunaan umum (Jangan lupa untuk membandingkan props):\r\n   if (this.props.userID !== prevProps.userID) {\r\n     this.fetchData(this.props.userID);\r\n   }\r\n }<\/code><\/pre>\r\n<p>Anda bisa langsung memanggil setState() dalam componentDidUpdate() tetapi perhatikan bahwa pemanggilannya harus dibungkus dalam sebuah kondisi seperti contoh di atas, atau Anda akan mengakibatkan perulangan yang tak terbatas. Ini juga akan mengakibatkan proses render ekstra yang walau tidak tampak ke pengguna, bisa berdampak pada kinerja komponen. Jika Anda mencoba &ldquo;mencerminkan&rdquo; beberapa state ke sebuah prop yang datang dari tingkat yang lebih tinggi, pertimbangkan untuk menggunakan secara langsung prop-nya. Baca lebih lanjut tentang mengapa menyalin props ke state bisa menyebabkan bug.<\/p>\r\n<p>Jika komponen Anda mengimplementasikan lifecycle getSnapshotBeforeUpdate() (yang sangat jarang), nilai yang dikembalikan akan diteruskan sebagai parameter &rdquo;snapshot&rdquo; ketiga ke componentDidUpdate(). Jika tidak, parameter ini akan bernilai undefined.<\/p>\r\n<h4><strong>componentWillUnmount()<\/strong><\/h4>\r\n<p>componentWillUnmount() dipanggil langsung sebelum komponen dilepas dan dihancurkan. Lakukan pembersihan yang diperlukan, misalnya menghancurkan timer, membatalkan permintaan jaringan, atau membersihkan semua langganan yang dibuat dalam componentDidMount().<\/p>\r\n<p>kita tidak bisa memanggil setState() dalam componentWillUnmount() karena komponen tidak akan pernah di-render ulang. Segera setelah komponen dilepas, komponen tersebut tidak akan dipasang kembali.<\/p>\r\n<h2 id=\"contoh-penerapannya\"><strong>contoh penerapannya<\/strong><\/h2>\r\n<p>berikut ini contoh penerapan method-method diatas dalam class Timer:<\/p>\r\n<pre class=\"wp-block-code\"><code>import React, {Component} from 'react'\r\n\r\nclass Timer extends Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      time: 0\r\n    }\r\n  }\r\n\r\n  componentDidMount(){\r\n    if (this.props.start !== undefined){\r\n      this.setState({time: this.props.start})\r\n    }\r\n    this.timerID = setInterval(\r\n      () =&gt; this.tick(),\r\n      1000\r\n    );\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  tick() {\r\n    this.setState({\r\n      time: this.state.time + 1 \r\n    });\r\n  }\r\n\r\n\r\n  render(){\r\n    return(\r\n      &lt;&gt;\r\n        &lt;h1 style={{textAlign: \"center\"}}&gt;\r\n          {this.state.time}\r\n        &lt;\/h1&gt;\r\n      &lt;\/&gt;\r\n    )\r\n  }\r\n}\r\n\r\nexport default Timer<\/code><\/pre>\r\n<p><strong>Referensi<\/strong>:<\/p>\r\n<ul>\r\n<li><a href=\"https:\/\/projects.wojtekmaj.pl\/react-lifecycle-methods-diagram\/\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\">https:\/\/projects.wojtekmaj.pl\/react-lifecycle-methods-diagram\/<\/a>&nbsp;(diagram components lifecycle)<\/li>\r\n<li><a href=\"https:\/\/id.reactjs.org\/docs\/state-and-lifecycle.html\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\">https:\/\/id.reactjs.org\/docs\/state-and-lifecycle.html<\/a><\/li>\r\n<li><a href=\"https:\/\/id.reactjs.org\/docs\/react-component.html\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\">https:\/\/id.reactjs.org\/docs\/react-component.html<\/a><\/li>\r\n<li><a href=\"https:\/\/medium.com\/codeacademia\/apa-itu-component-lifecycle-di-react-bfcb64f64e0e\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\" (opens in a new tab)\">https:\/\/medium.com\/codeacademia\/apa-itu-component-lifecycle-di-react-bfcb64f64e0e<\/a><\/li>\r\n<\/ul>\r\n<p>&nbsp;<\/p>\r\n<\/div>","waktu_publish":"2021-05-17 08:00:00","status_publish":"publish","urutan":1,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:16:32","waktu_publish_formatted":" Senin, 17 Mei 2021. 08:00:00 WIB."},{"id":783,"uuid":"f138e15e-216c-4d2e-ab68-9eb7b6444167","author_user_id":4336,"materi_section_id":215,"judul":"Hari Ke-12 \u2013 Reactjs \u2013 Lists & Forms","permalink":"hari-ke-12-reactjs-lists-forms","konten":"<div class=\"entry-content\">\r\n<p>Dalam sebuah aplikasi tentunya kita sering menemukan sebuah list atau table yang menampilkan data-data dan disana kita bisa mengolah datanya dengan menambahkan data, menghapus data dan update data. tentunya di reactjs pun perlu hal tersebut karna itu merupakan hal yang lumrah dalam aplikasi. lalu bagaimana cara mengimplementasikannya? ya mari kita simak pemaparan di bawah ini<\/p>\r\n<h2 id=\"lists\"><strong>Lists<\/strong><\/h2>\r\n<p>lists atau daftar, atau sering juga kita melihat daftar dalam bentuk table merupakan salah satu opsi untuk menampilkan data, nah mari kita coba dengan kasus di bawah ini<\/p>\r\n<p>misal kita memiliki data array of object seperti di bawah ini:<\/p>\r\n<pre class=\"wp-block-code\"><code>let pesertaLomba = [ 'Budi', 'Susi', 'Lala', 'Agung' ]<\/code><\/pre>\r\n<p>lalu kita ingin menampilkan data tersebut kita olah di masukkan ke dalam state lalu kita tampilkan dalam tabel. berikut contoh kode penggunaanya:<\/p>\r\n<pre class=\"wp-block-code\"><code>class Lists extends Component{\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state ={\r\n     pesertaLomba : [ 'Budi', 'Susi', 'Lala', 'Agung' ]      \r\n    }\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      &lt;&gt;\r\n        &lt;h1&gt;Daftar Peserta Lomba&lt;\/h1&gt;\r\n        &lt;table&gt;\r\n          &lt;thead&gt;\r\n            &lt;tr&gt;\r\n              &lt;th&gt;No&lt;\/th&gt;\r\n              &lt;th&gt;Nama&lt;\/th&gt;\r\n            &lt;\/tr&gt;\r\n          &lt;\/thead&gt;\r\n          &lt;tbody&gt;\r\n              {\r\n                this.state.pesertaLomba.map((val, index)=&gt;{\r\n                  return(                    \r\n                    &lt;tr&gt;\r\n                      &lt;td&gt;{index+1}&lt;\/td&gt;\r\n                      &lt;td&gt;{val}&lt;\/td&gt;\r\n                    &lt;\/tr&gt;\r\n                  )\r\n                })\r\n              }\r\n          &lt;\/tbody&gt;\r\n        &lt;\/table&gt;\r\n      &lt;\/&gt;\r\n    )\r\n  }\r\n}<\/code><\/pre>\r\n<p>berikut ini tampilannya:<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-8382\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-37.png\" sizes=\"(max-width: 779px) 100vw, 779px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-37.png 779w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-37-300x128.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-37-768x328.png 768w\" alt=\"\" width=\"779\" height=\"333\" \/><\/figure>\r\n<p>ya begitulah kurang lebih cara menampilkan lists di dalam class components<\/p>\r\n<h2 id=\"forms\"><strong>Forms<\/strong><\/h2>\r\n<p>lalu lists sendiri itu erat kaitannya dengan penambahan data lalu bagaimana penerapannya, pertama mari kita coba buat form terlebih dahulu berdasarkan data diatas, itu berarti kita membutuhkan form dengan input nama<\/p>\r\n<pre class=\"wp-block-code\"><code>&lt;form &gt;\r\n  &lt;label&gt;\r\n    Masukkan nama peserta:\r\n  &lt;\/label&gt;          \r\n  &lt;input type=\"text\" \/&gt;\r\n  &lt;input type=\"submit\" value=\"Submit\" \/&gt;\r\n&lt;\/form&gt;<\/code><\/pre>\r\n<p>lalu langkah berikutnya adalah kita tambahkan state baru seperti di bawah ini:<\/p>\r\n<pre class=\"wp-block-code\"><code>  constructor(props){\r\n    super(props)\r\n    this.state ={\r\n     pesertaLomba : [ 'Budi', 'Susi', 'Lala', 'Agung' ],\r\n     inputName : \"\"    \r\n    }\r\n  }<\/code><\/pre>\r\n<p>lalu tambahkan value input text nya dengan this.state.inputName, tambahkan handle di input text dan tambahkan handle di submit seperti di bawah ini:<\/p>\r\n<pre class=\"wp-block-code\"><code>&lt;form onSubmit={this.handleSubmit}&gt;\r\n  &lt;label&gt;\r\n    Masukkan nama peserta:\r\n  &lt;\/label&gt;          \r\n  &lt;input type=\"text\" value={this.state.inputName} onChange={this.handleChange}\/&gt;\r\n  &lt;input type=\"submit\" value=\"Submit\" \/&gt;\r\n&lt;\/form&gt;<\/code><\/pre>\r\n<p>lalu tambahkan method handle submit dan handlechange di dalam class dan bind method tersebut dalam constructor<\/p>\r\n<pre class=\"wp-block-code\"><code>constructor(props){\r\n  super(props)\r\n  this.state ={\r\n   pesertaLomba : [ 'Budi', 'Susi', 'Lala', 'Agung' ],\r\n   inputName : \"\"    \r\n  }\r\n\r\n  this.handleChange = this.handleChange.bind(this);\r\n  this.handleSubmit = this.handleSubmit.bind(this);\r\n}\r\n\r\nhandleChange(event){\r\n  this.setState({inputName: event.target.value});\r\n}\r\n\r\nhandleSubmit(event){\r\n  event.preventDefault()\r\n  this.setState({\r\n    pesertaLomba: [...this.state.pesertaLomba, this.state.inputName],\r\n    inputName: \"\"\r\n  })\r\n}<\/code><\/pre>\r\n<p>berikut ini contoh penerepan membuat lists dan forms:<\/p>\r\n<pre class=\"wp-block-code\"><code>import React, {Component} from \"react\"\r\nimport \".\/Lists.css\"\r\n\r\nclass Lists extends Component{\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state ={\r\n     pesertaLomba : [ 'Budi', 'Susi', 'Lala', 'Agung' ],\r\n     inputName : \"\"    \r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event){\r\n    this.setState({inputName: event.target.value});\r\n  }\r\n\r\n  handleSubmit(event){\r\n    event.preventDefault()\r\n    console.log(this.state.inputName)\r\n    this.setState({\r\n      pesertaLomba: [...this.state.pesertaLomba, this.state.inputName],\r\n      inputName: \"\"\r\n    })\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      &lt;&gt;\r\n        &lt;h1&gt;Daftar Peserta Lomba&lt;\/h1&gt;\r\n        &lt;table&gt;\r\n          &lt;thead&gt;\r\n            &lt;tr&gt;\r\n              &lt;th&gt;No&lt;\/th&gt;\r\n              &lt;th&gt;Nama&lt;\/th&gt;\r\n              &lt;th&gt;&lt;\/th&gt;\r\n            &lt;\/tr&gt;\r\n          &lt;\/thead&gt;\r\n          &lt;tbody&gt;\r\n              {\r\n                this.state.pesertaLomba.map((val, index)=&gt;{\r\n                  return(                    \r\n                    &lt;tr&gt;\r\n                      &lt;td&gt;{index+1}&lt;\/td&gt;\r\n                      &lt;td&gt;{val}&lt;\/td&gt;\r\n                    &lt;\/tr&gt;\r\n                  )\r\n                })\r\n              }\r\n          &lt;\/tbody&gt;\r\n        &lt;\/table&gt;\r\n        {\/* Form *\/}\r\n        &lt;h1&gt;Form Peserta&lt;\/h1&gt;\r\n        &lt;form onSubmit={this.handleSubmit}&gt;\r\n          &lt;label&gt;\r\n            Masukkan nama peserta:\r\n          &lt;\/label&gt;          \r\n          &lt;input type=\"text\" value={this.state.inputName} onChange={this.handleChange}\/&gt;\r\n          &lt;button&gt;submit&lt;\/button&gt;\r\n        &lt;\/form&gt;\r\n      &lt;\/&gt;\r\n    )\r\n  }\r\n}\r\n\r\nexport default Lists<\/code><\/pre>\r\n<p>&nbsp;<\/p>\r\n<\/div>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-05-18 08:00:00","status_publish":"publish","urutan":2,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:16:11","waktu_publish_formatted":" Selasa, 18 Mei 2021. 08:00:00 WIB."},{"id":784,"uuid":"eb49475c-52bf-486a-8d1e-571d1d2c1930","author_user_id":4336,"materi_section_id":215,"judul":"Hari Ke-13 \u2013 Reactjs \u2013 Hooks & menggunakan REST API dengan axios","permalink":"hari-ke-13-reactjs-hooks-menggunakan-rest-api-dengan-axios","konten":"<p>Hooks merupakan fitur baru di React 16.8 atau versi lebih baru dari itu. Dengan Hooks, kita dapat menggunakan state dan fitur React yang lain tanpa perlu menulis sebuah kelas baru. Hooks merupakan fungsi yang memungkinkan Anda untuk &ldquo;mengaitkan&rdquo; state dan fitur-fitur lifecycle React dari function component. Hooks tidak dapat berfungsi didalam kelas dan Hooks memungkinkan menggunakan React tanpa kelas<\/p>\r\n<h3 id=\"function-component-dengan-hooks\"><strong>Function Component dengan hooks<\/strong><\/h3>\r\n<p>seperti yang sudah kita ketahui bahwa component dapat dibuat dengan dua cara yaitu menggunakan react subclass component atau dengan function component. sebelum React versi 16.8 beberapa frontend developer cenderung menggunakan class component karena di dalamnya kita bisa menggunakan state, namun permasalahan tersebut sudah ada solusinya yaitu hooks<\/p>\r\n<p>berikut ini contoh penggunaan hooks:<\/p>\r\n<pre class=\"wp-block-code\"><code>import React, { useState } from 'react';\r\n\r\nconst Example = () =&gt; {\r\n  \/\/ Deklarasi variabel state baru yang kita sebut \"count\"\r\n  const [count, setCount] = useState(0);\r\n\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;p&gt;Anda menekan sebanyak {count} kali&lt;\/p&gt;\r\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\r\n        Klik saya\r\n      &lt;\/button&gt;\r\n    &lt;\/div&gt;\r\n  );\r\n}\r\n\r\nexport default Example<\/code><\/pre>\r\n<p>seperti yang kita lihat diatas pada function component diatas itu menggunakan useState, useState di panggil dalam function component untuk menambahkan suatu state lokal. React akan menyimpan state antar render. useState memberikan dua hal: nilai state saat ini dan fungsi untuk memperbarui nilai tersebut. Anda dapat memanggil fungsi ini dari sebuah event handler atau dimanapun. Hal ini serupa dengan this.setState pada kelas, tetapi tidak menggabungkan state lama dan baru menjadi satu<\/p>\r\n<p>mari kita bandingkan dengan kode tersebut dengan contoh kode class component di bawah ini:<\/p>\r\n<pre class=\"wp-block-code\"><code>import React from 'react';\r\n\r\nclass Example extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      count: 0\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      &lt;div&gt;\r\n        &lt;p&gt;Anda menekan sebanyak {this.state.count} kali&lt;\/p&gt;\r\n        &lt;button onClick={() =&gt; this.setState({ count: this.state.count + 1 })}&gt;\r\n          Klik saya\r\n        &lt;\/button&gt;\r\n      &lt;\/div&gt;\r\n    );\r\n  }\r\n}\r\n\r\nexport default Example<\/code><\/pre>\r\n<p>dari kode diatas terlihat perbedaannya, mulai dari tidak ada constuctor, tidak ada this, method render pun sudah tidak ada di function component tapi langsung return nilai yang diinginkan<\/p>\r\n<p>jika sudah terlihat perbedaaanya mari kita ubah kode lists dan forms pada materi sebelumnya dengan function component dan hooks<\/p>\r\n<p><strong>mengganti constructor dengan inisialisasi hooks<\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>const [pesertaLomba, setPesertaLomba] =  useState([ 'Budi', 'Susi', 'Lala', 'Agung' ])\r\nconst [inputName, setinputName]  =  useState(\"\")\r\nconst [indexOfForm, setIndexOfForm] =  useState(-1)    <\/code><\/pre>\r\n<p><strong>mengganti setiap handle menjadi arrow function dan merubah setState nya sesuai dengan inisialisasi di atas<\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>  const handleDelete = (event) =&gt; {\r\n    let index = event.target.value\r\n    let newPesertaLomba = pesertaLomba\r\n    let editedPeserta = newPesertaLomba[indexOfForm]\r\n    newPesertaLomba.splice(index, 1)\r\n\r\n    if (editedPeserta !== undefined){\r\n      \/\/ array findIndex baru ada di ES6\r\n      var newIndex = newPesertaLomba.findIndex((el) =&gt; el === editedPeserta)\r\n      setPesertaLomba([...newPesertaLomba]) \r\n      setIndexOfForm(newIndex)\r\n      \r\n    }else{\r\n      \r\n      setPesertaLomba([...newPesertaLomba])\r\n    }\r\n    \r\n  }\r\n  \r\n  const handleEdit = (event) =&gt;{\r\n    let index = event.target.value\r\n    let peserta = pesertaLomba[index]\r\n    setInputName(peserta)\r\n    setIndexOfForm(index)\r\n  }\r\n\r\n  const handleChange = (event) =&gt;{\r\n    setInputName(event.target.value);\r\n  }\r\n\r\n  const handleSubmit = (event) =&gt;{\r\n    \/\/ menahan submit\r\n    event.preventDefault()\r\n\r\n    let name = inputName\r\n\r\n    if (name.replace(\/\\s\/g,'') !== \"\"){      \r\n      let newPesertaLomba = pesertaLomba\r\n      let index = indexOfForm\r\n      \r\n      if (index === -1){\r\n        newPesertaLomba = [...newPesertaLomba, name]\r\n      }else{\r\n        newPesertaLomba[index] = name\r\n      }\r\n  \r\n      \r\n      setPesertaLomba(newPesertaLomba)\r\n      setInputName(\"\")\r\n    }\r\n\r\n  }<\/code><\/pre>\r\n<p><strong>terakhir kita perlu merubah render() menjadi hanya return saja dan beberapa handle yang menggunakan this di ubah<\/strong><\/p>\r\n<pre class=\"wp-block-code\"><code>return(\r\n    &lt;&gt;\r\n      &lt;h1&gt;Daftar Peserta Lomba&lt;\/h1&gt;\r\n      &lt;table&gt;\r\n        &lt;thead&gt;\r\n          &lt;tr&gt;\r\n            &lt;th&gt;No&lt;\/th&gt;\r\n            &lt;th&gt;Nama&lt;\/th&gt;\r\n            &lt;th&gt;Aksi&lt;\/th&gt;\r\n          &lt;\/tr&gt;\r\n        &lt;\/thead&gt;\r\n        &lt;tbody&gt;\r\n            {\r\n              pesertaLomba.map((val, index)=&gt;{\r\n                return(                    \r\n                  &lt;tr key={index}&gt;\r\n                    &lt;td&gt;{index+1}&lt;\/td&gt;\r\n                    &lt;td&gt;{val}&lt;\/td&gt;\r\n                    &lt;td&gt;\r\n                      &lt;button onClick={handleEdit} value={index}&gt;Edit&lt;\/button&gt;\r\n                      &amp;nbsp;\r\n                      &lt;button onClick={handleDelete} value={index}&gt;Delete&lt;\/button&gt;\r\n                    &lt;\/td&gt;\r\n                  &lt;\/tr&gt;\r\n                )\r\n              })\r\n            }\r\n        &lt;\/tbody&gt;\r\n      &lt;\/table&gt;\r\n      {\/* Form *\/}\r\n      &lt;h1&gt;Form Peserta&lt;\/h1&gt;\r\n      &lt;form onSubmit={handleSubmit}&gt;\r\n        &lt;label&gt;\r\n          Masukkan nama peserta:\r\n        &lt;\/label&gt;          \r\n        &lt;input type=\"text\" value={inputName} onChange={handleChange}\/&gt;\r\n        &lt;button&gt;submit&lt;\/button&gt;\r\n      &lt;\/form&gt;\r\n    &lt;\/&gt;\r\n  )<\/code><\/pre>\r\n<h3 id=\"implementasi-useeffect-hooks\"><strong>Implementasi useEffect hooks<\/strong><\/h3>\r\n<p>seperti yang sudah dijelaskan di atas bahwa hooks memungkinkan untuk kita menerapkan state lifecycle tanpa harus menggunakan class component, lalu selain handle state apa penerapan lifecycle yang lain.<\/p>\r\n<p>useEffect adalah salah satu bagian dari hook yang berfungsi menggantikan lifecycle method yang ada dalam class component, useEffect memungkinkan Anda melakukan efek samping (side effects) didalam function component<\/p>\r\n<p>Jika Anda familiar dengan React class lifecycle methods, Anda dapat menganggap Hook useEffect sebagaicomponentDidMount, componentDidUpdate, dan componentWillUnmount yang disatukan<\/p>\r\n<p>berikut ini contoh penerapan useEffect:<\/p>\r\n<pre class=\"wp-block-code\"><code>import React, { useState, useEffect } from 'react';\r\n\r\nfunction Example() {\r\n  const [count, setCount] = useState(0);\r\n\r\n  \/\/ Mirip dengan componentDidMount dan componentDidUpdate:\r\n  useEffect(() =&gt; {\r\n    \/\/ Memperbarui judul dokumen menggunakan API browser\r\n    document.title = \"You clicked \" + count + \" times\";\r\n  });\r\n\r\n  return (\r\n    &lt;div&gt;\r\n      &lt;p&gt;You clicked {count} times&lt;\/p&gt;\r\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;\r\n        Click me\r\n      &lt;\/button&gt;\r\n    &lt;\/div&gt;\r\n  );\r\n}<\/code><\/pre>\r\n<p>pada kode diatas di dalam useEffect terdapat kode yang selalu mentrigger perubahan setiap kali ada perubahan dalam count maka title di browser akan selalu berubah<\/p>\r\n<h3 id=\"penerapan-rest-api-dengan-axios\"><strong>penerapan REST API dengan axios<\/strong><\/h3>\r\n<p>seperti yang kita ketahui salah satu tugas di dalam frontend development ialah mengoperasikan data dari server, dan hal tersebut biasanya menggunakan apa yang di sebut dengan REST API,<\/p>\r\n<p>REST (Representional State Transfer) API adalah suatu arsitektur metode komunikasi yang menggunakan protokol HTTP untuk pertukaran data dan metode ini sering diterapkan dalam pengembangan aplikasi<\/p>\r\n<p>lalu bagaimanakah cara mengimplementasikan nya di dalam reactjs, tentunya kita butuh tools yang bisa mendukung perpindahan data dengan mudah, disini kita akan menggunaka axios, axios merupakan packages yang memungkinkan kita dapat mengkonsumsi api<\/p>\r\n<p>untuk menggunakan axios silahkan install axios di project reactjs anda:<\/p>\r\n<pre class=\"wp-block-code\"><code>npm install axios<\/code><\/pre>\r\n<p>tunggu hingga proses selesai, setelah selesai mari kita terapkan axios ini dengan menggunakan Lists yang sudah kita buat di atas<\/p>\r\n<p>ubahlah inisialisasi peserta lomba menjadi array kosong:<\/p>\r\n<pre class=\"wp-block-code\"><code>const [pesertaLomba, setPesertaLomba] =  useState([])<\/code><\/pre>\r\n<p>lalu tambahkan useEffect sebelum return yang isinya adalah mengambil data dari server lalu kita tampilkan tabelnya isi tabelnya saja<\/p>\r\n<pre>import React, {useState, useEffect} from \"react\"<br \/>import axios from \"axios\"<br \/><br \/>const Peserta= () =&gt;{<br \/>  const [pesertaLomba, setPesertaLomba] = &nbsp;useState([])<br \/>  const [inputName, setInputName] =&nbsp;&nbsp;useState(\"\")<br \/>&nbsp;&nbsp;const [currentId, setCurrentId] =&nbsp;&nbsp;useState(null)<br \/><br \/>&nbsp; useEffect( () =&gt; {<br \/>&nbsp; &nbsp; const fetchData = async () =&gt; {<br \/>&nbsp; &nbsp; &nbsp; const result = await axios.get(`http:\/\/backendexample.sanbercloud.com\/api\/contestants`)<br \/><br \/>  &nbsp; &nbsp; setPesertaLomba(result.data.map(x=&gt;{ return {id: x.id, name: x.name} }) )<br \/>&nbsp; &nbsp; }<br \/>&nbsp; &nbsp; &nbsp;&nbsp;<br \/>&nbsp; &nbsp; fetchData()<br \/>&nbsp; }, [])<br \/><br \/>&nbsp; return(<br \/>&nbsp; &nbsp; &lt;&gt;<br \/>&nbsp; &nbsp; &nbsp; { pesertaLomba !== null &amp;&amp;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; (&lt;div style={{width: \"70%\", margin: \"0 auto\", textAlign: \"center\"}}&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;h1&gt;Daftar Peserta Lomba&lt;\/h1&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;table className=\"peserta-lomba\"&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;thead&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;tr&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;th&gt;No&lt;\/th&gt;<br \/>  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;th&gt;Nama&lt;\/th&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;\/tr&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;\/thead&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;tbody&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; {<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; pesertaLomba.map((item, index)=&gt;{<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return( &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;tr key={index}&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;td&gt;{index+1}&lt;\/td&gt;<br \/>  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;td&gt;{item.name}&lt;\/td&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;\/tr&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; })<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &lt;\/tbody&gt;<br \/>  &nbsp; &nbsp; &nbsp; &nbsp; &lt;\/table&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &lt;\/div&gt;)<br \/>&nbsp; &nbsp; &nbsp; }<br \/><br \/>&nbsp; &nbsp; &lt;\/&gt;<br \/>&nbsp; )<br \/>}<br \/><br \/>export default Peserta<\/pre>\r\n<p>lalu tambahkan button edit dan delete yang memiliki trigger onclick untuk edit dan delete<\/p>\r\n<div>\r\n<pre>&lt;td&gt;<br \/> &lt;button onClick={handleEdit} value={item.id}&gt;Edit&lt;\/button&gt;<br \/>  &amp;nbsp;<br \/> &lt;button onClick={handleDelete} value={item.id}&gt;Delete&lt;\/button&gt;<br \/>&lt;\/td&gt;<\/pre>\r\n<\/div>\r\n<p>lalu di dalam handleEdit dan handleDelete tambahkan axios get dan delete<\/p>\r\n<div>\r\n<pre> const&nbsp;handleEdit&nbsp;=&nbsp;(event)&nbsp;=&gt;{<br \/> &nbsp;&nbsp;&nbsp;let&nbsp;idPeserta&nbsp;=&nbsp;event.target.value<br \/> &nbsp;&nbsp;&nbsp;axios.get(`http:\/\/backendexample.sanbercloud.com\/api\/contestants\/${idPeserta}`)<br \/> &nbsp;&nbsp;&nbsp;.then(res&nbsp;=&gt;&nbsp;{<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;data&nbsp;=&nbsp;res.data<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setInputName(data.name)<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setCurrentId(data.id)<br \/> &nbsp;&nbsp;&nbsp;})<br \/>&nbsp;&nbsp;}<br \/><br \/> &nbsp;const&nbsp;handleDelete&nbsp;=&nbsp;(event)&nbsp;=&gt;{<br \/> &nbsp;&nbsp;&nbsp;let&nbsp;idPeserta&nbsp;=&nbsp;parseInt(event.target.value)<br \/> &nbsp;&nbsp;&nbsp;axios.delete(`http:\/\/backendexample.sanbercloud.com\/api\/contestants\/${idPeserta}`)<br \/> &nbsp;&nbsp;&nbsp;.then(()&nbsp;=&gt;&nbsp;{<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let&nbsp;newPesertaLomba&nbsp;=&nbsp;pesertaLomba.filter(el=&gt;&nbsp;{return&nbsp;el.id&nbsp;!==&nbsp;idPeserta})<br \/> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setPesertaLomba(newPesertaLomba)<br \/> &nbsp;&nbsp;&nbsp;})<br \/>&nbsp;&nbsp;}<\/pre>\r\n<\/div>\r\n<p>lalu tambahkan form di bawah tabelnya<\/p>\r\n<div>\r\n<pre>{\/* Form *\/}<br \/>&lt;h1&gt;Form Peserta&lt;\/h1&gt;<br \/>&lt;form style={{paddingBottom: \"20px\"}}onSubmit={handleSubmit}&gt;<br \/>  &lt;label&gt;<br \/> &nbsp;  Masukkan nama peserta:<br \/> &nbsp;&lt;\/label&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <br \/> &nbsp;&lt;input type=\"text\" value={inputName} onChange={handleChange}\/&gt;<br \/> &nbsp;&lt;button&gt;submit&lt;\/button&gt;<br \/>&lt;\/form&gt;<\/pre>\r\n<\/div>\r\n<p>lalu tambahkan handle change<\/p>\r\n<div>\r\n<pre> &nbsp;const&nbsp;handleChange&nbsp;=&nbsp;(event)&nbsp;=&gt;{<br \/> &nbsp;&nbsp;&nbsp;let&nbsp;inputValue&nbsp;=&nbsp;event.target.value<br \/> &nbsp;&nbsp;&nbsp;setInputName(inputValue)<br \/>&nbsp;&nbsp;}<\/pre>\r\n<\/div>\r\n<p>lalu tambahkan function handle submit yang di dalamnya menggunakan axios post<\/p>\r\n<div>\r\n<pre>const handleSubmit = (event) =&gt;{<br \/>&nbsp; &nbsp; event.preventDefault()<br \/><br \/>&nbsp; &nbsp; if (currentId === null){<br \/>&nbsp; &nbsp; &nbsp; \/\/ untuk create data baru<br \/>&nbsp; &nbsp; &nbsp; axios.post(`http:\/\/backendexample.sanbercloud.com\/api\/contestants`, {name: inputName})<br \/>&nbsp; &nbsp; &nbsp; .then(res =&gt; {<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; let data = res.data<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; setPesertaLomba([...pesertaLomba, {id: data.id, name: data.name}])<br \/>&nbsp; &nbsp; &nbsp; })<br \/>&nbsp; &nbsp; }else{<br \/>&nbsp; &nbsp; &nbsp; axios.put(`http:\/\/backendexample.sanbercloud.com\/api\/contestants\/${currentId}`, {name: inputName})<br \/>&nbsp; &nbsp; &nbsp; .then(() =&gt; {<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; let singlePeserta = pesertaLomba.find(el=&gt; el.id === currentId)<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; singlePeserta.name= inputName<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; setPesertaLomba([...pesertaLomba])<br \/>&nbsp; &nbsp; &nbsp; }) &nbsp; &nbsp; &nbsp;<br \/>&nbsp; &nbsp; }<br \/>&nbsp; &nbsp; setInputName(\"\")<br \/>&nbsp; &nbsp; setCurrentId(null)<br \/>&nbsp; }<\/pre>\r\n<\/div>\r\n<pre class=\"wp-block-code\"><code><\/code><\/pre>\r\n<p><strong>Referensi<\/strong>:<\/p>\r\n<ul>\r\n<li><a href=\"https:\/\/id.reactjs.org\/docs\/hooks-intro.html\">https:\/\/id.reactjs.org\/docs\/hooks-intro.html<\/a><\/li>\r\n<li><a href=\"https:\/\/id.reactjs.org\/docs\/hooks-overview.html\">https:\/\/id.reactjs.org\/docs\/hooks-overview.html<\/a><\/li>\r\n<li><a href=\"https:\/\/id.reactjs.org\/docs\/hooks-state.html\">https:\/\/id.reactjs.org\/docs\/hooks-state.html<\/a><\/li>\r\n<li><a href=\"https:\/\/id.reactjs.org\/docs\/hooks-effect.html\">https:\/\/id.reactjs.org\/docs\/hooks-effect.html<\/a><\/li>\r\n<li><a href=\"https:\/\/medium.com\/@kiddy.xyz\/restful-api-apaan-tuh-dbcfa434761e\">https:\/\/medium.com\/@kiddy.xyz\/restful-api-apaan-tuh-dbcfa434761e<\/a><\/li>\r\n<li><a href=\"https:\/\/www.digitalocean.com\/community\/tutorials\/react-axios-react\">https:\/\/www.digitalocean.com\/community\/tutorials\/react-axios-react<\/a><\/li>\r\n<\/ul>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-05-19 08:00:00","status_publish":"publish","urutan":3,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:15:43","waktu_publish_formatted":" Rabu, 19 Mei 2021. 08:00:00 WIB."},{"id":785,"uuid":"6af0e699-9024-45ab-bf8b-876c3b2686ec","author_user_id":4336,"materi_section_id":215,"judul":"Hari Ke-14 \u2013 Reactjs \u2013 Context","permalink":"hari-ke-14-reactjs-context","konten":"<div class=\"entry-content\">\r\n<p>selama kita menggunakan state reactjs baik dengan menggunakan class component atau pun dengan hooks pasti pernah merasa kesulitan bagaimana memindahkan data tapi berbeda component atau berbeda file. mungkin dari kita pernah menggunakan solusi passing data atau oper data dengan props, tetapi praktek tersebut sangat tidak disarankan oleh reactjs.<\/p>\r\n<p>untuk hal tersebut ada solusinya yaitu menggunakan state management, ada beberapa pilihan menggunakan state management, salah satu yang bisa di gunakan adala context yang di kembangkan oleh reactjs<\/p>\r\n<p>untuk pengimplementasiannya beragam, disini kita akan membahas secara praktisnya saja, disini kita menggunakan beberapa fitur dari context, yaitu useContext, context provider, create context. lalu dalam pengimplementasian componentnya kita menggunakan hooks<\/p>\r\n<p>berikut ini illustrasi dalam penggunaan context provider<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-8595\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/Screenshot_26-1024x581.png\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/Screenshot_26-1024x581.png 1024w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/Screenshot_26-300x170.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/Screenshot_26-768x436.png 768w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/Screenshot_26.png 1241w\" alt=\"\" width=\"80%\" \/><\/figure>\r\n<h2 id=\"implementasi-context\"><strong>implementasi context<\/strong><\/h2>\r\n<p>disini kita punya kasus saya punya data seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>let movie = [\r\n    { name: \"Harry Potter\", lengthOfTime: 120},\r\n    { name: \"Sherlock Holmes\", lengthOfTime: 125},\r\n    { name: \"Avengers\", lengthOfTime: 130},\r\n    { name: \"Spiderman\", lengthOfTime: 124},\r\n  ]<\/code><\/pre>\r\n<p>lalu biasanya kita akan inisial state di dalam component, tapi disini kita inisialisasi dahulu di dalam context provider, lalu kita buat file js baru yang berisi context dan context provider seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>import React, { useState, createContext } from \"react\";\r\n\r\nexport const MovieContext = createContext();\r\n\r\nexport const MovieProvider = props =&gt; {\r\n  const [movie, setMovie] = useState([\r\n    { name: \"Harry Potter\", lengthOfTime: 120},\r\n    { name: \"Sherlock Holmes\", lengthOfTime: 125},\r\n    { name: \"Avengers\", lengthOfTime: 130},\r\n    { name: \"Spiderman\", lengthOfTime: 124},\r\n  ]);\r\n\r\n  return (\r\n    &lt;MovieContext.Provider value={[movie, setMovie]}&gt;\r\n      {props.children}\r\n    &lt;\/MovieContext.Provider&gt;\r\n  );\r\n};<\/code><\/pre>\r\n<p>lalu bagaimanakah kita menggunakan context diatas, disini kita akan membuat file baru yang bernama Movie.js yang berisi movie provider dan dan component movie list dan movie form<\/p>\r\n<pre class=\"wp-block-code\"><code>import React from \"react\"\r\nimport {MovieProvider} from \".\/MovieContext\"\r\nimport MovieList from \".\/MovieList\"\r\nimport MovieForm from \".\/MovieForm\"\r\n\r\nconst Movie = () =&gt;{\r\n  return(\r\n    &lt;MovieProvider&gt;\r\n      &lt;MovieList\/&gt;\r\n      &lt;MovieForm\/&gt;\r\n    &lt;\/MovieProvider&gt;\r\n  )\r\n}\r\n\r\nexport default Movie<\/code><\/pre>\r\n<p>kenapa movie list dan movie form component harus berada di dalam movie provider itu karena kita akan menggunakan state yang ada di dalam movie provider<\/p>\r\n<p>lalu kita isi movie list dengan kode seperti di bawah ini:<\/p>\r\n<pre class=\"wp-block-code\"><code>import React, {useContext} from \"react\"\r\nimport {MovieContext} from \".\/MovieContext\"\r\n\r\nconst MovieList = () =&gt;{\r\n  const [movie] = useContext(MovieContext)\r\n\r\n  return(\r\n    &lt;ul&gt;\r\n      {movie.map(el=&gt;{\r\n        return &lt;li&gt;name: {el.name} {el.lengthOfTime} minutes&lt;\/li&gt;\r\n      })}\r\n    &lt;\/ul&gt;\r\n  )\r\n\r\n}\r\n\r\nexport default MovieList<\/code><\/pre>\r\n<p>disini kita menggunakan state di dalam context provider yang berisi data film lalu kita munculkan isi data, dari sini terlihat tidak berbeda dari kode useState biasa tapi jika di kita lihat lebih teliti lagi, disini kita tidak menginisialisasi lagi karna data sudah kita tampung di provider<\/p>\r\n<p>dan untuk movieForm kita tulis kode seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>import React, {useContext, useState} from \"react\"\r\nimport {MovieContext} from \".\/MovieContext\"\r\n\r\nconst MovieForm = () =&gt;{\r\n  const [name, setName] = useState(\"\")\r\n  const [lengthOfTime, setLengthOfTime] = useState(0)\r\n  const [movie, setMovie] = useContext(MovieContext)\r\n\r\n  const handleSubmit = (event) =&gt;{\r\n    event.preventDefault()\r\n    setMovie([...movie, {name, lengthOfTime}])\r\n    setName(\"\")\r\n    setLengthOfTime(\"\")\r\n  }\r\n  const handleChangeName = (event) =&gt;{\r\n    setName(event.target.value)\r\n  }\r\n\r\n  const handleChangeTime = (event) =&gt;{\r\n    setLengthOfTime(event.target.value)\r\n  }\r\n\r\n  return(\r\n    &lt;&gt;\r\n      &lt;form onSubmit={handleSubmit}&gt;\r\n        &lt;input type=\"text\" value={name} onChange={handleChangeName} \/&gt;\r\n        &lt;input type=\"number\" value={lengthOfTime} onChange={handleChangeTime} \/&gt;\r\n        &lt;button&gt;submit&lt;\/button&gt;\r\n      &lt;\/form&gt;\r\n    &lt;\/&gt;\r\n  )\r\n\r\n}\r\n\r\nexport default MovieForm<\/code><\/pre>\r\n<p>form disini menggunakan setState yang sudah kita definisikan di dalam provider sehingga permasalahan sebelumnya yang setState selalu harus dalam satu component menjadi lebih mudah karena bisa berbeda component<\/p>\r\n<p>dari sini kita dapat menyimpulkan bahwa penggunaan context sangat berguna untuk proses development reactjs<\/p>\r\n<p><strong>Referensi<\/strong>:<\/p>\r\n<ul>\r\n<li><a href=\"https:\/\/id.reactjs.org\/docs\/context.html\">https:\/\/id.reactjs.org\/docs\/context.html<\/a><\/li>\r\n<\/ul>\r\n<p>&nbsp;<\/p>\r\n<\/div>","waktu_publish":"2021-05-20 08:00:00","status_publish":"publish","urutan":4,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:12:45","waktu_publish_formatted":" Kamis, 20 Mei 2021. 08:00:00 WIB."},{"id":786,"uuid":"631814a2-a3e4-4b25-803a-73296d3b177e","author_user_id":4336,"materi_section_id":215,"judul":"Hari Ke-15 \u2013 Reactjs \u2013 React Router","permalink":"hari-ke-15-reactjs-react-router","konten":"<p>pastinya dalam benak kita terpikirkan bagaimana ya berpindah-pindah halaman di reactjs, apa yang harus kita lakukan, apakah cukup menggunakan state?, atau apakah cukup menggunakan hooks atau context?. ya sebenarnya itu cukup hanya saja kita harus menyiapkan manajemen halamannya itu sendiri.<\/p>\r\n<p>oleh karena itu kita membutuhkan sebuah package yang dapat membantu kita, lalu apakah tools tersebut? jawabannya adalah ada yaitu React Router. React Router merupakan packages yang memungkinkan kita untuk mengatur navigasi dari setiap component.<\/p>\r\n<p>untuk menggunakan react router silahkan install react router di project reactjs anda:<\/p>\r\n<pre class=\"wp-block-code\"><code>npm install react-router-dom<\/code><\/pre>\r\n<p>untuk contoh penggunaan dasar di dalam react router seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>import React from \"react\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nexport default function App() {\r\n  return (\r\n    &lt;Router&gt;\r\n      &lt;div&gt;\r\n        &lt;nav&gt;\r\n          &lt;ul&gt;\r\n            &lt;li&gt;\r\n              &lt;Link to=\"\/\"&gt;Home&lt;\/Link&gt;\r\n            &lt;\/li&gt;\r\n            &lt;li&gt;\r\n              &lt;Link to=\"\/about\"&gt;About&lt;\/Link&gt;\r\n            &lt;\/li&gt;\r\n            &lt;li&gt;\r\n              &lt;Link to=\"\/users\"&gt;Users&lt;\/Link&gt;\r\n            &lt;\/li&gt;\r\n          &lt;\/ul&gt;\r\n        &lt;\/nav&gt;\r\n\r\n        {\/* A &lt;Switch&gt; looks through its children &lt;Route&gt;s and\r\n            renders the first one that matches the current URL. *\/}\r\n        &lt;Switch&gt;\r\n          &lt;Route path=\"\/about\"&gt;\r\n            &lt;About \/&gt;\r\n          &lt;\/Route&gt;\r\n          &lt;Route path=\"\/users\"&gt;\r\n            &lt;Users \/&gt;\r\n          &lt;\/Route&gt;\r\n          &lt;Route path=\"\/\"&gt;\r\n            &lt;Home \/&gt;\r\n          &lt;\/Route&gt;\r\n        &lt;\/Switch&gt;\r\n      &lt;\/div&gt;\r\n    &lt;\/Router&gt;\r\n  );\r\n}\r\n\r\nfunction Home() {\r\n  return &lt;h2&gt;Home&lt;\/h2&gt;;\r\n}\r\n\r\nfunction About() {\r\n  return &lt;h2&gt;About&lt;\/h2&gt;;\r\n}\r\n\r\nfunction Users() {\r\n  return &lt;h2&gt;Users&lt;\/h2&gt;;\r\n}<\/code><\/pre>\r\n<p>jika kita menggunakan kode tersebut kita dapat menggunakan navigasi dalam untuk menampilkan masing-masing komponen<\/p>\r\n<p>lalu bagaimana pengimplementasiannya jika kita menggunakan file terpisah. mari kita coba membuatnya<\/p>\r\n<p>pertama buatlah file yang mengatur navigasi kita misal diberi nama Routes.js<\/p>\r\n<pre class=\"wp-block-code\"><code>import React from \"react\";\r\nimport Home from \".\/Home\";\r\nimport { Switch, Route, BrowserRouter as Router, Link } from \"react-router\";\r\n\r\nconst Routes = () =&gt; {\r\n\r\n  return (<br \/>    &lt;Router&gt;<br \/>      &lt;Nav\/&gt;<\/code><code>\r\n      &lt;Switch&gt;\r\n        &lt;Route exact path=\"\/\"&gt;\r\n          &lt;Home \/&gt;\r\n        &lt;\/Route&gt;\r\n        &lt;Route path=\"\/about\"&gt;\r\n          &lt;About \/&gt;\r\n        &lt;\/Route&gt;\r\n        &lt;Route exact path=\"\/dashboard\"&gt;\r\n          &lt;Dashboard \/&gt;\r\n        &lt;\/Route&gt;\r\n      &lt;\/Switch&gt;<br \/>    &lt;\/Router\r\n  );\r\n};\r\n\r\nexport default Routes;<\/code><\/pre>\r\n<p>lalu buatlah nav yang mengatur setiap kali link di klik akan menuju route tersebut<\/p>\r\n<pre class=\"wp-block-code\"><code>\r\n\r\nconst Nav = () =&gt; {\r\n  return (\r\n    &lt;&gt;\r\n      &lt;ul&gt;\r\n        &lt;li&gt;\r\n          &lt;Link to=\"\/\"&gt;Home&lt;\/Link&gt;\r\n        &lt;\/li&gt;\r\n        &lt;li&gt;\r\n          &lt;Link to=\"\/about\"&gt;About&lt;\/Link&gt;\r\n        &lt;\/li&gt;\r\n        &lt;li&gt;\r\n          &lt;Link to=\"\/dashboard\"&gt;Dashboard&lt;\/Link&gt;\r\n        &lt;\/li&gt;\r\n      &lt;\/ul&gt;\r\n    &lt;\/&gt;\r\n  )\r\n}\r\n<\/code><\/pre>\r\n<p>lalu gunakan component Routes tersebut untuk di dalam app.js seperti di bawah ini:<\/p>\r\n<pre class=\"wp-block-code\"><code>function App() {\r\n  return (\r\n      &lt;Routes\/&gt;\r\n    );\r\n  }\r\n<\/code><\/pre>\r\n<p><strong>UseParams<\/strong><\/p>\r\n<p>biasanya di dalam suatu url mengandung key\/value tertentu yang dimana itu menandakan bahwa page itu sama tetapi dataya berbeda, contoh seperti halnya artikel di dalam blog. untuk membuat hal seperti itu kita dapat menggunakan useParams. useParams berguna untuk mengembalikan object key atau value dari parameter URL.&nbsp;<\/p>\r\n<p>berikut ini contoh dari useParams:&nbsp;<\/p>\r\n<pre>import React from \"react\";<br \/>import {<br \/>&nbsp; BrowserRouter as Router,<br \/>&nbsp; Switch,<br \/>&nbsp; Route,<br \/>&nbsp; useParams<br \/>} from \"react-router-dom\";<br \/><br \/>function BlogPost() {<br \/>&nbsp; let { slug } = useParams();<br \/>&nbsp; return &lt;div&gt;Now showing post {slug}&lt;\/div&gt;;<br \/>}<br \/><br \/>function Routes(<br \/>&nbsp; &lt;Router&gt;<br \/>&nbsp; &nbsp; &lt;Switch&gt;<br \/>&nbsp; &nbsp; &nbsp; &lt;Route exact path=\"\/\"&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &lt;HomePage \/&gt;<br \/>&nbsp; &nbsp; &nbsp; &lt;\/Route&gt;<br \/>&nbsp; &nbsp; &nbsp; &lt;Route path=\"\/blog\/:slug\"&gt;<br \/>&nbsp; &nbsp; &nbsp; &nbsp; &lt;BlogPost \/&gt;<br \/>&nbsp; &nbsp; &nbsp; &lt;\/Route&gt;<br \/>&nbsp; &nbsp; &lt;\/Switch&gt;<br \/>&nbsp; &lt;\/Router&gt;<br \/>);<br \/><br \/>export default Routes<\/pre>\r\n<p><strong>Referensi<\/strong>:<\/p>\r\n<ul>\r\n<li><a href=\"https:\/\/reactrouter.com\/\">https:\/\/reactrouter.com\/<\/a><\/li>\r\n<li><a href=\"https:\/\/reactrouter.com\/web\/guides\/quick-start\">https:\/\/reactrouter.com\/web\/guides\/quick-start<\/a><\/li>\r\n<\/ul>\r\n<p>&nbsp;<\/p>\r\n<p><\/p>","waktu_publish":"2021-05-21 08:00:00","status_publish":"publish","urutan":5,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:12:26","waktu_publish_formatted":" Jumat, 21 Mei 2021. 08:00:00 WIB."}]},{"id":216,"uuid":"f9308bd7-9791-446f-91f1-6fa195bb6b4d","materi_id":25,"nama":"Pekan 3 - Tugas","permalink":"pekan-3-tugas","urutan":7,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":null,"posting":[{"id":787,"uuid":"5f7625c5-a904-486e-a9c1-365f8b46e74c","author_user_id":4336,"materi_section_id":216,"judul":"Tugas 11 \u2013 Reactjs State & Components Lifecycle","permalink":"tugas-11-reactjs-state-components-lifecycle","konten":"<h2 id=\"petunjuk-pengerjaan\"><strong>Petunjuk Pengerjaan<\/strong><\/h2>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<h3 id=\"1-menambahkan-folder-baru-di-dalam-src\"><strong>1. Menambahkan folder baru di dalam src<\/strong><\/h3>\r\n<p>Gunakanlah Project yang sudah di buat pada <strong>Tugas-9<\/strong>. lalu buatlah folder baru dengan nama &ldquo;<strong>Tugas-11<\/strong>&rdquo; di dalam folder src di dalam project reactjs<\/p>\r\n<h3 id=\"2-kerjakan-soal-di-bawah-ini\"><strong>2. kerjakan soal di bawah ini<\/strong><\/h3>\r\n<p>buatlah sebuah component yang di munculkan di app.js (tugas sebelumnya tetap dimunculkan) dengan ketentuan component memiliki dua timer yaitu jam sekarang dan hitung mundur seperti tampilan di bawah ini:<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-8295\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/timer.png\" sizes=\"(max-width: 819px) 100vw, 819px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/timer.png 819w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/timer-300x34.png 300w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/timer-768x87.png 768w\" alt=\"\" width=\"819\" height=\"93\" \/><\/figure>\r\n<p>dengan ketentuan start hitung mundur mulai dari diatas atau sama dengan 100, ketika hitung mundur sudah mencapai angka 0 maka buatlah smua component di tugas 11 hilang (<strong>gunakan method-method dalam component lifecycle bukan di hide pake css<\/strong>)<\/p>\r\n<p><strong>perlu diperhatikan untuk tugas 11 ini&nbsp;wajib&nbsp;menggunakan&nbsp;class component<\/strong><\/p>\r\n<p>berikut ini contoh output dari tugas 11:<br \/><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/01\/tugas11-edited.gif\" \/><\/p>\r\n<p>pada tugas ini <strong>tidak di perbolehkan<\/strong> menggunakan bootstrap ataupun sejenisnya<\/p>\r\n<h2 id=\"5-kumpulkan-tugas\">3. Kumpulkan tugas<\/h2>\r\n<p>Selanjutnya kumpulkan tugas Anda dengan melakukan copy link commit yang telah dibuat dari halaman repository project gitlab ke akun Anda di&nbsp;<a href=\"\/\">https:\/\/sanbercode.com\/<\/a>&nbsp;.<\/p>\r\n<p>Untuk selengkapnya, teknis pengumpulan tugas dapat di lihat di&nbsp;<a href=\"https:\/\/blog.sanbercode.com\/docs\/kurikulum-reactjs\/pendahuluan\/teknis-pengumpulan-tugas\/\" target=\"_blank\" rel=\"noreferrer noopener\">teknis pengumpulan tugas<\/a><\/p>\r\n<p>&nbsp;<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>&nbsp;<\/p>\r\n<p>&nbsp;<\/p>\r\n<p><\/p>","waktu_publish":"2021-05-17 08:00:00","status_publish":"publish","urutan":1,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-05-18 09:30:27","waktu_publish_formatted":" Senin, 17 Mei 2021. 08:00:00 WIB."},{"id":788,"uuid":"1f0ba4a8-c2cc-4ccc-bb1f-54da9a23c192","author_user_id":4336,"materi_section_id":216,"judul":"Tugas 12 \u2013 Reactjs Lists & Forms","permalink":"tugas-12-reactjs-lists-forms","konten":"<div class=\"entry-content\">\r\n<h2 id=\"petunjuk-pengerjaan\"><strong>Petunjuk Pengerjaan<\/strong><\/h2>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<h3 id=\"1-menambahkan-folder-baru-di-dalam-src\"><strong>1. Menambahkan folder baru di dalam src&nbsp;<\/strong><\/h3>\r\n<p>Gunakanlah Project yang sudah di buat pada <strong>Tugas-9<\/strong>. lalu buatlah folder baru dengan nama &ldquo;Tugas-12&rdquo; di dalam folder src di dalam project reactjs<\/p>\r\n<h3 id=\"2-kerjakan-soal-di-bawah-ini\"><strong>2. kerjakan soal di bawah ini<\/strong><\/h3>\r\n<p>buatlah form untuk menambahkan data ke tabel harga buah dengan inputan nama, hargaTotal dan beratTotal (dalam satuan gram)<\/p>\r\n<p>untuk inisialisasi data awal gunakan data di bawah ini:&nbsp;<\/p>\r\n<div>\r\n<pre>var daftarBuah = [<br \/>  {nama: \"Nanas\", hargaTotal: 100000, beratTotal: 4000 },<br \/>  {nama: \"Manggis\", hargaTotal: 350000, beratTotal: 10000},<br \/>  {nama: \"Nangka\", hargaTotal: 90000, beratTotal: 2000},<br \/> &nbsp;{nama: \"Durian\", hargaTotal: 400000, beratTotal: 5000},<br \/> &nbsp;{nama: \"Strawberry\", hargaTotal: 120000, beratTotal: 6000}<br \/>]<\/pre>\r\n<\/div>\r\n<p>isi variabel diatas bisa langsung di masukkan ke state awal<\/p>\r\n<p>lalu pada tabel tersebut tambahkan kolom aksi yang berisi button&nbsp;<strong>edit&nbsp;<\/strong>(yang dimana ketika klik edit maka akan muncul datanya di inputan form untuk bisa diedit) dan&nbsp;<strong>delete<\/strong><\/p>\r\n<p>lalu tampilkan dalam App.js untuk tugas-tugas sebelumnya yang di tampilkan silahkan komen saja, jadi yang di tampilkan hanya tugas 12 saja<\/p>\r\n<p><strong>perlu diperhatikan untuk tugas 12 ini wajib menggunakan class component<\/strong><\/p>\r\n<p>kurang lebih outputnya seperti ini (stylingnya sudah boleh bebas asalkan <strong>tidak<\/strong> menggunakan <strong>bootstrap<\/strong> dan sejenisnya):<br \/><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/04\/tugas-12-a.png\" \/>&nbsp;<\/p>\r\n<p>ketentuan pada form adalah:<\/p>\r\n<ul>\r\n<li>semua inputan wajib diisi<\/li>\r\n<li>inputan total berat minimal 2 kg<\/li>\r\n<\/ul>\r\n<p>pada tugas ini <strong>tidak di perbolehkan<\/strong> menggunakan <strong>bootstrap<\/strong> ataupun sejenisnya<\/p>\r\n<p>&nbsp;<\/p>\r\n<\/div>\r\n<h2 id=\"5-kumpulkan-tugas\">3. Kumpulkan tugas<\/h2>\r\n<p>Selanjutnya kumpulkan tugas Anda dengan melakukan copy link commit yang telah dibuat dari halaman repository project gitlab ke akun Anda di&nbsp;<a href=\"\/\">https:\/\/sanbercode.com\/<\/a>&nbsp;.<\/p>\r\n<p>Untuk selengkapnya, teknis pengumpulan tugas dapat di lihat di&nbsp;<a href=\"https:\/\/blog.sanbercode.com\/docs\/kurikulum-reactjs\/pendahuluan\/teknis-pengumpulan-tugas\/\" target=\"_blank\" rel=\"noreferrer noopener\">teknis pengumpulan tugas<\/a><\/p>\r\n<p>&nbsp;<\/p>\r\n<p><\/p>","waktu_publish":"2021-05-18 08:00:00","status_publish":"publish","urutan":2,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-05-18 08:57:49","waktu_publish_formatted":" Selasa, 18 Mei 2021. 08:00:00 WIB."},{"id":789,"uuid":"5a199cd5-1c7a-4d60-af9f-0c089aa4ffd9","author_user_id":4336,"materi_section_id":216,"judul":"Tugas 13 \u2013 Reactjs \u2013 Hooks & axios","permalink":"tugas-13-reactjs-hooks-axios","konten":"<div class=\"entry-content\">\r\n<h2 id=\"petunjuk-pengerjaan\"><strong>Petunjuk Pengerjaan<\/strong><\/h2>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<h3 id=\"1-menambahkan-folder-baru-di-dalam-folder-src\"><strong>1. Menambahkan folder baru di dalam folder src&nbsp;<\/strong><\/h3>\r\n<p>Gunakanlah Project yang sudah di buat pada <strong>Tugas-9<\/strong>. lalu buatlah folder baru dengan nama &ldquo;<strong>Tugas-13<\/strong>&rdquo; di dalam folder src di dalam project reactjs<\/p>\r\n<h3 id=\"2-kerjakan-soal-di-bawah-ini\"><strong>2. kerjakan soal di bawah ini<\/strong><\/h3>\r\n<p>buatlah Lists &amp; forms (CRUD) menggunakan function components dan hooks, lalu implementasi kan REST API di dalamnya dengan menggunakan axios, berikut ini api yang di gunakan<\/p>\r\n<p>GET&nbsp;<a href=\"http:\/\/backendexample.sanbercloud.com\/api\/student-scores\">http:\/\/backendexample.sanbercloud.com\/api\/student-scores<\/a><\/p>\r\n<p>POST&nbsp;<a href=\"http:\/\/backendexample.sanbercloud.com\/api\/student-scores\" target=\"_blank\" rel=\"noopener\" aria-label=\" (opens in a new tab)\">http:\/\/backendexample.sanbercloud.com\/api\/student-scores<\/a><\/p>\r\n<p>PUT&nbsp;<a href=\"http:\/\/backendexample.sanbercloud.com\/api\/student-scores\" target=\"_blank\" rel=\"noopener\">http:\/\/backendexample.sanbercloud.com\/api\/student-scores<\/a>\/{ID_STUDENt}<\/p>\r\n<p>DELETE&nbsp;<a href=\"http:\/\/backendexample.sanbercloud.com\/api\/student-scores\" target=\"_blank\" rel=\"noopener\">http:\/\/backendexample.sanbercloud.com\/api\/student-scores<\/a>\/{ID_STUDENt}<\/p>\r\n<p>lalu pada app.js bagian component yang menampilkan tugas sebelumnya di comment. lalu ganti dengan Tugas-13 Component<\/p>\r\n<p>kurang lebih outputnya seperti ini (stylingnya sudah boleh bebas asalkan <strong>tidak<\/strong> menggunakan <strong>bootstrap<\/strong> dan sejenisnya):<\/p>\r\n<p>&nbsp;<img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/04\/tugas-13-b.png\" \/><\/p>\r\n<p>ketentuan:<\/p>\r\n<ul>\r\n<li>pada form di atas nilai hanya bisa di input dari 0 hingga 100<\/li>\r\n<li>indeks nilai memiliki kondisi: <code>nilai &gt;= 80 indeksnya A, nilai &gt;= 70 dan nilai &lt; 80 indeksnya B, nilai &gt;= 60 dan nilai &lt; 70, indeksnya c\r\nnilai &gt;= 50 dan nilai &lt; 60 indeksnya D, nilai &lt; 50 indeksnya E<\/code><\/li>\r\n<\/ul>\r\n<p>pada tugas ini <strong>tidak di perbolehkan<\/strong> menggunakan bootstrap ataupun sejenisnya<\/p>\r\n<p>&nbsp;<\/p>\r\n<h2 id=\"5-kumpulkan-tugas\">3. Kumpulkan tugas<\/h2>\r\n<p>Selanjutnya kumpulkan tugas Anda dengan melakukan copy link commit yang telah dibuat dari halaman repository project gitlab ke akun Anda di&nbsp;<a href=\"\/\">https:\/\/sanbercode.com\/<\/a>&nbsp;.<\/p>\r\n<p>Untuk selengkapnya, teknis pengumpulan tugas dapat di lihat di&nbsp;<a href=\"https:\/\/blog.sanbercode.com\/docs\/kurikulum-reactjs\/pendahuluan\/teknis-pengumpulan-tugas\/\" target=\"_blank\" rel=\"noreferrer noopener\">teknis pengumpulan tugas<\/a><\/p>\r\n<\/div>\r\n<p>&nbsp;<\/p>","waktu_publish":"2021-05-19 08:00:00","status_publish":"publish","urutan":3,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:08:39","waktu_publish_formatted":" Rabu, 19 Mei 2021. 08:00:00 WIB."},{"id":790,"uuid":"b02d1339-ce95-43b8-8494-316843a1cc83","author_user_id":4336,"materi_section_id":216,"judul":"Tugas 14 \u2013 Reactjs \u2013 Context","permalink":"tugas-14-reactjs-context","konten":"<div class=\"entry-content\">\r\n<h2 id=\"petunjuk-pengerjaan\"><strong>Petunjuk Pengerjaan<\/strong><\/h2>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<h3 id=\"1-menambahkan-folder-baru-di-dalam-src\"><strong>1. Menambahkan folder baru di dalam src<\/strong><\/h3>\r\n<p>Gunakanlah Project yang sudah di buat pada <strong>Tugas-9<\/strong>. lalu buatlah folder baru dengan nama &ldquo;<strong>Tugas-14<\/strong>&rdquo; di dalam folder src di dalam project reactjs<\/p>\r\n<h3 id=\"2-kerjakan-soal-di-bawah-ini\"><strong>2. kerjakan soal di bawah ini<\/strong><\/h3>\r\n<p>copy semua file dari&nbsp;<strong>Tugas-13<\/strong>&nbsp;ke folder&nbsp;<strong>Tugas-14<\/strong>, lalu gunakanlah context di dalam tugas tersebut, create, delete dan edit sudah menggunakan context (tetap menggunakan axios)<\/p>\r\n<p>agar lebih leluasa menggunakan contextnya buatlah file terpisah untuk tabel dan form. (jika ingin membuat file terpisah lebih dari itu di persilahkan)<\/p>\r\n<p>kurang lebih outputnya seperti ini (stylingnya sudah boleh bebas asalkan <strong>tidak<\/strong> menggunakan <strong>bootstrap<\/strong> dan sejenisnya:<\/p>\r\n<p><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/04\/tugas-13-b.png\" \/><\/p>\r\n<p>pada tugas ini <strong>tidak di perbolehkan<\/strong> menggunakan bootstrap ataupun sejenisnya<\/p>\r\n<\/div>\r\n<h2 id=\"5-kumpulkan-tugas\">3. Kumpulkan tugas<\/h2>\r\n<p>Selanjutnya kumpulkan tugas Anda dengan melakukan copy link commit yang telah dibuat dari halaman repository project gitlab ke akun Anda di&nbsp;<a href=\"\/\">https:\/\/sanbercode.com\/<\/a>&nbsp;.<\/p>\r\n<p>Untuk selengkapnya, teknis pengumpulan tugas dapat di lihat di&nbsp;<a href=\"https:\/\/blog.sanbercode.com\/docs\/kurikulum-reactjs\/pendahuluan\/teknis-pengumpulan-tugas\/\" target=\"_blank\" rel=\"noreferrer noopener\">teknis pengumpulan tugas<\/a><\/p>","waktu_publish":"2021-05-20 08:00:00","status_publish":"publish","urutan":4,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:07:54","waktu_publish_formatted":" Kamis, 20 Mei 2021. 08:00:00 WIB."},{"id":791,"uuid":"e99a6fab-35e8-4bf0-849c-bd11787384c3","author_user_id":4336,"materi_section_id":216,"judul":"Tugas 15 Reactjs \u2013 React Router","permalink":"tugas-15-reactjs-react-router","konten":"<div class=\"entry-content\">\r\n<h2 id=\"petunjuk-pengerjaan\"><strong>Petunjuk Pengerjaan<\/strong><\/h2>\r\n<p>Ikutilah langkah-langkah pengerjaan di bawah ini:&zwnj;<\/p>\r\n<h3 id=\"1-menambahkan-folder-baru-di-dalam-src\"><strong>1. Menambahkan folder baru di dalam src<\/strong><\/h3>\r\n<p>Gunakanlah Project yang sudah di buat pada <strong>Tugas-9<\/strong>. lalu buatlah folder baru dengan nama &ldquo;<strong>Tugas-15<\/strong>&rdquo; di dalam folder src<\/p>\r\n<h3 id=\"2-kerjakan-soal-di-bawah-ini\"><strong>2. kerjakan soal di bawah ini<\/strong><\/h3>\r\n<p>buatlah sebuah navigasi menu yang berisi tiap tugas dari Tugas-9 (bisa pake path home atau root untuk tugas 9 saja) hingga Tugas-15 di folder \"<strong>Tugas-15<\/strong>\", <br \/><br \/>lalu buatlah component untuk color theme yang bisa merubah tema warna dari navbar ada dua tema yaitu &ldquo;light&rdquo; dan &ldquo;dark&rdquo;tentunya menggunakan context<\/p>\r\n<p>selain itu copy tugas-14 dan rubah agar tabel terpisah dari form yang dmana form ini ada path untuk create nya dan ada juga path untuk editnya&nbsp;<\/p>\r\n<p>berikut ini penjelasan tugas 15:<br \/><iframe src=\"https:\/\/www.youtube.com\/embed\/vvM-82dtUHk\" width=\"892\" height=\"500\" allowfullscreen=\"allowfullscreen\"><\/iframe><\/p>\r\n<p>pada tugas ini <strong>tidak di perbolehkan<\/strong> menggunakan bootstrap ataupun sejenisnya<\/p>\r\n<\/div>\r\n<p><\/p>","waktu_publish":"2021-05-21 08:00:00","status_publish":"publish","urutan":5,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:07:05","waktu_publish_formatted":" Jumat, 21 Mei 2021. 08:00:00 WIB."}]},{"id":217,"uuid":"6cf2121e-25f1-4897-88c5-f98db476bd51","materi_id":25,"nama":"Pekan 4  - Materi","permalink":"pekan-4-materi","urutan":8,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":null,"posting":[{"id":792,"uuid":"0141a403-123a-48ba-9a26-fc04631a8ba3","author_user_id":4336,"materi_section_id":217,"judul":"Reactjs \u2013 Menggunakan Ant Design UI","permalink":"reactjs-menggunakan-ant-design-ui","konten":"<p>mungkin dalam benak kita sering terpikir bagaimana tampilan UI yang tepat untuk reactjs, apakah kita harus styling satu persatu, component per component dan apakah kita harus membuat itu semua dari awal. mungkin opsi tersebut bisa di pilih tapi sebenarnya kita bisa menggunakan framework Design UI yang.<\/p>\r\n<p>framework Design UI reactjs yang sering digunakan cukup beragam, misalnya material UI, Core UI, Ant Design dll.<\/p>\r\n<p>pada materi kali ini kita akan mencoba menggunakan Ant Design dan mencoba sedikit penerapannya<\/p>\r\n<p>langkah pertama adalah kita perlu install Ant Design terlebih dahulu<\/p>\r\n<pre class=\"wp-block-code\"><code>npm install antd<\/code><\/pre>\r\n<p>lalu kita bisa coba membuat component yang menggunakan Ant Design<\/p>\r\n<pre class=\"wp-block-code\"><code>import React from 'react';\r\nimport { Button } from 'antd';\r\n\/\/ kode css dibawah ini baiknya simpan di file app.js saja\r\nimport 'antd\/dist\/antd.css';\r\n\r\nconst Example = () =&gt; {\r\n  return (\r\n    &lt;&gt;\r\n      &lt;Button type=\"primary\"&gt;Primary Button&lt;\/Button&gt;\r\n      &lt;Button&gt;Default Button&lt;\/Button&gt;\r\n      &lt;Button type=\"dashed\"&gt;Dashed Button&lt;\/Button&gt;\r\n      &lt;br \/&gt;\r\n      &lt;Button type=\"text\"&gt;Text Button&lt;\/Button&gt;\r\n      &lt;Button type=\"link\"&gt;Link Button&lt;\/Button&gt;\r\n    &lt;\/&gt;\r\n  );\r\n}\r\n\r\nexport default Example<\/code><\/pre>\r\n<p>maka akan muncul tampilan seperti di bawah ini:<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-12162\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/10\/image-3.png\" sizes=\"(max-width: 363px) 100vw, 363px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/10\/image-3.png 363w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/10\/image-3-300x70.png 300w\" alt=\"\" width=\"363\" height=\"85\" \/>\r\n<figcaption>contoh tampilan button Ant Design<\/figcaption>\r\n<\/figure>\r\n<p>ini adalah component button yang menggunakan Ant Design, selain button terdapat banyak component yang lainnya<\/p>\r\n<p>berikut ini contoh menggunakan layout Ant Design:&nbsp;<a href=\"https:\/\/youtu.be\/enQYbZoexuQ\" target=\"_blank\" rel=\"noreferrer noopener\">https:\/\/youtu.be\/enQYbZoexuQ<\/a><\/p>\r\n<p>untuk contoh component lainnya anda bisa mengecek dokumentasinya Ant Design Melalui:&nbsp;<a href=\"https:\/\/ant.design\/components\/overview\/\" target=\"_blank\" rel=\"noreferrer noopener\">https:\/\/ant.design\/components\/overview\/<\/a><\/p>\r\n<p><strong>Referensi<\/strong>:<\/p>\r\n<ul>\r\n<li><a href=\"https:\/\/ant.design\/components\/button\/\" target=\"_blank\" rel=\"noreferrer noopener\">https:\/\/ant.design\/components\/button\/<\/a><\/li>\r\n<li><a href=\"https:\/\/ant.design\/components\/overview\/\" target=\"_blank\" rel=\"noreferrer noopener\">https:\/\/ant.design\/components\/overview\/<\/a><\/li>\r\n<\/ul>","waktu_publish":"2021-05-24 08:00:00","status_publish":"publish","urutan":1,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:06:36","waktu_publish_formatted":" Senin, 24 Mei 2021. 08:00:00 WIB."},{"id":794,"uuid":"2022f85d-3394-415f-adb4-71ae358a9b4b","author_user_id":4336,"materi_section_id":217,"judul":"Reactjs \u2013 Authentication","permalink":"reactjs-authentication","konten":"<p>Authentication adalah proses dimana seorang user (melalui berbagai macam akses fisik berupa komputer , melalui jaringan , atau melalui remote access ) mendapatkan hak akses kepada suatu entity (dalam hal ini jaringan suatu corporate)<\/p>\r\n<p>dari definisi diatas mungkin malah membingungkan padahal kita sering sekali menggunakannya dalam kehidupan sehari-hari. contohnya kita pernah register akun atau login pada suatu web atau app. proses dimana kita masuk ke sebuah sistem dengan validasi login atau register (jika belum mempunyai akun) adalah authentication<\/p>\r\n<p>lalu seberapa penting authentication itu, jawabannya adalah tergantung aplikasi yang digunakan kita, jika didalam sana terdapat proses editing data dan yang boleh mengedit hanya user tertentu maka authentication sangat di perlukan<\/p>\r\n<p>nah untuk penerapan dalam reactjs seperti apa, dalam hal ini kita memerlukan packages axios, untuk jenis component bisa pakai function atau class selama menggunakan state management (seperti context)<\/p>\r\n<p>berikut ini api yang bisa kita gunakan untuk penerapannya:<\/p>\r\n<pre class=\"wp-block-code\"><code>===bisa di akses tanpa token===\r\nGET https:\/\/backendexample.sanbersy.com\/api\/contestants\r\nGET https:\/\/backendexample.sanbersy.com\/api\/contestants\r\n\/{ID}\r\n\r\n\/\/ api yang menghasilkan token\r\n\r\n\/\/ register untuk user yang belum punya akun\r\nPOST https:\/\/backendexample.sanbersy.com\/api\/register\r\n(parameter untuk register name, email dan password)\r\n<br \/>\/\/ login untuk user yang sudah punya akun<br \/><br \/>POST https:\/\/backendexample.sanbersy.com\/api\/user-login\r\n(parameter untuk login email dan password)  <br \/><br \/>===harus di akses dengan token=== &nbsp;<\/code><\/pre>\r\n<pre class=\"wp-block-code\"><code>POST https:\/\/backendexample.sanbersy.com\/api\/data-contestant\r\n PUT https:\/\/backendexample.sanbersy.com\/api\/data-contestant\/{ID}<\/code><code><\/code><\/pre>\r\n<pre class=\"wp-block-code\"><code>DELETE https:\/\/backendexample.sanbersy.com\/api\/data-contestant\/{ID}<\/code><\/pre>\r\n<p>pada daftar api di atas terdapat api yang memerlukan token untuk mendapatkan responsenya, token ini berfungsi untuk validasi apakah user tersebut benar terdapat di sistem dan sudah login<\/p>\r\n<p>untuk menerapkannya pertama kita buat terlebih dahulu userContext dengan kode seperti di bawah ini:<\/p>\r\n<pre class=\"wp-block-code\"><code>import React, { useState, createContext } from \"react\";\r\n\r\nexport const UserContext = createContext();\r\n\r\nexport const UserProvider = props =&gt; {\r\n  const currentUser = JSON.parse(localStorage.getItem(\"user\"))\r\n  const iniateUser = currentUser ? currentUser : null\r\n  const [user, setUser] = useState(iniateUser);\r\n\r\n  return (\r\n    &lt;UserContext.Provider value={[user, setUser]}&gt;\r\n      {props.children}\r\n    &lt;\/UserContext.Provider&gt;\r\n  );\r\n};<\/code><\/pre>\r\n<p>lalu kita import module UserProvider dan kita langsung digunakan pada app.js seperti di bawah ini:<\/p>\r\n<pre class=\"wp-block-code\"><code>import React from 'react';\r\nimport Routes from \".\/Materi-15\/Routes\"\r\nimport {UserProvider} from \".\/Materi-Authentication\/UserContext\"\r\nimport '.\/App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    &lt;&gt;\r\n      &lt;UserProvider&gt;\r\n        &lt;Routes\/&gt;\r\n      &lt;\/UserProvider&gt;\r\n    &lt;\/&gt;\r\n  );\r\n}\r\n\r\nexport default App;\r\n<\/code><\/pre>\r\n<p>disini kita sudah menginisiasi user lalu langkah berikutnya kita buat component registr dan component login<\/p>\r\n<p>pada component register kita akan menggunakan api register:<\/p>\r\n<pre class=\"wp-block-code\"><code>import React, { useContext, useState } from \"react\"\r\nimport {UserContext} from \".\/UserContext\"\r\nimport axios from \"axios\"\r\n\r\nconst Register = () =&gt;{\r\n  const [, setUser] = useContext(UserContext)\r\n  const [input, setInput] = useState({name: \"\", email: \"\" , password: \"\"})\r\n\r\n  const handleSubmit = (event) =&gt;{\r\n    event.preventDefault()\r\n    axios.post(\"https:\/\/backendexample.sanbersy.com\/api\/register\", {\r\n      name: input.name, \r\n      email: input.email, \r\n      password: input.password\r\n    }).then(\r\n      (res)=&gt;{\r\n        var user = res.data.user\r\n        var token = res.data.token\r\n        var currentUser = {name: user.name, email: user.email, token }\r\n        setUser(currentUser)\r\n        localStorage.setItem(\"user\", JSON.stringify(currentUser))\r\n      }\r\n    ).catch((err)=&gt;{\r\n      alert(err)\r\n    })\r\n  }\r\n\r\n  const handleChange = (event) =&gt;{\r\n    let value = event.target.value\r\n    let name = event.target.name\r\n    switch (name){\r\n      case \"name\":{\r\n        setInput({...input, name: value})\r\n        break;\r\n      }\r\n      case \"email\":{\r\n        setInput({...input, email: value})\r\n        break;\r\n      }\r\n      case \"password\":{\r\n        setInput({...input, password: value})\r\n        break;\r\n      }\r\n      default:{break;}\r\n    }\r\n  }\r\n\r\n  return(\r\n    &lt;&gt;\r\n      &lt;div style={{margin: \"0 auto\", width: \"25%\", padding: \"50px\"}}&gt;\r\n        &lt;form onSubmit={handleSubmit}&gt;\r\n          &lt;label&gt;name: &lt;\/label&gt;\r\n          &lt;input type=\"text\" name=\"name\" onChange={handleChange} value={input.name}\/&gt;\r\n          &lt;br\/&gt;\r\n          &lt;label&gt;email: &lt;\/label&gt;\r\n          &lt;input type=\"email\" name=\"email\" onChange={handleChange} value={input.email}\/&gt;\r\n          &lt;br\/&gt;\r\n          &lt;label&gt;Password: &lt;\/label&gt;\r\n          &lt;input type=\"password\" name=\"password\" onChange={handleChange} value={input.password}\/&gt;\r\n          &lt;br\/&gt;\r\n          &lt;button&gt;Register&lt;\/button&gt;\r\n        &lt;\/form&gt;\r\n      &lt;\/div&gt;\r\n    &lt;\/&gt;\r\n  )\r\n}\r\n\r\nexport default Register<\/code><\/pre>\r\n<p>lalu kita menggunakan api login pada component login:<\/p>\r\n<pre class=\"wp-block-code\"><code>import React, { useContext, useState } from \"react\"\r\nimport {UserContext} from \".\/UserContext\"\r\nimport axios from \"axios\"\r\n\r\nconst Login = () =&gt;{\r\n  const [, setUser] = useContext(UserContext)\r\n  const [input, setInput] = useState({email: \"\" , password: \"\"})\r\n\r\n  const handleSubmit = (event) =&gt;{\r\n    event.preventDefault()\r\n    axios.post(\"https:\/\/backendexample.sanbersy.com\/api\/user-login\", {\r\n      email: input.email, \r\n      password: input.password\r\n    }).then(\r\n      (res)=&gt;{\r\n        var user = res.data.user\r\n        var token = res.data.token\r\n        var currentUser = {name: user.name, email: user.email, token }\r\n        setUser(currentUser)\r\n        localStorage.setItem(\"user\", JSON.stringify(currentUser))\r\n      }\r\n    ).catch((err)=&gt;{\r\n      alert(err)\r\n    })\r\n  }\r\n\r\n  const handleChange = (event) =&gt;{\r\n    let value = event.target.value\r\n    let name = event.target.name\r\n    switch (name){\r\n      case \"email\":{\r\n        setInput({...input, email: value})\r\n        break;\r\n      }\r\n      case \"password\":{\r\n        setInput({...input, password: value})\r\n        break;\r\n      }\r\n      default:{break;}\r\n    }\r\n  }\r\n\r\n  return(\r\n    &lt;&gt;\r\n      &lt;div style={{margin: \"0 auto\", width: \"25%\", padding: \"50px\"}}&gt;\r\n        &lt;form onSubmit={handleSubmit}&gt;\r\n          &lt;label&gt;Email: &lt;\/label&gt;\r\n          &lt;input type=\"email\" name=\"email\" onChange={handleChange} value={input.email}\/&gt;\r\n          &lt;br\/&gt;\r\n          &lt;label&gt;Password: &lt;\/label&gt;\r\n          &lt;input type=\"password\" name=\"password\" onChange={handleChange} value={input.password}\/&gt;\r\n          &lt;br\/&gt;\r\n          &lt;button&gt;Login&lt;\/button&gt;\r\n        &lt;\/form&gt;\r\n      &lt;\/div&gt;\r\n    &lt;\/&gt;\r\n  )\r\n}\r\n\r\nexport default Login<\/code><\/pre>\r\n<p>lalu untuk menggunakan tokennya kita bisa coba pada api data-contestant dan contoh penerapannya seperti di bawah ini:<\/p>\r\n<pre class=\"wp-block-code\"><code>      axios.post(`https:\/\/backendexample.sanbersy.com\/api\/data-contestant`, {name: input.name}, {headers: {\"Authorization\" : \"Bearer \"+ user.token}})\r\n      .then(res =&gt; {\r\n        var data = res.data\r\n        setDataPeserta([...dataPeserta, {id: data.id, name: data.name}])\r\n        setInput({id: null, name: \"\"})\r\n      })<\/code><\/pre>\r\n<p>untuk penerapannya seperti itu dan penggunaan token pada kode axios diatas berguna untuk validasi apakah user sudah login, atau loginnya sudah expired sehingga kita dapat handle kemungkinan tersebut<\/p>\r\n<p><strong>Referensi:<\/strong><\/p>\r\n<p><a href=\"https:\/\/medium.com\/@fahmiprasetiiio\/authentication-dan-authorization-afa2029ff876\">https:\/\/medium.com\/@fahmiprasetiiio\/authentication-dan-authorization-afa2029ff876<\/a><\/p>\r\n<p>&nbsp;<\/p>\r\n<p>&nbsp;<\/p>\r\n<p><\/p>","waktu_publish":"2021-05-25 08:00:00","status_publish":"publish","urutan":2,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:06:12","waktu_publish_formatted":" Selasa, 25 Mei 2021. 08:00:00 WIB."},{"id":793,"uuid":"8ae67c7b-9377-42d5-82c4-e2051e382430","author_user_id":4336,"materi_section_id":217,"judul":"Reactjs \u2013 Deployment","permalink":"reactjs-deployment","konten":"<p>didalam membangun suatu aplikasi atau web app tentunya ada masa dimana kita akan deployment aplikasi kita, biasanya dalam deployment kita membuat dua server staging dan production, staging di gunakan untuk testing sebelum nantinya aplikasi di gunakan di production yang tentunya akan di gunakan user<\/p>\r\n<p>pada materi kali ini kita akan mencoba deployment project kita dalam keperluan staging, sebenarnya banyak opsi untuk membuat aplikasi kita bisa diakses orang lain, kita bisa menggunakan Cloud, VPS, hosting, SaaS (Software as a Service) dll.<\/p>\r\n<p>pada materi ini kita akan melakukan deployment ke netlify sebagai SaaS. sebelum lanjut cara ke deployment, silahkann anda untuk mengakses netlify.com dan login ke akun netlify anda, jika belum punya silahkan register akun terlebih dahulu<\/p>\r\n<p>untuk deployment dengan netlify terdapat dua cara yaitu:<\/p>\r\n<h3 id=\"drag-drop\"><strong>Drag &amp; Drop<\/strong><\/h3>\r\n<p>cara pertama adalah dengan drag folder build dari project reactjs ke sites di netlify. oleh karena itu kita jalankan perintah ini untuk build project reactjs<\/p>\r\n<pre class=\"wp-block-code\"><code>npm run build<\/code><\/pre>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-8800\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-45.png\" sizes=\"(max-width: 622px) 100vw, 622px\" srcset=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-45.png 622w, https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/image-45-300x38.png 300w\" alt=\"\" width=\"622\" height=\"78\" \/><\/figure>\r\n<p>tunggulah proses tersebut hingga selesai<\/p>\r\n<p>lalu drag folder build tersebut ke sites di netlify anda<\/p>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-8795\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/08\/2020-08-11-08-57-07_Trim_Trim.gif\" alt=\"\" width=\"690\" height=\"388\" \/><\/figure>\r\n<h3 id=\"netlify-cli\">Netlify CLI<\/h3>\r\n<p>cara kedua adalah menggunakan netlify cli sama seperti sebelumnya build reactjs terlebih dahulu<\/p>\r\n<pre class=\"wp-block-code\"><code>npm run build<\/code><\/pre>\r\n<p>lalu install netlify cli dengan perintah di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>npm install netlify-cli -g<\/code><\/pre>\r\n<p>setelah itu jalankan perintah deploy seperti di bawah ini<\/p>\r\n<pre class=\"wp-block-code\"><code>netlify deploy<br \/><\/code><\/pre>\r\n<p>&nbsp;<\/p>\r\n<h3><strong>Not Found Issue<br \/><\/strong><\/h3>\r\n<p>setelah berhasil deploy biasanya terdapat masalah <em><strong>not found<\/strong><\/em> dimana misal ada route <code>\/movie<\/code>, ketika di akses route otomatis akan ada tampilan seperti di bawah ini:<\/p>\r\n<p><strong><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/03\/netlify-page-not-found-error-react-router-after-deploy.png\" \/><\/strong><\/p>\r\n<p><strong><img src=\"\/storage\/photos\/ReactJS\/netlify-page-not-found-error-react-router-after-deploy.png\" alt=\"\" width=\"2000\" \/><\/strong>cara mengatasinya adalah pertama adalah buatlah sebuah file bernama <em><strong>_redirects<\/strong><\/em> di dalam folder public<\/p>\r\n<p>di dalam file tersebut masukkan kode&nbsp;<code>\/* \/index.html 200<\/code><\/p>\r\n<p><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2021\/03\/netlify-error-fix-1024x226.png\" \/><\/p>\r\n<p>setelah itu lakukan build dan deploy seperti sebelumnya<\/p>\r\n<p><strong>Referensi<\/strong>:<\/p>\r\n<ul>\r\n<li><a href=\"https:\/\/www.freecodecamp.org\/news\/how-to-deploy-a-react-application-to-netlify-363b8a98a985\/\">https:\/\/www.freecodecamp.org\/news\/how-to-deploy-a-react-application-to-netlify-363b8a98a985\/<\/a><\/li>\r\n<li><a href=\"https:\/\/www.netlify.com\/blog\/2016\/07\/22\/deploy-react-apps-in-less-than-30-seconds\/\">https:\/\/www.netlify.com\/blog\/2016\/07\/22\/deploy-react-apps-in-less-than-30-seconds\/<\/a><\/li>\r\n<li><a href=\"https:\/\/dev.to\/rajeshroyal\/page-not-found-error-on-netlify-reactjs-react-router-solved-43oa\">https:\/\/dev.to\/rajeshroyal\/page-not-found-error-on-netlify-reactjs-react-router-solved-43oa<\/a><\/li>\r\n<\/ul>\r\n<p>&nbsp;<\/p>\r\n<p><\/p>","waktu_publish":"2021-05-25 08:00:00","status_publish":"publish","urutan":3,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 10:05:53","waktu_publish_formatted":" Selasa, 25 Mei 2021. 08:00:00 WIB."}]},{"id":218,"uuid":"10cb9ad8-c436-416c-a1d1-7bcf3895a141","materi_id":25,"nama":"Pekan 4 - Final Project","permalink":"pekan-4-final-project","urutan":9,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":null,"posting":[{"id":795,"uuid":"91b48428-0899-4948-9b2e-97ab82bf759d","author_user_id":4336,"materi_section_id":218,"judul":"Final Project","permalink":"final-project","konten":"<div class=\"entry-content\">\r\n<h2 id=\"membangun-web-frontend-reactjs\"><strong>Membangun Web Frontend Reactjs<\/strong><\/h2>\r\n<p>pada final project web frontend Reactjs ini anda diminta untuk membuat web app dengan syarat berikut ini:<\/p>\r\n<ol id=\"block-29077dde-335b-4231-a355-3cc74fad48b9\">\r\n<li><strong>wajib di deploy melalui netlify agar nantinya bisa digunakan<\/strong><\/li>\r\n<li><strong>wajib ada function component, class component, state, hooks, context, react-router dom dan axios<\/strong><\/li>\r\n<li><strong>Web App wajib menggunakan Ant Design atau yang sejenisnya (Core UI, Material UI, dsb.)<\/strong><\/li>\r\n<\/ol>\r\n<p>berikut ini soal dari final project:<\/p>\r\n<p class=\"has-normal-font-size\"><strong>1. Setup (5 poin)<\/strong><\/p>\r\n<p>buatlah sebuah folder baru pada repository tugas harian dengan nama &ldquo;Final-Project&rdquo; sejajar dengan &ldquo;Tugas-Harian-Part-1&rdquo; dan &ldquo;Tugas-Harian-Part-2&rdquo; yang berisi project reactjs final project<\/p>\r\n<p><strong>2. Layout (10 poin)<\/strong><\/p>\r\n<p>buatlah layout pada final project yang terdapat header, sidebar, footer dan section component, untuk sidebar bisa dimunculkan ketika user sudah login saja<\/p>\r\n<p><strong>3. Halaman yang bisa di akses tanpa login (10 poin)<\/strong><\/p>\r\n<p>buatlaha halaman depan (yang bisa di akses tanpa login) yang terdapat halaman list movie dan list games (bisa di buat terpisah) dan ketika di klik (misal ada read more atau view more) bisa menuju halaman detail (detail movie dengan parameter id misal urlnya showMovie\/ID)<\/p>\r\n<p><strong>4. Authentication (15 poin)<\/strong><\/p>\r\n<p>buatlah fitur login, register dan logout, dan ganti password. lalu ketika refresh halaman pastikan tidak boleh terlogout<\/p>\r\n<p><strong>5 Movie List Table(10 poin)<\/strong><\/p>\r\n<p>buatlah halaman movie list table yang berisi<\/p>\r\n<ul>\r\n<li>tabel movie yang ada button edit (yang nantinya akan menuju form edit misal movie\/edit\/ID) dan delete nya<\/li>\r\n<li>filter berdasarkan minimal dari 3 field table<\/li>\r\n<li>search berdasarkan nama tabel movie<\/li>\r\n<li>membuat sort tiap field-field dalam tabel<\/li>\r\n<\/ul>\r\n<p><strong>6. Form Create dan Edit Movie (20 Poin)<\/strong><\/p>\r\n<p>buatlah form&nbsp;<strong>terpisah&nbsp;<\/strong>dari table movie yang bisa mengakomodir fitur create dan edit movie dengan route yang berbeda (misal url edit movie\/edit\/ID, untuk create urlnya movie\/create) dan wajib menggunakan token<\/p>\r\n<p><strong>7. Game List Table(10 poin)<\/strong><\/p>\r\n<p>buatlah halaman movie list table yang berisi<\/p>\r\n<ul>\r\n<li>tabel game yang ada button edit (yang nantinya akan menuju form edit misal game\/edit\/ID) dan delete nya<\/li>\r\n<li>filter berdasarkan minimal dari 3 field table<\/li>\r\n<li>search berdasarkan nama tabel game<\/li>\r\n<li>membuat sort tiap field-field dalam tabel<\/li>\r\n<\/ul>\r\n<p><strong>6. Form Create dan Edit Game(20 Poin)<\/strong><\/p>\r\n<p>buatlah form&nbsp;<strong>terpisah&nbsp;<\/strong>dari table game yang bisa mengakomodir fitur create dan edit movie dengan route yang berbeda (misal url edit game\/edit\/ID, untuk create urlnya game\/create) dan wajib menggunakan token<\/p>\r\n<p>jika ingin menambahkan fitur lain di persilahkan<\/p>\r\n<p>berikut ini API yang bisa di gunakan untuk final project:<\/p>\r\n<pre class=\"wp-block-code\"><code>===GAMES===\r\n\r\nGET https:\/\/backendexample.sanbersy.com\/api\/data-game\r\n\r\nGET https:\/\/backendexample.sanbersy.com\/api\/data-game\/{ID_GAMES}\r\n\r\nPOST https:\/\/backendexample.sanbersy.com\/api\/data-game\r\n\r\nPUT https:\/\/backendexample.sanbersy.com\/api\/data-game\/{ID_GAMES}\r\n\r\nDELETE https:\/\/backendexample.sanbersy.com\/api\/data-game\/{ID_GAMES}\r\n\r\n==detail data game==\r\n\r\ngenre: string\r\nimage_url: string\r\nsinglePlayer: boolean (true or false) \/ (1 or 0)\r\nmultiplayer: boolean (true or false) \/ (1 or 0)\r\nname: string\r\nplatform: string\r\nrelease: string\r\n\r\n===MOVIES===\r\n\r\nGET https:\/\/backendexample.sanbersy.com\/api\/data-movie\r\n\r\nGET https:\/\/backendexample.sanbersy.com\/api\/data-movie\/{ID_MOVIES}\r\n\r\nPOST https:\/\/backendexample.sanbersy.com\/api\/data-movie\r\n\r\nPUT https:\/\/backendexample.sanbersy.com\/api\/data-movie\/{ID_MOVIES}\r\n\r\nDELETE https:\/\/backendexample.sanbersy.com\/api\/data-movie\/{ID_MOVIES}\r\n\r\n==detail data movie==\r\n\r\ndescription: string\r\nduration: integer\r\ngenre: string\r\nimage_url: string\r\nrating: integer\r\nreview: string\r\ntitle: string\r\nyear: integer\r\n\r\n===USER===\r\nPOST https:\/\/backendexample.sanbersy.com\/api\/register\r\n(parameter untuk register name, email dan password)\r\n\r\nPOST https:\/\/backendexample.sanbersy.com\/api\/user-login\r\n(parameter untuk login email dan password)\r\n\r\nPOST https:\/\/backendexample.sanbersy.com\/api\/change-password\r\n(parameter untuk change password current_password, new_password dan new_confirm_password)<\/code><\/pre>\r\n<h2 id=\"pengumpulan\"><strong>Video Penjelasan Final Project<\/strong><\/h2>\r\n<p>untuk penjelasan final project dalam bentuk video dapat di akses melalui: <a href=\"https:\/\/youtu.be\/_rt1Syj2wlA\">https:\/\/youtu.be\/rt1Syj2wlA<\/a><\/p>\r\n<h2 id=\"pengumpulan\"><strong>Pengumpulan<\/strong><\/h2>\r\n<p>untuk pengumpulan silahkan memasukkan data-data diri, url netlify dan link comit terakhir git pada form di bawah ini<\/p>\r\n<p><a href=\"https:\/\/forms.gle\/xA7qxF862K3ZEVeCA\">https:\/\/forms.gle\/xA7qxF862K3ZEVeCA<\/a><\/p>\r\n<p>untuk batas pengumpulan final project maksimal di kumpulkan pada hari&nbsp;<strong>Minggu 18 April Pukul 13.00<\/strong><\/p>\r\n<\/div>\r\n<p>&nbsp;<\/p>\r\n<p>&nbsp;<\/p>\r\n<p><\/p>","waktu_publish":"2021-05-25 08:00:00","status_publish":"publish","urutan":1,"created_by":4336,"updated_by":4336,"created_at":"2021-03-18 15:29:10","updated_at":"2021-04-23 09:53:05","waktu_publish_formatted":" Selasa, 25 Mei 2021. 08:00:00 WIB."}]}],"list_kelas":null,"is_done":0}