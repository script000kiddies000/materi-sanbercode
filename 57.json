{"response_code":"00","response_msg":"Berhasil mendapatkan materi kelas","materi_kelas":{"id":14,"uuid":"976b8da4-362f-4711-8a87-c84810dd3fd2","kategori_kelas_id":13,"versi":"1.0.0","created_by":9664,"updated_by":9664,"created_at":"2020-12-06 20:10:17","updated_at":null},"section":[{"id":73,"uuid":"6c9b616a-429d-42d8-a0e8-eb54c7c863bd","materi_id":14,"nama":"Pekan 1 - Materi","permalink":"pekan-1-materi","urutan":1,"created_by":9664,"updated_by":9664,"created_at":"2020-12-06 20:25:54","updated_at":null,"posting":[{"id":229,"uuid":"c5ab3756-6dd9-4b2c-b37d-0ebf14667faf","author_user_id":9664,"materi_section_id":73,"judul":"Hari 1  | Pendalaman OOP PHP","permalink":"hari-1-pendalaman-oop-php","konten":"<p><!-- wp:paragraph --><\/p>\r\n<p>Secara singkat, Laravel adalah framework PHP open-source gratis. Di dalam Laravel ini terdapat konsep MVC (Model View Controller). Dan untuk sebagian orang, Laravel ini dianggap memiliki banyak \"magic\", sehingga sulit untuk dipahami. Untuk mempermudah pemebelajaran kedepan, maka diperlukan pemahaman yang mendalam mengenai kosep OOP (<strong>Object-Oriented<\/strong>&nbsp;<strong>Programming<\/strong> ) di dalam bahasa PHP.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Beberapa tutorial yang dapat kita ikuti bersama untuk mempelajari OOP PHP:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li>Playlist WPU OOP Dasar pada PHP : <a href=\"https:\/\/www.youtube.com\/watch?v=ZKDUFoouyBI&amp;list=PLFIM0718LjIWvxxll-6wLXrC_16h_Bl_p\">link video<\/a><\/li>\r\n<li>Playlist Sekolah Koding OOP pada PHP : <a href=\"https:\/\/www.youtube.com\/watch?v=PfwkhK0Ev5k&amp;list=PLCZlgfAG0GXAPy7l4Wgwhz11GbuR-h2M6\">link video<\/a><\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:paragraph --><\/p>\r\n<p>Setelah mengikuti seri tutorial di atas, terdapat konsep yang penting juga untuk dipelajari , yakni \"Trait\". Untuk memhami konsep Trait pada PHP, mari kita ikuti bersama materi dari khaerodin.id ini : <a href=\"https:\/\/khoerodin.id\/object-oriented-php\/trait-dalam-oop-php\/\">link artikel<\/a><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Semangat ^_^<\/p>\r\n<p><!-- \/wp:paragraph --><\/p>","waktu_publish":"2021-02-15 08:00:00","status_publish":"publish","urutan":1,"created_by":9664,"updated_by":9664,"created_at":"2020-12-06 20:27:03","updated_at":"2021-02-15 07:51:53","waktu_publish_formatted":" Senin, 15 Februari 2021. 08:00:00 WIB."},{"id":231,"uuid":"fb4acc38-150a-42d6-be85-ee63aee8c646","author_user_id":9664,"materi_section_id":73,"judul":"Hari 2 | Pengenelan UUID","permalink":"hari-2-pengenelan-uuid","konten":"<p><!-- wp:paragraph --><\/p>\r\n<p>Bismillaah..<br \/><br \/>Dalam membuat table di aplikasi Laravel, biasanya kita menggunakan id&nbsp;<em>auto increment<\/em>&nbsp;<em>integer<\/em>&nbsp;untuk sebuah&nbsp;<em>primary key<\/em>. Dalam aplikasi yang skalanya relatif kecil, mungkin hal ini sah sah saja. Namun untuk aplikasi yang relatif besar, sudah banyak pengunanya, maka penggunaan id&nbsp;<em>auto increment<\/em>&nbsp;<em>integer<\/em>&nbsp;untuk sebuah&nbsp;<em>primary key<\/em> sudah semestinya tidak digunakan lagi.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Mengapa demikian ? <\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Terdapat beberapa masalah yang mungkin akan dihadapi jika tetap menggunakan id&nbsp;<em>auto increment<\/em>&nbsp;<em>integer<\/em> , diantaranya :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><strong>1. Aplikasi mudah ditebak dan dimanipulasi datanya<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Biasanya kita menggunakan route seperti ini <a href=\"http:\/\/test-xyx.com\/user\/1\/edit\">http:\/\/test-xyx.com\/user\/1\/edit<\/a> untuk mengubah data di table users kita. Angka 1 adalah parameter dinamis yang biasanya merupakan id&nbsp;<em>auto increment<\/em>&nbsp;<em>integer<\/em> di table users. <br \/><br \/>Untuk pengguna yang iseng, biasanya mereka akan coba coba mengganti angka 1 dengan angka yang lainnya, 2,3,4, dst . Untuk aplikasi Laravel yang belum menerapkan middleware untuk meprotect route-route nya, tentu percobaan tersebut akan membuat si pengguna tadi dapat mengubah data user yang lain.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><strong>2. Konflik dan Masalah Skalabilitas <\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Jika kita sudah memiliki aplikasi yang sangat besar (Aplikasi A), katakan saja di dalam table users kita sudah ada 100.000 data. Dan kemudian aplikasi kita akan diintegrasikan dengan aplikasi yang lain (Aplikasi B), dan table users masuk ke dalam table yang harus digabungkan antara aplikasi A dan B. Data-data aplikasi A sudah menggunakan&nbsp;Primary Key&nbsp;Id auto-increment. Aplikasi B juga menggunakan &nbsp; Primary Key&nbsp;Id auto-increment juga. Sampai saat ini tentu tidak ada masalah, karena 2 aplikasi tersebut berjalan sendiri-sendiri. Pertanyaannya, lalu bagaimana menggabungkannya? Apakah sekadar copy&nbsp;dan&nbsp;paste&nbsp;bisa? Jawabannya tentu tidak bisa, karena pasti akan ada data bentrok\/konflik di keduanya, disebabkan&nbsp;<em>Primary Key<\/em>&nbsp;Id&nbsp;banyak yang sama. Padahal sebuah&nbsp;<em>Primary Key<\/em>&nbsp;harus&nbsp;unique. Ini kasus yang pertama.<br \/><br \/>Kasus yang lain adalah, ketika dalam satu detik aplikasi kita digunakan oleh banyak orang, katakanlah request per detik nya 10.000 request insert data, maka jika kita mengunnakan Id auto-increment akan banyak sekali data yang gagal masuk ke database kita atau fungsi auto-increment kita tidak berfungsi dengan baik<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Maka solusinya adalah UUID (Universally Unique Identifier)<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Salah satu solusi dari permasalahan itu semua&nbsp;<strong>UUID<\/strong>. Secara singkat UUID adalah sebuah string yang teridiri dari 32 karakter. Dibuat secara acak dan kecil kemungkinan menghasilkan nilai yang sama. Dan jika kita generate 1000 data untuk UUID ini, makan akan kecil kemungkinan ada UUID yang sama. Sehingga lebih cocok untuk digunakan sebagai&nbsp;<em>Primary Key<\/em>.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Untuk implementasi di project Laravel kita, mari kita ikuti tutorial dari kawan koding <a href=\"https:\/\/www.kawankoding.id\/menggunakan-uuid-di-laravel\/\">berikut <\/a>.<\/p>\r\n<p><!-- \/wp:paragraph --><\/p>","waktu_publish":"2021-02-16 08:00:00","status_publish":"publish","urutan":2,"created_by":9664,"updated_by":9664,"created_at":"2020-12-06 20:33:30","updated_at":"2021-02-16 08:17:58","waktu_publish_formatted":" Selasa, 16 Februari 2021. 08:00:00 WIB."},{"id":233,"uuid":"9bc382c8-aa0e-4e1d-a3ca-113525bd47c3","author_user_id":9664,"materi_section_id":73,"judul":"Hari 3 | Laravel Middleware","permalink":"hari-3-laravel-middleware","konten":"<p><!-- wp:paragraph --><\/p>\r\n<p>Dalam dunia IT, Middleware dikenal sebagai suatu sistem yang berperan sebagai penengah antara satu aplikasi dengan aplikasi yang lain agar mudah diintegrasikan. Pada konteks project Laravel, middleware digunakan untuk memfilter Request yang masuk di aplikasi kita. Biasanya digunakan untuk memproteksi route-route yang ada agar route tersebut benar benar diakses oleh user sesuai dengan privilege-nya. Atau bisa juga digunakan untuk \"logging\", atau mencatat semua aktivitas di dalam web kita.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Pada materi kali ini kita akan membahas bagaimana cara membuat middleware, mendaftarkan middleware, dan mengelopokkan middleware.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Untuk memahami konsep Middleware ini, mari kita simak video berikut : <a href=\"https:\/\/www.youtube.com\/watch?v=-GdKhiv9x1E&amp;list=PL8YCzrSDCR7gt8KPrx7pce8gesEy3onbx\">link video<\/a><\/p>\r\n<p><!-- \/wp:paragraph --><\/p>","waktu_publish":"2021-02-17 08:00:00","status_publish":"publish","urutan":3,"created_by":9664,"updated_by":9664,"created_at":"2020-12-06 20:37:48","updated_at":"2021-02-17 08:47:59","waktu_publish_formatted":" Rabu, 17 Februari 2021. 08:00:00 WIB."},{"id":234,"uuid":"a4f0f9f4-57f8-4ccb-81f8-a461ab83e3fd","author_user_id":9664,"materi_section_id":73,"judul":"Hari 4 | Pengenalan REST API","permalink":"hari-4-pengenalan-rest-api","konten":"<p><!-- wp:paragraph --><\/p>\r\n<p>Sebelum kita belajar bagaimana kita membuat REST Server dengan menggunakan Laravel. Langkah baiknya kita terlebih mengetahui apa itu API, REST API, RESTful API<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":4} --><\/p>\r\n<h4>API (Application Programming Interface)<\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Berdasarkan wikipedia, API adalah penerjemah&nbsp;komunikasi antara klien dengan server untuk menyederhanakan implementasi dan perbaikan&nbsp;<em>software<\/em>. Atau secera sederhana API adalah teknologi yang memungkinkan 2 aplikasi atau lebih dapat berkomunikasi , tanpa melihat bentuk aplikasi tersebut, atau dengan bahasa apa aplikasi tersebut dibuat.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":4} --><\/p>\r\n<h4>REST (Representional State Transfer)<\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>REST adalah suatu arsitektur metode komunikasi untuk pertukaran data yang umumnya menggunakan protokol HTTP. REST menjadikan objek\/data pada server sebagai sumber data yang dapat ditambah, diubah atau dihapus. Dan umumnya REST dapat digunakan di berbagai bahasa pemrograman.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Berdasarkan pada definisi keduanya, maka RESTful API merupakan bentuk komunikasi antar program (API) dengan menggunakan arsitektur REST, yang diantaranya menggunakan protokol HTTP. Beberapa metode HTTP yang umum digunakan, antara lain:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li>GET, kegiatan menerima data.<br \/>contoh: <code>GET https:\/\/situsweb\/api\/users\/detail\/1<\/code> =&gt; mengambil data detail user dengan id = 1.<\/li>\r\n<li>POST, kegiatan pengiriman\/input data untuk diproses selanjutnya.<br \/>contoh: <code>POST https:\/\/situsweb\/api\/users<\/code> =&gt; mengirim data user.<\/li>\r\n<li>PUT, kegiatan mengubah data.<br \/>contoh <code>PUT https:\/\/situsweb\/api\/users\/update\/1<\/code> =&gt; melakukan update pada data user dengan id = 1.<\/li>\r\n<li>DELETE, kegiatan menghapus data.<br \/>contoh: <code>DELETE https:\/\/situsweb\/api\/users\/delete\/1<\/code> =&gt; menghapus data user dengan id = 1.<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:paragraph --><\/p>\r\n<p>Pada kesempatan kali ini kita akan mencoba membuat Web API, atau API yang dibangun di atas teknologi web. Web API biasa juga disebut Web Service, REST SERVER.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Sebelum membuat WEB API, marilah kita mengenal tools yang akan membantu kita mebuat WEB API, yaitu POSTMAN<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":4} --><\/p>\r\n<h4>POSTMAN<\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Postman merupakan salah satu aplikasi terpopuler dalam menangani API. Untuk menggunakannya Anda bisa terlebih dahulu mendownload nya di link berikut: <a href=\"https:\/\/www.postman.com\/downloads\/\">https:\/\/www.postman.com\/downloads\/<\/a>. Setelah mendownload aplikasi Postman tersebut, lakukan instalasi dan kemudian lakukan Sign Up (bisa dilakukan melalui aplikasi atau melalui web berikut: <a href=\"https:\/\/identity.getpostman.com\/signup\">https:\/\/identity.getpostman.com\/signup<\/a>).<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Setelah Sign Up dan berhasil masuk ke dalam aplikasi Postman, berikut tampilan yang akan Anda temukan:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:image --><\/p>\r\n<figure class=\"wp-block-image\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/Postman1-1024x549.png\" alt=\"Gambar ini memiliki atribut alt yang kosong; nama filenya adalah Postman1-1024x549.png\" \/><\/figure>\r\n<p><!-- \/wp:image --> <!-- wp:paragraph --><\/p>\r\n<p>Collection<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Disarankan untuk mengelompokkan API yang akan digunakan pada satu Collection, dengan cara memilih menu \"Collection\" pada sidebar dan klik \"+ New Collection\" kemudian memasukkan nama Collection tersebut, bisa menggunakan nama Project maupun nama web \/ sumber API nya.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:image --><\/p>\r\n<figure class=\"wp-block-image\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/Postman4-618x1024.png\" alt=\"Gambar ini memiliki atribut alt yang kosong; nama filenya adalah Postman4-618x1024.png\" \/><\/figure>\r\n<p><!-- \/wp:image --> <!-- wp:paragraph --><\/p>\r\n<p>REQUEST<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Selanjutnya Anda bisa menambahkan request API dengan menekan tombol \"+\" pada menu yang tersedia (1) . Selanjutnya Anda bisa memasukkan URL yang dituju pada bagian yang telah disediakan (2). Pada Postman telah disediakan berbagai method yang dapat Anda temukan pada sebelah kiri dari kolom input URL, mulai dari GET, POST, PUT, DELETE dan lainnya.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:image --><\/p>\r\n<figure class=\"wp-block-image\"><img src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/07\/Postman2-1024x549.png\" alt=\"Gambar ini memiliki atribut alt yang kosong; nama filenya adalah Postman2-1024x549.png\" \/><\/figure>\r\n<p><!-- \/wp:image --> <!-- wp:paragraph --><\/p>\r\n<p>Dibawah kolom input URL, Anda akan menemukan menu\/tab \"Params\", \"Authentication\", \"Header\", \"Body\", dan lainnya.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li>Menu \"Params\" yang dapat digunakan untuk menambah query yang akan membuat URL yang digunakan bertambah panjang (biasanya diawali dengan \"?\").<\/li>\r\n<li>Pada menu \"Authentication\", Anda akan menemukan metode Auth yang terkadang diperlukan untuk dapat mengakses suatu API (umumnya menggunakan API Key, Bearer Token, atau OAuth tergantung sumber\/penyedia API).<\/li>\r\n<li>Pada menu \"Header\", Anda juga dapat mengatur Authentication dengan menggunakan key \"Authentication\" dan value dari Authentication yang diperlukan (misal bearer {token}). Pada bagian ini biasanya dimasukkan informasi tambahan yang digunakan oleh back-end\/server untuk mengatur bagaimana cara response akan diberikan.<\/li>\r\n<li>Menu \"Body\", yang biasa diperlukan ketika menggunakan method \"POST\" atau mengirim suatu form kepada back-end\/server.<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:paragraph --><\/p>\r\n<p>Setelah membaca materi hari ini, silakan lanjutkan membaca materi hari ke-5 tentang otentikasi menggunakan JWT di Laravel.<\/p>\r\n<p><!-- \/wp:paragraph --><\/p>","waktu_publish":"2021-02-18 08:00:00","status_publish":"publish","urutan":4,"created_by":9664,"updated_by":9664,"created_at":"2020-12-06 20:38:49","updated_at":"2021-02-18 07:21:19","waktu_publish_formatted":" Kamis, 18 Februari 2021. 08:00:00 WIB."},{"id":235,"uuid":"91d06e67-01d6-415a-8c4e-1884313f5e77","author_user_id":9664,"materi_section_id":73,"judul":"Hari 5 | Membuat REST API dan Authentication menggunakan JWT","permalink":"hari-5-membuat-rest-api-dan-authentication-menggunakan-jwt","konten":"<p><!-- wp:paragraph --><\/p>\r\n<p>Pada umumnya untuk melakukan proses autentikasi pada sebuah Web itu menggunakan session. Jadi data user yang sudah login akan disimpan di dalam session. Aplikasi kita akan memeriksa, sessionnya ada atau tidak, jika tidak ada maka apilkasi akan meredirect ke halaman logout, dan jika ada session maka kita bisa mendapatkan data user yang sedang login.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Pada pembuatan API biasanya untuk proses autentikasi tidak menggunakan session, melainkan menggunakan token berbentuk string panjang yang sangat random. Jadi ketika user berhasil melakukan login , maka server akan memberikan token. Nanti token tersebut harus disimpan di local storage atau cookies browser. Dan apabila kita mau mengakses halaman lain yang mengharuskan kita melakukan otentikasi, maka kita harus menyertakan token ini di dalam request.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Mari kita mulai membuat WEB API dengan menggunakan Laravel melalui video yang dibuat oleh channel Parsinta berikut : <a href=\"https:\/\/www.youtube.com\/watch?v=S6ZUuV-wZtY&amp;list=PLRKMmwY3-5MwqwBGSe4g9qzD7UsOOvbvC&amp;index=1\">link video<\/a><\/p>\r\n<p><!-- \/wp:paragraph --><\/p>","waktu_publish":"2021-02-18 08:00:00","status_publish":"publish","urutan":5,"created_by":9664,"updated_by":9664,"created_at":"2020-12-06 20:39:33","updated_at":"2021-02-18 07:20:10","waktu_publish_formatted":" Kamis, 18 Februari 2021. 08:00:00 WIB."}]},{"id":74,"uuid":"36ac4f36-a860-40b9-8019-ddeb5fba2298","materi_id":14,"nama":"Pekan 1 - Tugas","permalink":"pekan-1-tugas","urutan":2,"created_by":9664,"updated_by":9664,"created_at":"2020-12-06 20:29:29","updated_at":null,"posting":[{"id":230,"uuid":"ce574daf-66eb-4b3e-adf2-dbc0d7b14089","author_user_id":9664,"materi_section_id":74,"judul":"Hari 1 | Tugas Pendalaman OOP PHP","permalink":"hari-1-tugas-pendalaman-oop-php","konten":"<p><!-- wp:paragraph --><\/p>\r\n<p>Pada tugas atau latihan kali ini, kita akan membuat game sederhana dengan menggunakan konsep OOP pada PHP.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Pada game ini terdapat elang dan harimau. Mereka bisa saling serang. Dimana ketika elang menyerang, maka darah dari harimau akan berkurang. Begitupun sebaliknya.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Buatlah 2 class utama (Hewan dan Fight), namun kedua kelas tersebut tidak bisa diinstansiasi.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Kemudian buatlah kelas Elang dan Harimau, dimana kelas tersebut dapat menggunakan seluruh property dan method yang ada di kelas Hewan dan Fight. Dan kelas Elang dan Harimau ini dapat diinstansiai.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Adapun property yang ada di kelas Hewan adalah nama, darah dengan nilai default 50, jumlahKaki, dan keahlian.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Sedangkan property yang ada di kelas Fight adalah attackPower, defencePower.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Ketika Elang diinstansiasi, maka jumlahKaki bernilai 2, dan keahlian bernilai \"terbang tinggi\", attackPower = 10 , deffencePower = 5 ;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Ketika Harimau diintansiasi, maka jumlahKaki bernilai 4, dan keahlian bernilai \"lari cepat\" , attackPower = 7 , deffencePower = 8 ;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Method yang ada di dalam kelas Hewan :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list {\"ordered\":true} --><\/p>\r\n<ol>\r\n<li><strong>atraksi()<\/strong>, di dalam method ini akan menampilkan string nama dan keahlian. Contoh \"harimau_1 sedang lari cepat\" atau \"elang_3 sedang terbang tinggi\".<\/li>\r\n<\/ol>\r\n<p><!-- \/wp:list --> <!-- wp:paragraph --><\/p>\r\n<p>Method yang ada di dalam kelas Fight<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list {\"ordered\":true} --><\/p>\r\n<ol>\r\n<li><strong>serang()<\/strong> , di dalam method ini akan menampilkan string sebagai contoh berikut. Contoh : \"harimau_1 sedang menyerang elang_3\" atau \"elang_3 sedang menyerang harimau_2\".<\/li>\r\n<li><strong>diserang(),<\/strong> di dalam method ini akan menampilkan string sebagai contoh berikut. Contoh : \"harimau_1 sedang diserang\" atau \"elang_3 sedang diserang\", kemudian hewan yang diserang akan berkurang darahnya dengan rumus :<\/li>\r\n<\/ol>\r\n<p><!-- \/wp:list --> <!-- wp:paragraph {\"align\":\"center\"} --><\/p>\r\n<p class=\"has-text-align-center\">\"darah sekarang - attackPower penyerang \/ defencePower yang diserang\"<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Method yang ada di dalam kelas Elang dan Harimau :<\/p>\r\n<p><strong>&nbsp; &nbsp; &nbsp;getInfoHewan()<\/strong>, didalam method ini semua property yang ada di dalam kelas Hewan dan Fight ditampilkan , dan jenis hewan (Elang atau Harimau).<\/p>\r\n<p><!-- \/wp:list --><\/p>","waktu_publish":"2021-02-15 08:00:00","status_publish":"publish","urutan":1,"created_by":9664,"updated_by":9664,"created_at":"2020-12-06 20:31:02","updated_at":"2021-02-15 07:52:33","waktu_publish_formatted":" Senin, 15 Februari 2021. 08:00:00 WIB."},{"id":232,"uuid":"c904c898-cb64-4e80-b2bf-f9ff1a22045c","author_user_id":9664,"materi_section_id":74,"judul":"Hari 2 | Tugas Pengenalan UUID","permalink":"hari-2-tugas-pengenalan-uuid","konten":"<p><!-- wp:paragraph --><\/p>\r\n<p>Sedikit demi sedikit kita akan membangun aplikasi CrowdFunding kita.<br \/>Pertama-tama , kita akan membuat bebrapa table, diantaranya : table users, roles, dan otp_codes<br \/>dengan ketentuan :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list {\"ordered\":true} --><\/p>\r\n<ol>\r\n<li>Buatlah proejct Laravel (versi 6 disarankan, 7 atau 8 diperbolehkan)<\/li>\r\n<li>gunakan uuid untuk primary key (kedepannya akan menjadi standard primary key kita)<\/li>\r\n<li>gunakan fitur migration yang ada di Laravel untuk membuat table<\/li>\r\n<li>1 user hanya bisa memiliki 1 role, dan 1 role boleh dimiliki oleh beberapa user<\/li>\r\n<li>1 otp code hanya dimiliki oleh 1 user, dan 1 user hanya memiliki 1 otp code<\/li>\r\n<li>Otp code memiliki waktu kadaluarsa<\/li>\r\n<li>Buatlah ERD dan convert menjadi image dan simpan di dalam folder public dengan nama erd.png atau erd.jpg<\/li>\r\n<li>kirimkan link commit terakhir di form tugas<\/li>\r\n<\/ol>\r\n<p><!-- \/wp:list --><\/p>","waktu_publish":"2021-02-16 10:00:00","status_publish":"publish","urutan":2,"created_by":9664,"updated_by":9664,"created_at":"2020-12-06 20:34:54","updated_at":"2021-02-16 08:17:50","waktu_publish_formatted":" Selasa, 16 Februari 2021. 10:00:00 WIB."},{"id":236,"uuid":"a68c4571-019b-438f-b07e-2b7c7f85e54b","author_user_id":9664,"materi_section_id":74,"judul":"Hari 3 | Tugas Laravel Middleware","permalink":"hari-3-tugas-laravel-middleware","konten":"<p><!-- wp:paragraph --><\/p>\r\n<p>Setelah kemarin teman teman membuat table users, otp_codes, dan roles, tugas kali ini adalah membuat 2 middleware (dilarang menggunakan middleware bawaan Laravel):<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list {\"ordered\":true} --><\/p>\r\n<ol>\r\n<li>Middleware yang bertugas untuk menjaga route dari user yang belum melakukan verifikasi email.<\/li>\r\n<li>Middleware yang bertugas untuk menjaga route dari user yang role nya bukan admin.<\/li>\r\n<\/ol>\r\n<p><!-- \/wp:list --> <!-- wp:paragraph --><\/p>\r\n<p>Ciri user yang belum melakukan verifikasi email adalah kolom email_verified_at di table users bernilai null. Silakan tambahkkan kolom email_verified_at jika belum ada kolom tersebut.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Kemudian dalam aplikasi kita nantinya akan ada 2 role saja yakni user dan admin. Dan secara default user yang register memiliki role sebagai user. Dan buatlah seeder untuk menambahkan data role (user dan admin) di table roles. <br \/><br \/>Buatlah '\/route-1' yang diproteksi menggunakan middleware verifikasi email (poin 1). Dan 'route-2' yang diproteksi menggunakan middleware verifikasi email (poin 1) dan middleware admin (poin 2). Dan gunakan data dummy untuk mencoba tugas ini.<\/p>\r\n<p><!-- \/wp:paragraph --><\/p>","waktu_publish":"2021-02-17 10:00:00","status_publish":"publish","urutan":3,"created_by":9664,"updated_by":9664,"created_at":"2020-12-06 20:40:26","updated_at":"2021-02-17 08:48:20","waktu_publish_formatted":" Rabu, 17 Februari 2021. 10:00:00 WIB."},{"id":248,"uuid":"9c9459ab-91f2-4cb6-9779-096bdc3fa236","author_user_id":9664,"materi_section_id":74,"judul":"Hari 4 & Hari 5 | REST API","permalink":"hari-4-hari-5-rest-api","konten":"<p>https:\/\/www.youtube.com\/watch?v=pLY7obqFQHg&amp;feature=youtu.be<\/p>","waktu_publish":"2021-02-18 10:00:00","status_publish":"publish","urutan":4,"created_by":9664,"updated_by":9664,"created_at":"2020-12-06 21:36:47","updated_at":"2021-02-18 07:20:42","waktu_publish_formatted":" Kamis, 18 Februari 2021. 10:00:00 WIB."}]},{"id":104,"uuid":"be831f39-5845-4f10-ad33-c2a759915fd2","materi_id":14,"nama":"Pekan 2 - Materi","permalink":"pekan-2-materi","urutan":3,"created_by":9664,"updated_by":9664,"created_at":"2020-12-14 07:23:57","updated_at":null,"posting":[{"id":323,"uuid":"ea4dfab1-823d-4b05-9d5f-4261f1da5eac","author_user_id":9664,"materi_section_id":104,"judul":"Hari 1 & 2 | Event, Listener & Queue","permalink":"hari-1-2-event-listener-queue","konten":"<p><!-- wp:heading --><\/p>\r\n<h2><strong>Event Listener<\/strong><\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Pada tutorial sebelumnya, di aplikasi pembuatan API, kita membuat sebuah controller , RegisterController , untuk mendaftarkan user yang baru masuk ke aplikasi kita. Biasanya ketika user berhasil register, maka user akan diberi notifikasi baik melalui email bahwa user berhasil terdaftar di aplikasi kita.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Sebagian programmer , setelah store ke database untuk mendaftarkan user baru ke table users, kode untuk mengirimkan notifikasi ini , ditulis memanjang ke bawah setelah kode untuk store ke database, bahkan hingga puluhan atau bahkan ratusan baris kode, sehingga controller yang pada awalnya hanya menghandle register user (store ke database) sudah tidak representatif lagi.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Agar memiliki kode yang bersih, readble, maintainable, maka implementasi Event Listener di Laravel sangat perlu dilakukan. Lalu bagaimana cara membuatnya, simak <a href=\"https:\/\/youtu.be\/b8BAcM0hd0c\">video berikut<\/a> .<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading --><\/p>\r\n<h2><strong>Queue (Antrian)<\/strong><\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Pada tutorial sebelumnya kita berhasil membuat event ketika user baru berhasil didaftarkan, kemudian kita membuat listener yaitu mengirimkan email ke user baru tersbeut.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Namun perlu teman teman ketahui, bahwa ketika mengirim email, aplikasi Laravel kita akan menunggu email terkirim dulu, baru menjalankan kode selanjutnya, yang dalam hal ini akan me retern response json.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Bayangkan ketika kita memiliki 100 email yang mau dikirim, harus berapa lama kita menunggu?<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Maka solusinya adalah dengan menggunakan queue (antrian). Jadi pengiriman email akan dilakukan di background (di balik layar), sehingga aplikasi tidak harus menunggu dulu email terkirim, kemudian menjalankan kode selanjutnya.<br \/><br \/>Untuk lebih jelasnya, mari kita simak <a href=\"https:\/\/youtu.be\/2PUtnbNzraY\">video berikut <\/a>.<br \/><br \/><br \/><\/p>\r\n<p><!-- \/wp:paragraph --><\/p>","waktu_publish":"2021-02-22 10:00:00","status_publish":"publish","urutan":1,"created_by":9664,"updated_by":9664,"created_at":"2020-12-14 07:26:16","updated_at":"2021-02-22 09:39:54","waktu_publish_formatted":" Senin, 22 Februari 2021. 10:00:00 WIB."},{"id":344,"uuid":"a5d8901c-74a3-4fd6-bfd0-58e616711844","author_user_id":9664,"materi_section_id":104,"judul":"Hari 3 | Mengenal Type Data Array dan Object pada Javascript","permalink":"hari-3-mengenal-type-data-array-dan-object-pada-javascript","konten":"<p><!-- wp:paragraph --><\/p>\r\n<p>Pada Laravel Dasar teman teman sudah dikenalkan mengenai bahasa pemrograman Javascript. Teman-teman sudah dikenalkan mengenai type data pada Javascript, fungsi, conditional, loop, dsb.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Pada kesempatan kali ini , teman teman akan diingatkan ulang mengenai type data array dan object pada Javascript, dan kita akan mempelajari method method yang disediakan oleh Javascript untuk memanipulasi array dan object tersebut, seperti push, pop, delete, dll<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Silakan tonton video yang kami pilihkan dari Web Programming UNPAS ini, agar teman teman dapat memahami type data Array dan Object pada Javascript : <br \/><br \/><a href=\"https:\/\/www.youtube.com\/watch?v=CW5pfpafgDE&amp;list=PLFIM0718LjIWXagluzROrA-iBY9eeUt4w&amp;index=34\">https:\/\/www.youtube.com\/watch?v=CW5pfpafgDE&amp;list=PLFIM0718LjIWXagluzROrA-iBY9eeUt4w&amp;index=34<\/a><br \/><br \/>Catatan : Tonton hanya pada vide 34 s.d. 44 saja<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Atau bagi yang senang belajar dengan membaca artikel, silakan akses artikel dari petani kode berikut :<br \/>Array : <a href=\"https:\/\/www.petanikode.com\/javascript-array\/\">https:\/\/www.petanikode.com\/javascript-array\/<\/a><br \/>Object : <a href=\"https:\/\/www.petanikode.com\/javascript-objek\/\">https:\/\/www.petanikode.com\/javascript-objek\/<\/a> <\/p>\r\n<p><!-- \/wp:paragraph --><\/p>","waktu_publish":"2021-02-24 08:00:00","status_publish":"publish","urutan":2,"created_by":9664,"updated_by":9664,"created_at":"2020-12-16 06:31:51","updated_at":"2021-02-24 08:39:15","waktu_publish_formatted":" Rabu, 24 Februari 2021. 08:00:00 WIB."},{"id":357,"uuid":"d5d9e807-2598-475f-8694-d2f8d2f561e7","author_user_id":9664,"materi_section_id":104,"judul":"Hari 4 | ES6","permalink":"hari-4-es6","konten":"<p><!-- wp:paragraph --><\/p>\r\n<p>ES6 adalah fitur bahasa pada pemrograman Javascript modern.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":1} --><\/p>\r\n<h1 id=\"daftar-fitur-es6\">Daftar Fitur ES6<\/h1>\r\n<p><!-- \/wp:heading --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li class=\"\">Arrows Function<\/li>\r\n<li class=\"\">Classes<\/li>\r\n<li class=\"\">Enchanced object literals<\/li>\r\n<li class=\"\">Template strings<\/li>\r\n<li class=\"\">Destructuring<\/li>\r\n<li class=\"\">Default + rest + spread<\/li>\r\n<li class=\"\">Let + const<\/li>\r\n<li class=\"\">Iterators + for..of<\/li>\r\n<li class=\"\">Generators<\/li>\r\n<li class=\"\">Unicode<\/li>\r\n<li class=\"\">Modules<\/li>\r\n<li class=\"\">Modules loaders<\/li>\r\n<li class=\"\">Map +set + weakmap + weakset<\/li>\r\n<li class=\"\">Proxies<\/li>\r\n<li class=\"\">Symbols<\/li>\r\n<li class=\"\">Subclassable built-ins<\/li>\r\n<li class=\"\">Promises<\/li>\r\n<li class=\"\">Math + number + string + array + object apis<\/li>\r\n<li class=\"\">Binary dan octal literals<\/li>\r\n<li class=\"\">Reflect API<\/li>\r\n<li class=\"\">Tail calls<\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:paragraph --><\/p>\r\n<p>Tidak perlu menguasai seluruh fitur diatas. Diharuskan menguasai 8 fitur, diantaranya :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list {\"ordered\":true} --><\/p>\r\n<ol>\r\n<li class=\"\">Let + Const<\/li>\r\n<li class=\"\">Arrow Functions<\/li>\r\n<li class=\"\">Default Parameters<\/li>\r\n<li class=\"\">Destructuring<\/li>\r\n<li class=\"\">Rest Parameters + Spread Operator<\/li>\r\n<li class=\"\">Enhanced object literals<\/li>\r\n<li class=\"\">Template literals<\/li>\r\n<li class=\"\">Promises<\/li>\r\n<\/ol>\r\n<p><!-- \/wp:list --> <!-- wp:heading --><\/p>\r\n<h2 id=\"let-const\">Let + Const<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Normal Javascript:<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var x = 1;\r\n \r\nif (x === 1) {\r\nvar x = 2;\r\n \r\nconsole.log(x);\r\n\/\/ expected output: 2\r\n}\r\n \r\nconsole.log(x); \/\/ 2 <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p><strong>ES6 :<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">let x = 1;\r\n \r\nif (x === 1) {\r\n  let x = 2;\r\n \r\n  console.log(x);\r\n  \/\/ expected output: 2\r\n}\r\n \r\nconsole.log(x); \/\/ 1 \r\n\r\nconst number = 42;\r\nnumber = 100; \/\/ Uncaught TypeError: Assignment to constant variable.  <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>Arrow Functions<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Normal Javascript:<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">function f (){\r\n    \/\/ isi Function\r\n}\r\n \r\nvar f = function(){\r\n    \/\/ isi function\r\n} <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p><strong>ES6 :<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">var f = () =&gt; {\r\n    \/\/function\r\n    return () =&gt; {\r\n        \/\/returning a function\r\n    }\r\n} <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading --><\/p>\r\n<h2 id=\"default-parameters\">Default Parameters<\/h2>\r\n<p><!-- \/wp:heading --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">function multiply(a, b = 1) {\r\n  return a * b;\r\n}\r\n \r\nconsole.log(multiply(5, 2));\r\n\/\/ expected output: 10\r\n \r\nconsole.log(multiply(5));\r\n\/\/ expected output: 5 <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>Destructuring<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p><strong>Normal Javascript:<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">let studentName = {\r\n    firstName: 'Peter',\r\n    lastName: 'Parker'\r\n};\r\n \r\nconst firstName = studentName.firstName;\r\nconst lastName = studentName.lastName; <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p><strong>ES6:<\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">let studentName = {\r\n    firstName: 'Peter',\r\n    lastName: 'Parker'\r\n};\r\n \r\nconst { firstName, lastName } = studentName;\r\n \r\nconsole.log(firstName); \/\/ Peter\r\nconsole.log(lastName); \/\/ Parker <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":1} --><\/p>\r\n<h1 id=\"rest-parameters-spread-operator\">Rest Parameters + Spread Operator<\/h1>\r\n<p><!-- \/wp:heading --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ Rest Parameters\r\n \r\nlet scores = ['98', '95', '93', '90', '87', '85']\r\nlet [first, second, third, ...restOfScores] = scores;\r\n \r\nconsole.log(first) \/\/ 98\r\nconsole.log(second) \/\/ 95\r\nconsole.log(third) \/\/ 93\r\nconsole.log(restOfScores) \/\/ [90, 87, 85] <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">let array1 = ['one', 'two']\r\nlet array2 = ['three', 'four']\r\nlet array3 = ['five', 'six']\r\n \r\n\/\/ ES5 Way \/ Normal Javascript\r\n \r\nvar combinedArray = array1.concat(array2).concat(array3)\r\nconsole.log(combinedArray) \/\/ ['one', 'two', 'three', 'four', 'five', 'six']\r\n \r\n\/\/ ES6 Way \r\n \r\nlet combinedArray = [...array1, ...array2, ...array3]\r\nconsole.log(combinedArray) \/\/ ['one', 'two', 'three', 'four', 'five', 'six'] <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":1} --><\/p>\r\n<h1 id=\"enhanced-object-literals\">Enhanced object literals<\/h1>\r\n<p><!-- \/wp:heading --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">const fullName = 'Zell Liew'\r\n \r\nconst Zell = {\r\n  fullName: fullName\r\n}\r\n \r\n\/\/ ES6 way\r\nconst Zell = {\r\n  fullName\r\n}<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":1} --><\/p>\r\n<h1><!-- wp:heading {\"level\":1} --><\/h1>\r\n<h1 id=\"template-literals\">Template Literals<\/h1>\r\n<h1><!-- \/wp:heading --> <!-- wp:image {\"id\":13918,\"sizeSlug\":\"large\"} --><\/h1>\r\n<figure class=\"wp-block-image size-large\"><img class=\"wp-image-13918\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/12\/image-4.png\" alt=\"\" \/><\/figure>\r\n<pre class=\"wp-block-preformatted\"><!-- \/wp:paragraph --><\/pre>\r\n<p><!-- \/wp:heading --> <!-- wp:preformatted --><\/p>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>&nbsp;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Bagi yang menyenangi belajar lewat video, ini kami rekomendasikan belajar melalui playlist dari sekolah koding berikut : <a href=\"https:\/\/www.youtube.com\/watch?v=XSgSWPLfFvE&amp;list=PLCZlgfAG0GXBWhs2AwMdPyKtMG2cF4YSR\">https:\/\/www.youtube.com\/watch?v=XSgSWPLfFvE&amp;list=PLCZlgfAG0GXBWhs2AwMdPyKtMG2cF4YSR<\/a><\/p>\r\n<p><!-- \/wp:paragraph --><\/p>","waktu_publish":"2021-02-25 09:00:00","status_publish":"publish","urutan":3,"created_by":9664,"updated_by":9664,"created_at":"2020-12-17 07:43:26","updated_at":"2021-02-25 09:07:42","waktu_publish_formatted":" Kamis, 25 Februari 2021. 09:00:00 WIB."},{"id":378,"uuid":"2d6269d7-c2d2-4c09-9f34-df4a0949e80a","author_user_id":9664,"materi_section_id":104,"judul":"Hari 5 | Mengenal VueJS","permalink":"hari-5-mengenal-vuejs","konten":"<p><!-- wp:paragraph --><\/p>\r\n<p>Bismillaah..<br \/><br \/>Pada kesempatan kali ini , kita akan mencoba mengenal salah satu framework Jacascript yang cukup terkenal, yakni Vue JS. Vue JS adalah framework javascript yang berfungsi untuk membangun antarmuka web yang interaktif. Vue sebagaimana Javascript (JS) memang awalnya didesain untuk kebutuhan web, namun seiring perkembangan teknologi yang mendukung JS, maka saat ini Vue juga mulai dapat digunakan untuk mengembangkan aplikasi berbasis desktop dan mobile.<br \/><br \/>Mengapa memilih Vue ?<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list {\"ordered\":true} --><\/p>\r\n<ol>\r\n<li>Didukung banyak library<\/li>\r\n<li>Digunakan Perusahan besar seperti : xiaomi, adobe, alibaba, dll<\/li>\r\n<li>Mudah dipahami<\/li>\r\n<li>Mudah diintegrasikan dengan teknologi lain<\/li>\r\n<\/ol>\r\n<p><!-- \/wp:list --> <!-- wp:paragraph --><\/p>\r\n<p>Langsung saja kita mulai mengenal Vue JS, memlalui tutorial dari <br \/>Sekolah Koding : <a href=\"https:\/\/www.youtube.com\/watch?v=EmCBOtkXxdg&amp;list=PLCZlgfAG0GXCFeOD_wBc9GrYF9pA8loLQ&amp;index=1\">link_video<\/a> <br \/>IDSTACK : <a href=\"https:\/\/www.youtube.com\/watch?v=DufEC_OFFyI&amp;list=PL1aMeb5UP_PHsDV00mn6RDHvSVVA-Q5kA\">link video<\/a><\/p>\r\n<p><!-- \/wp:paragraph --><\/p>","waktu_publish":"2021-02-26 08:00:00","status_publish":"publish","urutan":4,"created_by":9664,"updated_by":9664,"created_at":"2020-12-18 07:53:00","updated_at":"2021-02-26 08:48:56","waktu_publish_formatted":" Jumat, 26 Februari 2021. 08:00:00 WIB."}]},{"id":105,"uuid":"a73f8eac-f94c-410a-bf7a-ee149626a574","materi_id":14,"nama":"Pekan 2 - Tugas","permalink":"pekan-2-tugas","urutan":4,"created_by":9664,"updated_by":9664,"created_at":"2020-12-14 07:24:08","updated_at":null,"posting":[{"id":324,"uuid":"5424b630-4fb6-486b-ad7d-8ff54ee4aab2","author_user_id":9664,"materi_section_id":105,"judul":"Hari 1 & 2 | Event, Listener & Queue","permalink":"hari-1-2-event-listener-queue","konten":"<p>Buatlah fitur kirim kode otp menggunakan konsep antrian di Project Crowdfunding kita. Pasang fitur tersebut di route register dan regenerate code otp.<\/p>","waktu_publish":"2021-02-22 10:00:00","status_publish":"publish","urutan":1,"created_by":9664,"updated_by":9664,"created_at":"2020-12-14 07:27:08","updated_at":"2021-02-22 09:40:22","waktu_publish_formatted":" Senin, 22 Februari 2021. 10:00:00 WIB."},{"id":345,"uuid":"4304b3d4-f574-4ba0-afb9-e3fa964b736d","author_user_id":9664,"materi_section_id":105,"judul":"Hari 3 | Tugas Mengenal Type Data Array dan Object pada Javascript","permalink":"hari-3-tugas-mengenal-type-data-array-dan-object-pada-javascript","konten":"<p><!-- wp:heading {\"level\":4} --><\/p>\r\n<h4><strong>soal <\/strong>1<\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>buatlah variabel seperti di bawah ini<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>var daftarBuah = [\"2. Apel\", \"5. Jeruk\", \"3. Anggur\", \"4. Semangka\", \"1. Mangga\"];<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>urutkan array di atas dan tampilkan data seperti output di bawah ini (dengan menggunakan loop):<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>1. Mangga\r\n2. Apel\r\n3. Anggur\r\n4. Semangka\r\n5. Jeruk<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:heading {\"level\":4} --><\/p>\r\n<h4><strong>soal <\/strong>2<\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>buatlah variabel seperti di bawah ini<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>var kalimat=\"saya sangat senang belajar javascript\"<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>ubah kalimat diatas menjadi array dengan output seperti di bawah ini<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>[\"saya\", \"sangat\", \"senang\", \"belajar\", \"javascript\"]<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p><strong>soal <\/strong>3<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>anda diberikan data-data buah seperti di bawah ini<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>1.nama: strawberry\r\n  warna: merah\r\n  ada bijinya: tidak\r\n  harga: 9000 \r\n2.nama: jeruk\r\n  warna: oranye\r\n  ada bijinya: ada\r\n  harga: 8000\r\n3.nama: Semangka\r\n  warna: Hijau &amp; Merah\r\n  ada bijinya: ada\r\n  harga: 10000\r\n4.nama: Pisang\r\n  warna: Kuning\r\n  ada bijinya: tidak\r\n  harga: 5000<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>uraikan data tersebut menjadi array of object dan munculkan data pertama<\/p>\r\n<p><!-- \/wp:paragraph --><\/p>","waktu_publish":"2021-02-24 10:00:00","status_publish":"publish","urutan":2,"created_by":9664,"updated_by":9664,"created_at":"2020-12-16 06:32:25","updated_at":"2021-02-24 08:39:10","waktu_publish_formatted":" Rabu, 24 Februari 2021. 10:00:00 WIB."},{"id":358,"uuid":"969b650f-a9bc-4a93-901a-d74030318217","author_user_id":9664,"materi_section_id":105,"judul":"Hari 4 | ES6","permalink":"hari-4-es6","konten":"<p><!-- wp:paragraph --><\/p>\r\n<p><strong>Petunjuk <\/strong><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Ubahlah Code berikut ke ES6:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3 id=\"1-mengubah-fungsi-menjadi-fungsi-arrow\">1. Mengubah fungsi menjadi fungsi arrow<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">const golden = function goldenFunction(){\r\n  console.log(\"this is golden!!\")\r\n}\r\n \r\ngolden()<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>2. Sederhanakan menjadi Object literal di ES6<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>return dalam fungsi di bawah ini masih menggunakan object literal dalam ES5, ubahlah menjadi bentuk yang lebih sederhana di ES6.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">const newFunction = function literal(firstName, lastName){\r\n  return {\r\n    firstName: firstName,\r\n    lastName: lastName,\r\n    fullName: function(){\r\n      console.log(firstName + \" \" + lastName)\r\n      return \r\n    }\r\n  }\r\n}\r\n \r\n\/\/Driver Code \r\nnewFunction(\"William\", \"Imoh\").fullName() <\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>3. Destructuring<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Diberikan sebuah objek sebagai berikut:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">const newObject = {\r\n  firstName: \"Harry\",\r\n  lastName: \"Potter Holt\",\r\n  destination: \"Hogwarts React Conf\",\r\n  occupation: \"Deve-wizard Avocado\",\r\n  spell: \"Vimulus Renderus!!!\"\r\n}<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>dalam ES5 untuk mendapatkan semua nilai dari object tersebut kita harus tampung satu per satu:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">const firstName = newObject.firstName;\r\nconst lastName = newObject.lastName;\r\nconst destination = newObject.destination;\r\nconst occupation = newObject.occupation;<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:paragraph --><\/p>\r\n<p>Gunakan metode destructuring dalam ES6 untuk mendapatkan semua nilai dalam object dengan lebih singkat (1 line saja)<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">\/\/ Driver code\r\nconsole.log(firstName, lastName, destination, occupation)<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3 id=\"4-array-spreading\">4. Array Spreading<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Kombinasikan dua array berikut menggunakan array spreading ES6<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">const west = [\"Will\", \"Chris\", \"Sam\", \"Holly\"]\r\nconst east = [\"Gill\", \"Brian\", \"Noel\", \"Maggie\"]\r\nconst combined = west.concat(east)\r\n\/\/Driver Code\r\nconsole.log(combined)<\/pre>\r\n<p><!-- \/wp:preformatted --> <!-- wp:heading {\"level\":3} --><\/p>\r\n<h3 id=\"5-template-literals\">5. Template Literals<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>sederhanakan string berikut agar menjadi lebih sederhana menggunakan template literals ES6:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:preformatted --><\/p>\r\n<pre class=\"wp-block-preformatted\">const planet = \"earth\" const view = \"glass\" var before = 'Lorem ' + view + 'dolor sit amet, ' +       'consectetur adipiscing elit,' + planet + 'do eiusmod tempor ' +     'incididunt ut labore et dolore magna aliqua. Ut enim' +     ' ad minim veniam'   \/\/ Driver Code console.log(before) <\/pre>\r\n<p><!-- \/wp:preformatted --><\/p>","waktu_publish":"2021-02-25 10:00:00","status_publish":"publish","urutan":3,"created_by":9664,"updated_by":9664,"created_at":"2020-12-17 07:43:52","updated_at":"2021-02-25 09:07:26","waktu_publish_formatted":" Kamis, 25 Februari 2021. 10:00:00 WIB."},{"id":379,"uuid":"ef680615-afb9-4684-99dd-26db4202be6c","author_user_id":9664,"materi_section_id":105,"judul":"Hari 5 | Mengenal Vue JS","permalink":"hari-5-mengenal-vue-js","konten":"<p>Tugas : <a href=\"https:\/\/www.youtube.com\/watch?v=Zdthr-Xw4MY&amp;feature=youtu.be\">https:\/\/www.youtube.com\/watch?v=Zdthr-Xw4MY&amp;feature=youtu.be<\/a><\/p>","waktu_publish":"2021-02-26 09:00:00","status_publish":"publish","urutan":4,"created_by":9664,"updated_by":9664,"created_at":"2020-12-18 07:53:42","updated_at":"2021-02-26 08:49:43","waktu_publish_formatted":" Jumat, 26 Februari 2021. 09:00:00 WIB."}]},{"id":123,"uuid":"9eaef60d-5304-4e27-95c2-d07642be926b","materi_id":14,"nama":"Pekan 3 - Materi","permalink":"pekan-3-materi","urutan":5,"created_by":9664,"updated_by":9664,"created_at":"2020-12-21 07:28:03","updated_at":null,"posting":[{"id":398,"uuid":"e6064bea-fb3a-4468-989f-0f476f2a8c98","author_user_id":9664,"materi_section_id":123,"judul":"Hari 1 | Ajax Request","permalink":"hari-1-ajax-request","konten":"<p><!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>Apa itu AJAX?<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Biasanya web tanpa teknologi AJAX , setiap mengambil atau mengirim data dari server , browser akan reload halaman. Dengan adanya AJAX semestinya itu tidak terjadi lagi.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>AJAX merupakan singkatan dari&nbsp;<strong>A<\/strong>synchronous&nbsp;<strong>J<\/strong>avascript&nbsp;<strong>A<\/strong>and&nbsp;<strong>X<\/strong>ML.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>AJAX berfungsi untuk:<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:list --><\/p>\r\n<ul>\r\n<li>Mengambil data dari server secara&nbsp;<em>background<\/em>;<\/li>\r\n<li>Update tampilan web tanpa harus relaod browser;<\/li>\r\n<li>Mengirim data ke server secara&nbsp;<em>background<\/em><\/li>\r\n<\/ul>\r\n<p><!-- \/wp:list --> <!-- wp:paragraph --><\/p>\r\n<p>Berikut contoh penggunaan Ajax Request menggunakan VueResource : <a href=\"https:\/\/www.youtube.com\/watch?v=ZQ2AOck5KmU\">video<\/a><br \/><br \/><\/p>\r\n<p><!-- \/wp:paragraph --><\/p>","waktu_publish":"2021-03-01 08:25:00","status_publish":"publish","urutan":1,"created_by":9664,"updated_by":9664,"created_at":"2020-12-21 07:28:42","updated_at":"2021-03-01 08:25:50","waktu_publish_formatted":" Senin, 01 Maret 2021. 08:25:00 WIB."},{"id":422,"uuid":"6093e4e9-7b44-4705-8e49-c78d3025ec66","author_user_id":9664,"materi_section_id":123,"judul":"Hari 2 | Vue Router","permalink":"hari-2-vue-router","konten":"<p><!-- wp:paragraph --><\/p>\r\n<p>Pada kesempatan kali ini kita akan belajar cara bagaimana menangani routing di palikasi Vue JS kita. Secara official Vue JS membuat library yang dinamakan Vue Router. Ini alamat webnya : <a href=\"https:\/\/router.vuejs.org\/\">https:\/\/router.vuejs.org<\/a>.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":4} --><\/p>\r\n<h4>Instalasi<\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Vue Router perlu ditambahkan ke dalam halaman HTML kita. Caranya bisa kita unduh ke lokal (sehingga tidak membutuhkan koneksi internet lagi) atau ditautkan langsung dengan server pustaka Vue (CDN). Silakan tambahkan ke file index.html kita :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>&lt;script src=\"https:\/\/unpkg.com\/vue-router\/dist\/vue-router.js\"&gt;&lt;\/script&gt;<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>Untuk mengembangkan aplikasi dengan skala besar, maka untuk instalasi Vue Router disarankan kita menggunakan package manager seperti NPM atau YARN.&nbsp;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":4} --><\/p>\r\n<h4>Mari kita mulai..<\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Silakan buat index.html berikut<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>&lt;!DOCTYPE html&gt;\r\n&lt;html lang=\"en\"&gt;\r\n&lt;head&gt;\r\n  &lt;meta charset=\"UTF-8\"&gt;\r\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\r\n  &lt;title&gt;Document&lt;\/title&gt;\r\n&lt;\/head&gt;\r\n&lt;body&gt;\r\n  &lt;div id=\"app\"&gt;\r\n    &lt;h1&gt;Belajar Vue Router&lt;\/h1&gt;\r\n  &lt;\/div&gt;\r\n\r\n  &lt;script src=\"https:\/\/unpkg.com\/vue\/dist\/vue.js\"&gt;&lt;\/script&gt;\r\n  &lt;script src=\"https:\/\/unpkg.com\/vue-router\/dist\/vue-router.js\"&gt;&lt;\/script&gt;\r\n \r\n&lt;\/body&gt;\r\n&lt;\/html&gt;<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>jalankan file index.html dengan http :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:image {\"id\":13330,\"width\":620,\"height\":30,\"sizeSlug\":\"large\"} --><\/p>\r\n<figure class=\"wp-block-image size-large is-resized\"><img class=\"wp-image-13330\" src=\"https:\/\/blog.sanbercode.com\/wp-content\/uploads\/2020\/11\/image-4-1024x51.png\" alt=\"\" width=\"620\" height=\"30\" \/><\/figure>\r\n<p><!-- \/wp:image --> <!-- wp:paragraph --><\/p>\r\n<p>Kemudian kita tambahkan script berikut :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>\/\/ Kita membuat 2 component , yaitu Home dan About\r\nconst Home = { template: '&lt;div&gt;Ini Halaman Home&lt;\/div&gt;' }\r\nconst About = { template: '&lt;div&gt;Ini Halaman About&lt;\/div&gt;' }\r\n\r\n\/\/ Kemudian kita arahkan setiap route ke component yang kita inginkan\r\nconst routes = [\r\n  { path: '\/', component: Home , alias: '\/home'},\r\n  { path: '\/about', component: About }\r\n]\r\n\r\n\/\/Kemudian kita instansiasi object Vue Router dan tambahkan routes yang sudah kita buat tadi\r\nconst router = new VueRouter({\r\n  routes \r\n})\r\n\r\n\/\/Kemudian kita tambahkan object VueRouter yang kita namakan router ke object Vue\r\nconst app = new Vue({\r\n  router\r\n}).$mount('#app')<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>Kemudian kita tambahkan di html kita :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>&lt;div id=\"app\"&gt;\r\n  \r\n    &lt;h1&gt;Belajar Vue Router&lt;\/h1&gt;\r\n\r\n    &lt;!-- Pengganti tag &lt;a href=\"\"&gt;&lt;\/a&gt;  --&gt;\r\n    &lt;router-link to=\"\/\"&gt;Home&lt;\/router-link&gt;\r\n    &lt;router-link to=\"\/about\"&gt;About&lt;\/router-link&gt;\r\n\r\n    &lt;!-- Untuk Menampilkan component secara dinamis , sesuai dengan route yang diakses --&gt;\r\n    &lt;router-view&gt;&lt;\/router-view&gt;\r\n&lt;\/div&gt;<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>Silakan Akses di browser html kita, dan lihat Kita telah berhasil membuat route di aplikasi Vue JS kita.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Kita bisa menghandle , jika kita mengakses url selain '\/' dan '\/about' , maka akan kita redirect ke '\/' dengan cara :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>const routes = [\r\n    { path: '\/', component: Home, alias: '\/home' },\r\n    { path: '\/about', component: About },\r\n    { path: '*', redirect: '\/' }\r\n]<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>&nbsp;<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":4} --><\/p>\r\n<h4>Dynamic Routing<\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Kita akan membuat route yang dinamis<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>{ path: '\/category\/:id', component: CategoryComponent }<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>Silakan buat file&nbsp;<code>CategoriesComponent.js<\/code>&nbsp;pada direktori yang sama dengan file&nbsp;<code>index.html<\/code><\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>export const CategoriesComponent = {\r\n    data () {\r\n        return {\r\n            categories: [\r\n                {\r\n                    id: 1,\r\n                    title: 'Alat Tulis'\r\n                },\r\n                {\r\n                    id: 2,\r\n                    title: 'Alat Mandi'\r\n                },\r\n                {\r\n                    id: 3,\r\n                    title: 'Alat Masak'\r\n                },\r\n                \r\n            ]\r\n        }\r\n    },\r\n    template: `\r\n        &lt;div&gt;\r\n            &lt;h1&gt;Daftar Kategori&lt;\/h1&gt;\r\n            &lt;ul&gt;\r\n                &lt;li v-for=\"category of categories\"&gt;\r\n                    &lt;router-link :to=\"'\/category\/'+category.id\"&gt; \r\n                        {{ category.title }} \r\n                    &lt;\/router-link&gt;\r\n                &lt;\/li&gt;\r\n            &lt;\/ul&gt;\r\n        &lt;\/div&gt;\r\n    ` \r\n}\r\n<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>Kemudian di index.html kita import CategoriesComponent :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>&lt;script type=\"module\"&gt;\r\nimport { CategoriesComponent } from '.\/CategoriesComponent.js'<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>dan tambahkan map route nya :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>const routes = [\r\n    { path: '\/', component: Home, alias: '\/home' },\r\n    { path: '\/about', component: About },\r\n    { path: '\/categories', component: CategoriesComponent },\r\n    { path: '*', redirect: '\/' }\r\n]<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>Kemudian tambahkan router link nya :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>&lt;div id=\"app\"&gt;\r\n    &lt;router-link to=\"\/\"&gt;Home&lt;\/router-link&gt;\r\n    &lt;router-link to=\"\/about\"&gt;About&lt;\/router-link&gt;        \r\n    &lt;router-link to=\"\/categories\"&gt;Categories&lt;\/router-link&gt;        \r\n    &lt;hr&gt;\r\n    &lt;router-view&gt;&lt;\/router-view&gt;\r\n&lt;\/div&gt;<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>Kemudian buatlah CategoryComponent pada directory yang sama dengan index.html<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>export const CategoryComponent = {\r\n    data(){\r\n        return {\r\n            categories: [\r\n                {\r\n                    id: 1,\r\n                    title: 'Alat Tulis',\r\n                    description : 'Alat tulis adalah alat yang digunakan untuk menulis, diantaranya pulpen, pensil, penghapus, dll.'\r\n                },\r\n                {\r\n                    id: 2,\r\n                    title: 'Alat Mandi',\r\n                    description : 'Alat tulis adalah alat yang digunakan untuk mandi, diantaranya gayung, sikat gigi, handuk, dll.'\r\n\r\n                },\r\n                {\r\n                    id: 3,\r\n                    title: 'Alat Masak',\r\n                    description : 'Alat tulis adalah alat yang digunakan untuk memasak, diantaranya panci, kompor, katel, dll.'\r\n\r\n                },\r\n                \r\n            ]\r\n        }\r\n    },\r\n    computed: {\r\n        category() {\r\n            return this.categories.filter((category)=&gt;{\r\n                return category.id === parseInt(this.$route.params.id)                \r\n            })[0]\r\n        }\r\n    },\r\n    template: `&lt;div &gt;\r\n            &lt;h1&gt;Category :  {{ category.title }}&lt;\/h1&gt;\r\n            &lt;ul&gt;\r\n                &lt;li v-for=\"(num, value) of category\"&gt;\r\n                    {{ num +' : '+ value }} &lt;br&gt;\r\n                &lt;\/li&gt;\r\n            &lt;\/ul&gt;\r\n        &lt;\/div&gt;`,\r\n   \r\n}<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>Kemudian jangan lupa kita import di dalam index.html :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code>&lt;script type=\"module\"&gt;\r\n    import { CategoriesComponent } from '.\/CategoriesComponent.js'\r\n    import { CategoryComponent } from '.\/CategoryComponent.js'<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>Kemudian kita tambahkan juga di dalam const routes :<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:code --><\/p>\r\n<pre class=\"wp-block-code\"><code> const routes = [\r\n        { path: '\/', component: Home, alias: '\/home' },\r\n        { path: '\/about', component: About },\r\n        { path: '\/categories', component: CategoriesComponent },\r\n        { path: '\/category\/:id', component: CategoryComponent },\r\n        { path: '*', redirect: '\/' }\r\n\r\n    ]\r\n<\/code><\/pre>\r\n<p><!-- \/wp:code --> <!-- wp:paragraph --><\/p>\r\n<p>Dan silakan coba pada browser .<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:heading {\"level\":4} --><\/p>\r\n<h4>Navigation Guard<\/h4>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>Kita akan belajar navigation guard melalui video berikut : <a href=\"https:\/\/youtu.be\/z4k3w3_ttjM\">video<\/a>.<\/p>\r\n<p><!-- \/wp:paragraph --><\/p>","waktu_publish":"2021-03-02 09:00:00","status_publish":"publish","urutan":2,"created_by":9664,"updated_by":9664,"created_at":"2020-12-22 08:35:31","updated_at":"2021-03-02 09:37:19","waktu_publish_formatted":" Selasa, 02 Maret 2021. 09:00:00 WIB."},{"id":430,"uuid":"afbf39cb-dcc3-471e-bb7c-f5b279969620","author_user_id":9664,"materi_section_id":123,"judul":"Hari 3 | Vuex","permalink":"hari-3-vuex","konten":"<p><!-- wp:heading {\"level\":3} --><\/p>\r\n<h3>Apa itu state management?<\/h3>\r\n<p><!-- \/wp:heading --> <!-- wp:paragraph --><\/p>\r\n<p>State management merupakan sentralisasi variabel data, sehingga semua component dalam aplikasi dapat mengakses dan memanipulasinya dengan aturan-aturan tertentu sehingga perubahannya dapat diprediksi.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Mari kita saksikan tutorial state management menggunakan vuex dari channel balademy : <a href=\"https:\/\/www.youtube.com\/watch?v=jK_U1E_ZKk8&amp;list=PL9At9z2rvOC9ptNIm1G1aNAIJ60m5BTcI\">playlist<\/a><br \/>Atau bagi yang menyukai materi melalui artikel , bisa baca artikel berikut : <a href=\"https:\/\/ngide.net\/kenalan-dengan-vuex-state-management-di-vue-js\/\">artikel<\/a><\/p>\r\n<p><!-- \/wp:paragraph --><\/p>","waktu_publish":"2021-03-03 08:45:00","status_publish":"publish","urutan":3,"created_by":9664,"updated_by":9664,"created_at":"2020-12-23 08:40:43","updated_at":"2021-03-03 08:41:13","waktu_publish_formatted":" Rabu, 03 Maret 2021. 08:45:00 WIB."}]},{"id":124,"uuid":"38dc48f2-3ad8-4db5-8829-598991081084","materi_id":14,"nama":"Pekan 3 - Tugas","permalink":"pekan-3-tugas","urutan":6,"created_by":9664,"updated_by":9664,"created_at":"2020-12-21 07:31:23","updated_at":null,"posting":[{"id":399,"uuid":"2d3ccacd-1368-42b2-9eb0-6e295b91bfde","author_user_id":9664,"materi_section_id":124,"judul":"Hari 1 | Ajax Request","permalink":"hari-1-ajax-request","konten":"<p><!-- wp:paragraph --><\/p>\r\n<p>Terapkanlah ajax request menggunakan Vue Resource pada soal quiz Vue JS kemarin.<\/p>\r\n<p><!-- \/wp:paragraph --> <!-- wp:paragraph --><\/p>\r\n<p>Ini soal quiz kemarin : <br \/><a href=\"https:\/\/youtu.be\/SZd7GsV9zzI\">https:\/\/youtu.be\/SZd7GsV9zzI<\/a><\/p>\r\n<p>Langkah - langkah :<\/p>\r\n<ol>\r\n<li>Buatlah project Laravel baru (jangan gunakan project Crowdfunding)<\/li>\r\n<li>Buatlah tampilan seperti di video di index.blade.php<\/li>\r\n<li>Tambahkan CDN Vue dan VueJS pada index.blade.php<\/li>\r\n<li>Siapkan table users, dan isikan beberapa data dummy<\/li>\r\n<li>Siapkan controller untuk get data users, update data user, dan delete data user<\/li>\r\n<li>Buatlah code proses ajax request di index.blade.php<\/li>\r\n<\/ol>\r\n<p><!-- \/wp:paragraph --><\/p>","waktu_publish":"2021-03-01 09:00:00","status_publish":"publish","urutan":1,"created_by":9664,"updated_by":9664,"created_at":"2020-12-21 07:31:53","updated_at":"2021-03-01 08:26:17","waktu_publish_formatted":" Senin, 01 Maret 2021. 09:00:00 WIB."}]}],"list_kelas":[{"id":14,"uuid":"976b8da4-362f-4711-8a87-c84810dd3fd2","kategori_kelas_id":13,"versi":"1.0.0","created_by":9664,"updated_by":9664,"created_at":"2020-12-06 20:10:17","updated_at":null}],"is_done":1}